<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gantry</name>
    </assembly>
    <members>
        <member name="T:Gantry.Core.Abstractions.BlockLayer">
            <summary>
                Constants used for GetBlock or GetBlockId calls throughout the engine, to guide whether the block should be read from the solid blocks layer, the fluids layer, or perhaps both.
                <br />The game engine supports different block "layers" in 1.17+.  Currently there is a solid blocks layer (e.g. terrain, loose stones, plants, reeds) and a fluids layer (e.g. still water, flowing water, lava, lake ice).  Both layers can contain a block at the same position.
                <br />The .Default access is usually fine for getting blocks in the general case, but if checking for the presence of water, lake ice or lava, the .Fluids access should be used
            </summary>
        </member>
        <member name="F:Gantry.Core.Abstractions.BlockLayer.Default">
            <summary>
                Returns the contents of the 'solid blocks' layer; but for backwards compatibility, if it is empty (air) and a fluid is present, returns the fluid instead
                <br />Useful when checking for air blocks, i.e. if 0 / air is returned then there is no block in *any* of the layers at this position.   Also maintains compability with 1.16.x code for 1.16.x worlds (Where there can never be both a solid block and a fluid in the same position)
                <br />In other situations mods coded for 1.17+ should ideally not use this but should instead specify SolidBlocks or Fluids explicitly
            </summary>
        </member>
        <member name="F:Gantry.Core.Abstractions.BlockLayer.SolidBlocks">
            <summary>
                Returns only the contents of the blocks layer, even if a liquid or ice is present
            </summary>
        </member>
        <member name="F:Gantry.Core.Abstractions.BlockLayer.Fluids">
            <summary>
                Returns only the contents of the fluids layer, even if a non-air block is present in the blocks layer<br />
                The fluids layer can include also Lake Ice - so not necessarily a liquid!!!  Will never return null.  For no fluid present you'll get a block instance with block code "air" and id 0
            </summary>
        </member>
        <member name="F:Gantry.Core.Abstractions.BlockLayer.FluidOrElseSolid">
            <summary>
                Returns the contents of the fluids layer, unless it is empty in which case returns the solid blocks layer - useful for generating the RainHeightMap for example
            </summary>
        </member>
        <member name="T:Gantry.Core.Abstractions.PrimitiveType">
            <summary>
                Represents a primitive, build-in type, within C#.
            </summary>
            <seealso cref="T:Gantry.Core.Abstractions.TypeEnum`1" />
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.Boolean">
            <summary>
                A <see cref="T:System.Boolean"/> value.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.Byte">
            <summary>
                A <see cref="T:System.Byte"/> value.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.SignedByte">
            <summary>
                A <see cref="T:System.SByte"/> value.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.Short">
            <summary>
                A <see cref="T:System.Int16"/> value.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.UnsignedShort">
            <summary>
                A <see cref="T:System.UInt16"/> value.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.Integer">
            <summary>
                A <see cref="T:System.Int32"/> value.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.UnsignedInteger">
            <summary>
                A <see cref="T:System.UInt32"/> value.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.NativeInteger">
            <summary>
                A <see cref="T:System.IntPtr"/> value.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.UnsignedNativeInteger">
            <summary>
                A <see cref="T:System.UIntPtr"/> value.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.Long">
            <summary>
                A <see cref="T:System.Int64"/> value.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.UnsignedLong">
            <summary>
                A <see cref="T:System.UInt64"/> value.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.Float">
            <summary>
                A <see cref="T:System.Single"/> value.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.Double">
            <summary>
                A <see cref="T:System.Double"/> value.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.Decimal">
            <summary>
                A <see cref="T:System.Decimal"/> value.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.Char">
            <summary>
                A <see cref="T:System.Char"/> value.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.PrimitiveType.String">
            <summary>
                A <see cref="T:System.String"/> value.
            </summary>
        </member>
        <member name="T:Gantry.Core.Abstractions.StringEnum`1">
            <summary>
                Simple implementation of a string-based enumeration, allowing
                equatable string constants that can be implicitly cast to strings.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="F:Gantry.Core.Abstractions.StringEnum`1.ValueDict">
            <summary>
                A dictionary of values held be this instance.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.StringEnum`1.Value">
            <summary>
                The value given to this StringEnum member.
            </summary>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.Create(System.String)">
            <summary>
                Creates the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.op_Implicit(Gantry.Core.Abstractions.StringEnum{`0})~System.String">
            <summary>
                Performs an implicit conversion from <see cref="T:Gantry.Core.Abstractions.StringEnum`1" /> to <see cref="T:System.String" />.
            </summary>
            <param name="enumValue">The enum value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.op_Inequality(Gantry.Core.Abstractions.StringEnum{`0},Gantry.Core.Abstractions.StringEnum{`0})">
            <summary>
                Determines whether the specified <see cref="T:Gantry.Core.Abstractions.StringEnum`1" />, is not equal to this instance.
            </summary>
            <param name="o1">The left operand of the operation.</param>
            <param name="o2">The right operand of the operation.</param>
            <returns>
                Returns <c>true</c> if the left and right operands are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.op_Equality(Gantry.Core.Abstractions.StringEnum{`0},Gantry.Core.Abstractions.StringEnum{`0})">
            <summary>
                Determines whether the specified <see cref="T:Gantry.Core.Abstractions.StringEnum`1" />, is equal to this instance.
            </summary>
            <param name="o1">The left operand of the operation.</param>
            <param name="o2">The right operand of the operation.</param>
            <returns>
                Returns <c>true</c> if the left and right operands are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.Parse(System.String,System.Boolean)">
            <summary>
                Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
            <param name="value">The value.</param>
            <param name="caseSensitive">If set to <c>true</c>, the value will be parsed as a case sensitive string. Default is False.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Gantry.Core.Abstractions.StringEnum`1.TryParse(System.String,System.Boolean,`0@)">
            <summary>
                Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
                A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.
            </summary>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="caseSensitive"><c>false</c> to ignore case; <c>true</c> to consider case.</param>
            <param name="result">
                When this method returns, result contains an object of type T whose value is represented by value if the parse operation succeeds.
                If the parse operation fails, result contains the default value of the underlying type of T.
                Note that this value need not be a member of the T enumeration.
                This parameter is passed uninitialised.
            </param>
            <returns>true if the <paramref name="value">value</paramref> parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="T:Gantry.Core.Abstractions.TypeEnum`1">
            <summary>
                Simple implementation of a Type-based enumeration, allowing
                equatable Type constants that can be implicitly cast to types.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="F:Gantry.Core.Abstractions.TypeEnum`1.ValueDict">
            <summary>
                A dictionary of values held be this instance.
            </summary>
        </member>
        <member name="P:Gantry.Core.Abstractions.TypeEnum`1.Value">
            <summary>
                The value given to this TypeEnum member.
            </summary>
        </member>
        <member name="M:Gantry.Core.Abstractions.TypeEnum`1.Create(System.Type)">
            <summary>
                Creates the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.TypeEnum`1.Create``1">
            <summary>
                Creates the specified value.
            </summary>
            <typeparam name="TValue">The value.</typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.TypeEnum`1.op_Implicit(Gantry.Core.Abstractions.TypeEnum{`0})~System.Type">
            <summary>
                Performs an implicit conversion from <see cref="T:Gantry.Core.Abstractions.TypeEnum`1" /> to <see cref="T:System.Type" />.
            </summary>
            <param name="enumValue">The enum value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.TypeEnum`1.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.TypeEnum`1.op_Inequality(Gantry.Core.Abstractions.TypeEnum{`0},Gantry.Core.Abstractions.TypeEnum{`0})">
            <summary>
                Determines whether the specified <see cref="T:Gantry.Core.Abstractions.TypeEnum`1" />, is not equal to this instance.
            </summary>
            <param name="o1">The left operand of the operation.</param>
            <param name="o2">The right operand of the operation.</param>
            <returns>
                Returns <c>true</c> if the left and right operands are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.TypeEnum`1.op_Equality(Gantry.Core.Abstractions.TypeEnum{`0},Gantry.Core.Abstractions.TypeEnum{`0})">
            <summary>
                Determines whether the specified <see cref="T:Gantry.Core.Abstractions.TypeEnum`1" />, is equal to this instance.
            </summary>
            <param name="o1">The left operand of the operation.</param>
            <param name="o2">The right operand of the operation.</param>
            <returns>
                Returns <c>true</c> if the left and right operands are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.TypeEnum`1.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gantry.Core.Abstractions.TypeEnum`1.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Gantry.Core.ApiEx">
            <summary>
                Provides access to the game's core API from anywhere, within a static context.
            </summary>
            <remarks>
                Use api.UseGantry(options) to configure this helper before use.
            </remarks>
        </member>
        <member name="P:Gantry.Core.ApiEx.Client">
            <summary>
                The core API implemented by the client.<br/>
                The main interface for accessing the client.<br/>
                Contains all subcomponents, and some miscellaneous methods.
            </summary>
            <value>The client-side API.</value>
        </member>
        <member name="P:Gantry.Core.ApiEx.Server">
            <summary>
                The core API implemented by the server.<br/>
                The main interface for accessing the server.<br/>
                Contains all subcomponents, and some miscellaneous methods.
            </summary>
        </member>
        <member name="P:Gantry.Core.ApiEx.Current">
            <summary>
                Common API Components that are available on the server and the client.<br/>
                Cast to ICoreServerAPI, or ICoreClientAPI, to access side specific features.
            </summary>
        </member>
        <member name="P:Gantry.Core.ApiEx.Log">
            <summary>
                Side-agnostic file-based logging facility.
            </summary>
        </member>
        <member name="P:Gantry.Core.ApiEx.ClientMain">
            <summary>
                The concrete implementation of the <see cref="T:Vintagestory.API.Client.IClientWorldAccessor"/> interface.<br/>
                Contains access to lots of world manipulation and management features.
            </summary>
            <value>
                The <see cref="T:Vintagestory.Client.NoObf.ClientMain"/> instance that controls access to features within the gameworld.
            </value>
        </member>
        <member name="P:Gantry.Core.ApiEx.ServerMain">
            <summary>
                The concrete implementation of the <see cref="T:Vintagestory.API.Server.IServerWorldAccessor"/> interface.
                Contains access to lots of world manipulation and management features.
            </summary>
            <value>
                The <see cref="T:Vintagestory.Server.ServerMain"/> instance that controls access to features within  the gameworld.
            </value>
        </member>
        <member name="M:Gantry.Core.ApiEx.Run(System.Action,System.Action)">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <param name="clientAction">The client action.</param>
            <param name="serverAction">The server action.</param>
        </member>
        <member name="M:Gantry.Core.ApiEx.Run(System.Action{Vintagestory.API.Client.ICoreClientAPI},System.Action{Vintagestory.API.Server.ICoreServerAPI})">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <param name="clientAction">The client action.</param>
            <param name="serverAction">The server action.</param>
        </member>
        <member name="M:Gantry.Core.ApiEx.Run(Vintagestory.API.Common.EnumAppSide,System.Action{Vintagestory.API.Client.ICoreClientAPI},System.Action{Vintagestory.API.Server.ICoreServerAPI})">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <param name="side">The app-side to run the action on.</param>
            <param name="clientAction">The client action.</param>
            <param name="serverAction">The server action.</param>
        </member>
        <member name="M:Gantry.Core.ApiEx.Run(Vintagestory.API.Common.EnumAppSide,System.Action{Vintagestory.API.Common.ICoreAPI})">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <param name="side">The app-side to run the action on.</param>
            <param name="universalAction">The universal action.</param>
        </member>
        <member name="M:Gantry.Core.ApiEx.Run``1(System.Action{``0},System.Action{``0},``0)">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <remarks>
                This generic method works best with the Options Pattern, rather than anonymous tuples, when passing in multiple values as a single parameter.
            </remarks>
            <param name="clientAction">The client action.</param>
            <param name="serverAction">The server action.</param>
            <param name="parameter">The parameter to pass to the invoked action.</param>
        </member>
        <member name="M:Gantry.Core.ApiEx.Return``1(System.Func{Vintagestory.API.Client.ICoreClientAPI,``0},System.Func{Vintagestory.API.Server.ICoreServerAPI,``0})">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <remarks>
                This generic method works best with the Options Pattern, rather than anonymous tuples, when passing in multiple values as a single parameter.
            </remarks>
            <param name="clientAction">The client action.</param>
            <param name="serverAction">The server action.</param>
        </member>
        <member name="M:Gantry.Core.ApiEx.Return``1(System.Func{``0},System.Func{``0})">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <remarks>
                This generic method works best with the Options Pattern, rather than anonymous tuples, when passing in multiple values as a single parameter.
            </remarks>
            <param name="clientAction">The client action.</param>
            <param name="serverAction">The server action.</param>
        </member>
        <member name="M:Gantry.Core.ApiEx.Return``1(System.Func{``0},System.Func{``0},``0)">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <remarks>
                This generic method works best with the Options Pattern, rather than anonymous tuples, when passing in multiple values as a single parameter.
            </remarks>
            <param name="clientAction">The client action.</param>
            <param name="serverAction">The server action.</param>
            <param name="parameter">The parameter to pass to the invoked action.</param>
        </member>
        <member name="M:Gantry.Core.ApiEx.OneOf``1(``0,``0)">
            <summary>
                Chooses between one of two objects, based on whether it's being called by the client, or the server.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientObject">The client object.</param>
            <param name="serverObject">The server object.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns>
                Returns <paramref name="clientObject"/> if called from the client, or <paramref name="serverObject"/> if called from the server.
            </returns>
        </member>
        <member name="P:Gantry.Core.ApiEx.Side">
            <summary>
                Gets the current app-side.
            </summary>
            <value>A <see cref="T:Vintagestory.API.Common.EnumAppSide"/> value, representing current app-side; Client, or Server.</value>
        </member>
        <member name="M:Gantry.Core.ApiEx.DumpThreadSideCache(Vintagestory.API.Common.ILogger)">
            <summary>
                Dumps the thread side cache to the log.
            </summary>
        </member>
        <member name="T:Gantry.Core.Contracts.ICommand">
            <summary>
                Represents a command, by way of The Command Pattern.
            </summary>
        </member>
        <member name="M:Gantry.Core.Contracts.ICommand.Execute">
            <summary>
                Executes this command.
            </summary>
        </member>
        <member name="T:Gantry.Core.Cryptography.DeterministicGuid">
            <summary>
                Predictable, re-creatable <see cref="T:System.Guid"/>, produced from string input.  
            </summary>
        </member>
        <member name="M:Gantry.Core.Cryptography.DeterministicGuid.Create(System.String[])">
            <summary>
                Generates a deterministic <see cref="T:System.Guid"/> from a set of strings.
            </summary>
            <param name="data">The data to encode.</param>
        </member>
        <member name="T:Gantry.Core.Cryptography.Rage">
            <summary>
                Represents a class for generating hash keys compatible with GTA 5 file formats.
            </summary>
            <remarks>
                Copied directly from the game -- performs uppercase to lowercase conversions amongst other things.
            </remarks>
        </member>
        <member name="F:Gantry.Core.Cryptography.Rage.LookupTable">
            <summary>
                A lookup table that converts char codes to bytes.
            </summary>
        </member>
        <member name="M:Gantry.Core.Cryptography.Rage.GetHashKeySubString(System.String,System.UInt32)">
            <summary>
                Gets the hash key of the specified sub string, using an initial hash key value.
            </summary>
            <param name="str">The string used to generate a hash key.</param>
            <param name="initialHash">The initial hash key value used to generate the result.</param>
            <returns>A partial hash key compatible with GTA 5.</returns>
        </member>
        <member name="M:Gantry.Core.Cryptography.Rage.GetHashKeyFinalize(System.String,System.UInt32)">
            <summary>
                Finalises the hash key of the specified string, using an initial hash key value.
            </summary>
            <param name="str">The string used to generate a hash key.</param>
            <param name="initialHash">The initial hash key value used to generate the result.</param>
            <returns>A hash key compatible with GTA 5.</returns>
        </member>
        <member name="M:Gantry.Core.Cryptography.Rage.JOAAT(System.String,System.UInt32)">
            <summary>
                Gets the hash key of the specified string, using an initial hash key value.
            </summary>
            <param name="str">The string used to generate a hash key.</param>
            <param name="initialHash">The initial hash key value used to generate the result.</param>
            <returns>A hash key compatible with GTA 5.</returns>
        </member>
        <member name="M:Gantry.Core.Cryptography.Rage.JOAAT(System.String,System.String,System.UInt32)">
            <summary>
                Gets the hash key of the specified string concatenated with an additional string, using an initial hash key value.
            </summary>
            <param name="str">The string used to generate a hash key.</param>
            <param name="concat">The additional string to concatenate to the input string.</param>
            <param name="initialHash">The initial hash key value used to generate the result.</param>
            <returns>A hash key compatible with GTA 5.</returns>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Annotation.SidedConstructorAttribute">
            <summary>
            Marks the constructor to be used when activating type using <see cref="T:ApacheTech.Common.DependencyInjection.Abstractions.ActivatorUtilities" />.
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Annotation.SidedConstructorAttribute.Side">
            <summary>
                The app-side that this instance was instantiated on.
            </summary>
            <value>The side.</value>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Annotation.SidedConstructorAttribute.#ctor">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Core.DependencyInjection.Annotation.SidedConstructorAttribute"/> class.
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Annotation.SidedConstructorAttribute.#ctor(Vintagestory.API.Common.EnumAppSide)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Core.DependencyInjection.Annotation.SidedConstructorAttribute"/> class.
            </summary>
            <param name="side">The side.</param>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.BrighterOptions">
            <summary>
                Provides options for the BrighterSlim command processor.
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.BrighterOptions.CommandProcessorLifetime">
            <summary>
                Configures the lifetime of the Command Processor. Defaults to Transient.
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.BrighterOptions.FeatureSwitchRegistry">
            <summary>
                Do we support feature switching? In which case please supply an initialized feature switch registry
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.BrighterOptions.HandlerLifetime">
            <summary>
                Configures the lifetime of the Handlers. Defaults to Transient.
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.BrighterOptions.MapperLifetime">
            <summary>
                Configures the lifetime of mappers. Defaults to Singleton
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.BrighterOptions.PolicyRegistry">
            <summary>
                Configures the polly policy registry.
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.BrighterOptions.RequestContextFactory">
            <summary>
                Configures the request context factory. Defaults to <see cref="T:ApacheTech.Common.BrighterSlim.InMemoryRequestContextFactory" />.
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.BrighterOptions.TransformerLifetime">
            <summary>
                Configures the lifetime of any transformers. Defaults to Singleton
            </summary>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.IBrighterBuilder">
            <summary>
                Constructs Brighter message mappers and handlers
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.IBrighterBuilder.AutoFromAssemblies(System.Reflection.Assembly[])">
            <summary>
                Scan the assemblies provided for implementations of IHandleRequests, IHandleRequestsAsync, IAmAMessageMapper and register them with ServiceCollection.
            </summary>
            <param name="assemblies">The assemblies to scan</param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.IBrighterBuilder.AsyncHandlers(System.Action{ApacheTech.Common.BrighterSlim.IAmAnAsyncSubcriberRegistry})">
            <summary>
                Scan the assemblies provided for implementations of IHandleRequestsAsync and register them with ServiceCollection.
            </summary>
            <param name="registerHandlers">A callback to register handlers</param>
            <returns>This builder, allows chaining calls</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.IBrighterBuilder.AsyncHandlersFromAssemblies(System.Reflection.Assembly[])">
            <summary>
                Scan the assemblies provided for implementations of IHandleRequests and register them with ServiceCollection.
            </summary>
            <param name="assemblies">The assemblies to scan</param>
            <returns>This builder, allows chaining calls</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.IBrighterBuilder.Handlers(System.Action{ApacheTech.Common.BrighterSlim.IAmASubscriberRegistry})">
            <summary>
                Register handlers with the built-in subscriber registry
            </summary>
            <param name="registerHandlers">A callback to register handlers</param>
            <returns>This builder, allows chaining calls</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.IBrighterBuilder.HandlersFromAssemblies(System.Reflection.Assembly[])">
            <summary>
                Scan the assemblies provided for implementations of IHandleRequests and register them with ServiceCollection.
            </summary>
            <param name="assemblies">The assemblies to scan</param>
            <returns>This builder, allows chaining calls</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.IBrighterBuilder.MapperRegistry(System.Action{Gantry.Core.DependencyInjection.Brighter.ServiceCollectionMessageMapperRegistry})">
            <summary>
                Register message mappers.
            </summary>
            <param name="registerMappers">A callback to register mappers</param>
            <returns>This builder, allows chaining calls</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.IBrighterBuilder.MapperRegistryFromAssemblies(System.Reflection.Assembly[])">
            <summary>
                Scan the assemblies provided for implementations of IAmAMessageMapper and register them with ServiceCollection.
            </summary>
            <param name="assemblies">The assemblies to scan</param>
            <returns>This builder, allows chaining calls</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.IBrighterBuilder.TransformsFromAssemblies(System.Reflection.Assembly[])">
            <summary>
                Scan the assemblies for implementations of IAmAMessageTransformAsync and register them with ServiceCollection.
            </summary>
            <param name="assemblies">The assemblies to scan</param>
            <returns>This builder, allows chaining calls</returns>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.IBrighterBuilder.PolicyRegistry">
            <summary>
                The policy registry to use for the command processor and the event bus
                It needs to be here as we need to pass it between AddBrighter and UseExternalBus.
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.IBrighterBuilder.Services">
            <summary>
                The IoC container to populate.
            </summary>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.IBrighterOptions">
            <summary>
                Provides options for the BrighterSlim command processor.
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.IBrighterOptions.CommandProcessorLifetime">
            <summary>
                Configures the lifetime of the Command Processor.
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.IBrighterOptions.FeatureSwitchRegistry">
            <summary>
                Do we support feature switching? In which case please supply an initialized feature switch registry
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.IBrighterOptions.HandlerLifetime">
            <summary>
                Configures the lifetime of the Handlers.
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.IBrighterOptions.MapperLifetime">
            <summary>
                Configures the lifetime of mappers. 
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.IBrighterOptions.PolicyRegistry">
            <summary>
                Configures the polly policy registry.
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.IBrighterOptions.RequestContextFactory">
            <summary>
                Configures the request context factory. Defaults to <see cref="T:ApacheTech.Common.BrighterSlim.InMemoryRequestContextFactory" />.
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.IBrighterOptions.TransformerLifetime">
            <summary>
                Configures the lifetime of any transformers.
            </summary>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.ITransformerRegistry">
            <summary>
                The Transformer Registry is used to help us register with the Service Collection when using Brighter .NET Core Support
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ITransformerRegistry.Add(System.Type)">
            <summary>
                Register a transform with the IServiceCollection using the ServiceLifetime
            </summary>
            <param name="transform">The type of the transform to register</param>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.IUseRpc">
            <summary>
                Flags support is required for RPC over messaging
                For RPC a command object needs to return a value on a private queue
                This approach blocks waiting for a response
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.IUseRpc.RPC">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:Gantry.Core.DependencyInjection.Brighter.IUseRpc"/> is RPC.
            </summary>
            <value><c>true</c> if RPC; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.IUseRpc.ReplyQueueSubscriptions">
            <summary>
                Gets or sets the reply queue subscriptions.
            </summary>
            <value>The reply queue subscriptions.</value>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionBrighterBuilder">
            <summary>
                Constructs Brighter message mappers and handlers
            </summary>
            <seealso cref="T:Gantry.Core.DependencyInjection.Brighter.IBrighterBuilder" />
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionBrighterBuilder.PolicyRegistry">
            <summary>
                The policy registry to use for the command processor and the event bus
                It needs to be here as we need to pass it between AddBrighter and UseExternalBus.
            </summary>
            <value>The policy registry.</value>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionBrighterBuilder.#ctor(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,Gantry.Core.DependencyInjection.Brighter.ServiceCollectionSubscriberRegistry,Gantry.Core.DependencyInjection.Brighter.ServiceCollectionMessageMapperRegistry,Gantry.Core.DependencyInjection.Brighter.ServiceCollectionTransformerRegistry,Polly.Registry.IPolicyRegistry{System.String})">
            <summary>
            Registers the components of Brighter pipelines
            </summary>
            <param name="services">The IoC container to update</param>
            <param name="serviceCollectionSubscriberRegistry">The register for looking up message handlers</param>
            <param name="mapperRegistry">The register for looking up message mappers</param>
            <param name="transformerRegistry">The register for transforms</param>
            <param name="policyRegistry">The list of policies that we require</param>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionBrighterBuilder.Services">
            <summary>
                The IoC container we are populating
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionBrighterBuilder.AsyncHandlers(System.Action{ApacheTech.Common.BrighterSlim.IAmAnAsyncSubcriberRegistry})">
            <summary>
                Scan the assemblies provided for implementations of IHandleRequestsAsync and register them with ServiceCollection
            </summary>
            <param name="registerHandlers">A callback to register handlers</param>
            <returns>This builder, allows chaining calls</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionBrighterBuilder.AsyncHandlersFromAssemblies(System.Reflection.Assembly[])">
            <summary>
                Scan the assemblies provided for implementations of IHandleRequests and register them with ServiceCollection 
            </summary>
            <param name="assemblies">The assemblies to scan</param>
            <returns>This builder, allows chaining calls</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionBrighterBuilder.AutoFromAssemblies(System.Reflection.Assembly[])">
            <summary>
                Scan the assemblies provided for implementations of IHandleRequests, IHandleRequestsAsync, IAmAMessageMapper and register them with ServiceCollection
            </summary>
            <param name="extraAssemblies">The assemblies to scan</param>
            <returns></returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionBrighterBuilder.MapperRegistry(System.Action{Gantry.Core.DependencyInjection.Brighter.ServiceCollectionMessageMapperRegistry})">
            <summary>
                Register message mappers
            </summary>
            <param name="registerMappers">A callback to register mappers</param>
            <returns></returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionBrighterBuilder.MapperRegistryFromAssemblies(System.Reflection.Assembly[])">
            <summary>
                Scan the assemblies provided for implementations of IAmAMessageMapper and register them with ServiceCollection
            </summary>
            <param name="assemblies">The assemblies to scan</param>
            <returns>This builder, allows chaining calls</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionBrighterBuilder.Handlers(System.Action{ApacheTech.Common.BrighterSlim.IAmASubscriberRegistry})">
            <summary>
                Register handlers with the built-in subscriber registry
            </summary>
            <param name="registerHandlers">A callback to register handlers</param>
            <returns>This builder, allows chaining calls</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionBrighterBuilder.HandlersFromAssemblies(System.Reflection.Assembly[])">
            <summary>
                Scan the assemblies provided for implementations of IHandleRequests and register them with ServiceCollection
            </summary>
            <param name="assemblies">The assemblies to scan</param>
            <returns>This builder, allows chaining calls</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionBrighterBuilder.TransformsFromAssemblies(System.Reflection.Assembly[])">
            <summary>
                Scan the assemblies for implementations of IAmAMessageTransformAsync and register them with the ServiceCollection
            </summary>
            <param name="assemblies">The assemblies to scan</param>
            <returns>This builder, allows chaining calls</returns>
            <exception cref="T:System.ArgumentException">Thrown if there are no assemblies passed to the method</exception>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionExtensions">
            <summary>
                Service Collection Extensions.
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionExtensions.AddBrighter(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,System.Action{Gantry.Core.DependencyInjection.Brighter.BrighterOptions})">
            <summary>
            Will add Brighter into the .NET IoC Container - ServiceCollection
            Registers the following with the service collection :-
             - BrighterOptions - how should we configure Brighter
             - Feature Switch Registry - optional if features switch support is desired
             - Inbox - defaults to InMemoryInbox if none supplied 
             - SubscriberRegistry - what handlers subscribe to what requests
             - MapperRegistry - what mappers translate what messages
            </summary>
            <param name="services">The collection of services that we want to add registrations to</param>
            <param name="configure">A callback that defines what options to set when Brighter is built</param>
            <returns>A builder that can be used to populate the IoC container with handlers and mappers by inspection
            - used by built in factory from CommandProcessor</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if we have no IoC provided ServiceCollection</exception>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionExtensions.BrighterHandlerBuilder(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,Gantry.Core.DependencyInjection.Brighter.BrighterOptions)">
            <summary>
            Registers the following with the service collection :-
             - BrighterOptions - how should we configure Brighter
             - Feature Switch Registry - optional if features switch support is desired
             - Inbox - defaults to InMemoryInbox if none supplied 
             - SubscriberRegistry - what handlers subscribe to what requests
             - MapperRegistry - what mappers translate what messages
            </summary>
            <param name="services">The collection of services that we want to add registrations to</param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionExtensions.UseExternalBus(Gantry.Core.DependencyInjection.Brighter.IBrighterBuilder,System.Action{ApacheTech.Common.BrighterSlim.ExternalBusConfiguration},ApacheTech.Common.DependencyInjection.Abstractions.ServiceLifetime)">
            <summary>
            An external bus is the use of Message Oriented Middleware (MoM) to dispatch a message between a producer
            and a consumer. The assumption is that this  is being used for inter-process communication, for example the
            work queue pattern for distributing work, or between micro-services
            Registers singletons with the service collection :-
            - An Event Bus - used to send message externally and contains:
                -- Producer Registry - A list of producers we can send middleware messages with 
                -- Outbox - stores messages so that they can be written in the same transaction as entity writes
                -- Outbox Transaction Provider - used to provide a transaction that spans the Outbox write and
                    your updates to your entities
                -- RelationalDb Connection Provider - if your transaction provider is for a relational db we register this
                    interface to access your Db and make it available to your own classes
                -- Transaction Connection Provider  - if your transaction provider is also a relational db connection
                    provider it will implement this interface which inherits from both
                -- External Bus Configuration - the configuration parameters for an external bus, mainly used internally
                -- UseRpc - do we want to use RPC i.e. a command blocks waiting for a response, over middleware.
            </summary>
            <param name="brighterBuilder">The Brighter builder to add this option to</param>
            <param name="configure">A callback that allows you to configure <see cref="T:ApacheTech.Common.BrighterSlim.ExternalBusConfiguration"/> options</param>
            <param name="serviceLifetime">The lifetime of the transaction provider</param>
            <returns>The Brighter builder to allow chaining of requests</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionExtensions.ConfigureJsonSerialisation(Gantry.Core.DependencyInjection.Brighter.IBrighterBuilder,System.Action{System.Text.Json.JsonSerializerOptions})">
            <summary>
                Configure the JSON Serialiser that is used inside Brighter
            </summary>
            <param name="brighterBuilder">The Brighter Builder</param>
            <param name="configure">Action to configure the options</param>
            <returns>Brighter Builder</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionExtensions.MessageMapperRegistry(System.IServiceProvider)">
            <summary>
            Registers message mappers with the registry. Normally you don't need to call this, it is called by the builder for Brighter or the Service Activator
            Visibility is required for use from both
            </summary>
            <param name="provider">The IoC container to request the message mapper registry from</param>
            <returns>The message mapper registry, populated with any message mappers from the ioC container</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionExtensions.TransformFactory(System.IServiceProvider)">
            <summary>
            Creates transforms. Normally you don't need to call this, it is called by the builder for Brighter or
            the Service Activator
            Visibility is required for use from both
            </summary>
            <param name="provider">The IoC container to build the transform factory over</param>
            <returns></returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionExtensions.TransformFactoryAsync(System.IServiceProvider)">
            <summary>
            Creates transforms. Normally you don't need to call this, it is called by the builder for Brighter or
            the Service Activator
            Visibility is required for use from both
            </summary>
            <param name="provider">The IoC container to build the transform factory over</param>
            <returns></returns>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionMessageMapperRegistry">
            <summary>
            When parsing for message mappers in assemblies, stores any found message mappers. A later step will add these to the message mapper registry
            Not used directly
            </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionMessageMapperRegistry.Mappers">
            <summary>
                Gets the mappers.
            </summary>
            <value>The mappers.</value>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionMessageMapperRegistry.AsyncMappers">
            <summary>
                Gets the asynchronous mappers.
            </summary>
            <value>The asynchronous mappers.</value>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionMessageMapperRegistry.#ctor(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,ApacheTech.Common.DependencyInjection.Abstractions.ServiceLifetime)">
            <summary>
             	Initialises a new instance of the <see cref="T:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionMessageMapperRegistry"/> class.
            </summary>
            <param name="serviceCollection">The service collection.</param>
            <param name="lifetime">The lifetime.</param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionMessageMapperRegistry.Register``2">
            <summary>
            Register a mapper with the collection (generic version)
            </summary>
            <typeparam name="TRequest">The type of the request to map</typeparam>
            <typeparam name="TMessageMapper">The type of the mapper</typeparam>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionMessageMapperRegistry.RegisterAsync``2">
            <summary>
            Register a mapper with the collection (generic version)
            </summary>
            <typeparam name="TRequest">The type of the request to map</typeparam>
            <typeparam name="TMessageMapper">The type of the mapper</typeparam>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionMessageMapperRegistry.Add(System.Type,System.Type)">
            <summary>
            Add a mapper to the collection
            </summary>
            <param name="message">The type of message to map</param>
            <param name="mapper">The type of the mapper</param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionMessageMapperRegistry.AddAsync(System.Type,System.Type)">
            <summary>
            Add a mapper to the collection
            </summary>
            <param name="message">The type of message to map</param>
            <param name="mapper">The type of the mapper</param>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionSubscriberRegistry">
            <summary>
            .NET IoC backed Subscriber registry, used to find matching handlers
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionSubscriberRegistry.#ctor(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,ApacheTech.Common.DependencyInjection.Abstractions.ServiceLifetime)">
            <summary>
            Constructs an instance of the subscriber registry
            We set the lifetime for registered handlers here. We default to transient i.e. the handler will be destroyed after usage
            In contexts using a Scope, for example ASP.NET with EF Core, this will need to be Scoped to allow participation in Request-Reply scoped
            transactions etc.
            </summary>
            <param name="services">The IoC container to register with</param>
            <param name="lifetime">The lifetime of a handler - defaults to transient</param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionSubscriberRegistry.Get``1">
            <summary>
            Get the matching set of handlers for a request type
            </summary>
            <typeparam name="T">The type of request</typeparam>
            <returns>An iterator over a set of registered handlers for that type</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionSubscriberRegistry.Register``2">
            <summary>
            Register a handler type for a request type
            Registers with IoC container :-
             - the handler type (TImplementation); allows factory instantiation of request handler
            </summary>
            <typeparam name="TRequest">The handler</typeparam>
            <typeparam name="TImplementation">The type of the handler for this request type</typeparam>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionSubscriberRegistry.RegisterAsync``2">
            <summary>
            Register a handler type for a request type
            Registers with IoC container :-
             - the handler type (TImplementation); allows factory instantiation of request handler
            </summary>
            <typeparam name="TRequest">The handler</typeparam>
            <typeparam name="TImplementation">The type of the handler for this request type</typeparam>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionSubscriberRegistry.Add(System.Type,System.Type)">
            <summary>
            Register a handler type for a request type
            Registers with IoC container :-
             - the handler type (TImplementation); allows factory instantiation of request handler
            </summary>
            <param name="requestType">The handler</param>
            <param name="handlerType">The type of the handler for this request type</param>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionTransformerRegistry">
            <summary>
                This class helps us register transformers with the IoC container
                We don't have a separate registry for transformers, but we do need to understand
                the service lifetime options for the transformers which we want to register
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionTransformerRegistry.#ctor(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,ApacheTech.Common.DependencyInjection.Abstractions.ServiceLifetime)">
            <summary>
                Constructs a new instance
            </summary>
            <param name="services">The Service Collection to register the transforms with</param>
            <param name="serviceLifetime">The lifetime to use for registration. Defaults to Singleton</param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceCollectionTransformerRegistry.Add(System.Type)">
            <summary>
                Register a transform with the IServiceCollection using the ServiceLifetime
            </summary>
            <param name="transform">The type of the transform to register</param>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.ServiceProviderHandlerFactory">
            <summary>
                A factory for handlers using the .NET IoC container for implementation details
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceProviderHandlerFactory.#ctor(System.IServiceProvider)">
            <summary>
            Constructs a factory that uses the .NET IoC container as the factory
            </summary>
            <param name="serviceProvider">The .NET IoC container</param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceProviderHandlerFactory.ApacheTech#Common#BrighterSlim#IAmAHandlerFactorySync#Create(System.Type)">
            <summary>
            Creates an instance of the request handler
            Lifetime is set during registration
            </summary>
            <param name="handlerType">The type of handler to request</param>
            <returns>An instantiated request handler</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceProviderHandlerFactory.ApacheTech#Common#BrighterSlim#IAmAHandlerFactoryAsync#Create(System.Type)">
            <summary>
            Creates an instance of the request handler
            Lifetime is set during registration
            </summary>
            <param name="handlerType">The type of handler to request</param>
            <returns>An instantiated request handler</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceProviderHandlerFactory.Release(ApacheTech.Common.BrighterSlim.IHandleRequests)">
            <summary>
            Release the request handler - actual behavior depends on lifetime, we only dispose if we are transient
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceProviderHandlerFactory.Release(ApacheTech.Common.BrighterSlim.IHandleRequestsAsync)">
            <summary>
                Releases the specified async handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.ServiceProviderMapperFactory">
            <summary>
                Creates a message mapper from the underlying .NET IoC container
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceProviderMapperFactory.#ctor(System.IServiceProvider)">
            <summary>
                Constructs a mapper factory that uses the .NET Service Provider for implementation details
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceProviderMapperFactory.Create(System.Type)">
            <summary>
                Create an instance of the message mapper type from the .NET IoC container
                Note that there is no release as we assume that Mappers are never IDisposable
            </summary>
            <param name="messageMapperType">The type of mapper to instantiate</param>
            <returns></returns>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.ServiceProviderMapperFactoryAsync">
            <summary>
            Creates a message mapper from the underlying .NET IoC container
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceProviderMapperFactoryAsync.#ctor(System.IServiceProvider)">
            <summary>
            Constructs a mapper factory that uses the .NET Service Provider for implementation details
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceProviderMapperFactoryAsync.Create(System.Type)">
            <summary>
            Create an instance of the message mapper type from the .NET IoC container
            Note that there is no release as we assume that Mappers are never IDisposable
            </summary>
            <param name="messageMapperType">The type of mapper to instantiate</param>
            <returns></returns>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.ServiceProviderTransformerFactory">
            <summary>
            A factory for creating transformers, backed by the .NET Service Collection
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceProviderTransformerFactory.#ctor(System.IServiceProvider)">
            <summary>
            Constructs a transformer factory
            </summary>
            <param name="serviceProvider">The IoC container we use to satisfy requests for transforms</param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceProviderTransformerFactory.Create(System.Type)">
            <summary>
            Creates a specific transformer on demand
            </summary>
            <param name="transformerType">The type of transformer to create</param>
            <returns></returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceProviderTransformerFactory.Release(ApacheTech.Common.BrighterSlim.IAmAMessageTransform)">
            <summary>
            If the transform was scoped as transient, we release it when the pipeline is finished
            </summary>
            <param name="transformer"></param>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.ServiceProviderTransformerFactoryAsync">
            <summary>
            A factory for creating transformers, backed by the .NET Service Collection
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceProviderTransformerFactoryAsync.#ctor(System.IServiceProvider)">
            <summary>
            Constructs a transformer factory
            </summary>
            <param name="serviceProvider">The IoC container we use to satisfy requests for transforms</param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceProviderTransformerFactoryAsync.Create(System.Type)">
            <summary>
            Creates a specific transformer on demand
            </summary>
            <param name="transformerType">The type of transformer to create</param>
            <returns></returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.ServiceProviderTransformerFactoryAsync.Release(ApacheTech.Common.BrighterSlim.IAmAMessageTransformAsync)">
            <summary>
            If the transform was scoped as transient, we release it when the pipeline is finished
            </summary>
            <param name="transformer"></param>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Brighter.UseRpc">
            <summary>
            Options around use of RPC over messaging i.e. command and document response
            Requires blocking for a response on a queue identified by producer to consumer
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Brighter.UseRpc.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{ApacheTech.Common.BrighterSlim.Subscription})">
            <summary>
             	Initialises a new instance of the <see cref="T:Gantry.Core.DependencyInjection.Brighter.UseRpc"/> class.
            </summary>
            <param name="useRpc">if set to <c>true</c> [use RPC].</param>
            <param name="replyQueueSubscriptions">The reply queue subscriptions.</param>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.UseRpc.RPC">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:Gantry.Core.DependencyInjection.Brighter.IUseRpc" /> is RPC.
            </summary>
            <value><c>true</c> if RPC; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Brighter.UseRpc.ReplyQueueSubscriptions">
            <summary>
                Gets or sets the reply queue subscriptions.
            </summary>
            <value>The reply queue subscriptions.</value>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Extensions.ActivatorEx">
            <summary>
                Helper code for the various activator services.
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Extensions.ActivatorEx.CreateInstance(System.IServiceProvider,System.Type,System.Object[])">
            <summary>
                Creates an instance of a specified type.
            </summary>
            <param name="provider">The service provider used to resolve dependencies</param>
            <param name="instanceType">The type to activate</param>
            <param name="parameters">Constructor arguments not provided by the <paramref name="provider"/>.</param>
            <returns>An activated object of type instanceType</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Extensions.ActivatorEx.CreateInstance``1(System.Object[])">
            <summary>
                Creates an instance of a specified type.
            </summary>
            <typeparam name="T">The type of instance to create.</typeparam>
            <param name="args">The arguments to pass to the constructor.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Extensions.ActivatorEx.CreateFactory(System.Type,System.Type[])">
            <summary>
                Create a delegate that will instantiate a type with constructor arguments provided directly and/or from an instance of <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="instanceType">The type to activate</param>
            <param name="argumentTypes">
                The types of objects, in order, that will be passed to the returned function as its second parameter
            </param>
            <returns>
                A factory that will instantiate instanceType using an instance of <see cref="T:System.IServiceProvider"/>, and an argument array containing objects matching the types defined in argumentTypes
            </returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Extensions.ActivatorEx.CreateInstance``1(System.IServiceProvider,System.Object[])">
            <summary>
                Instantiate a type with constructor arguments provided directly and/or from an instance of <see cref="T:System.IServiceProvider"/>.
            </summary>
            <typeparam name="T">The type to activate</typeparam>
            <param name="provider">The service provider used to resolve dependencies</param>
            <param name="parameters">Constructor arguments not provided by the <paramref name="provider"/>.</param>
            <returns>An activated object of type T</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Extensions.ActivatorEx.GetServiceOrCreateInstance``1(System.IServiceProvider)">
            <summary>
                Retrieve an instance of the given type from the service provider. If one is not found then instantiate it directly.
            </summary>
            <typeparam name="T">The type of the service</typeparam>
            <param name="provider">The service provider used to resolve dependencies</param>
            <returns>The resolved service or created instance</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Extensions.ActivatorEx.GetServiceOrCreateInstance(System.IServiceProvider,System.Type)">
            <summary>
                Retrieve an instance of the given type from the service provider. If one is not found then instantiate it directly.
            </summary>
            <param name="provider">The service provider</param>
            <param name="type">The type of the service</param>
            <returns>The resolved service or created instance</returns>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Extensions.HostExtensions">
            <summary>
                Extension method that aid the registration and creation of services.
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Extensions.HostExtensions.IOCEnabled(System.Reflection.ConstructorInfo)">
            <summary>
                Determines whether a constructor is decorated with a <see cref="T:Gantry.Core.DependencyInjection.Annotation.SidedConstructorAttribute"/> attribute that matched the current app-side.
            </summary>
            <param name="constructor">The constructor to check.</param>
            <returns><c>true</c> if the dependencies for the constructor should be resolved via the service provider, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Extensions.HostExtensions.CreateSidedInstance(System.IServiceProvider,System.Type,System.Object[])">
            <summary>
                Creates an object of a specified type, using the IOC Container to resolve dependencies.
            </summary>
            <param name="provider">The service provider to use to resolve dependencies for the instantiated class.</param>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <param name="args">An optional list of arguments, sent the constructor of the instantiated class.</param>
            <returns>A service object of type <paramref name="serviceType" />.
            
            -or-
            
            <see langword="null" /> if no object of type <paramref name="serviceType" /> can be instantiated from the service collection.</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Extensions.HostExtensions.CreateSidedInstance``1(System.IServiceProvider,System.Object[])">
            <summary>
                Creates an object of a specified type, using the IOC Container to resolve dependencies.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="provider">The service provider to use to resolve dependencies for the instantiated class.</param>
            <param name="args">An optional list of arguments, sent the constructor of the instantiated class.</param>
            <returns>An object of type <typeparamref name="T" />.
            
            -or-
            
            <see langword="null" /> if there is no object of type <typeparamref name="T" /> can be instantiated from the service collection.</returns>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Extensions.HostExtensions.AddModSystems(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,Vintagestory.API.Common.EnumAppSide)">
            <summary>
                Registers all <see cref="T:Vintagestory.API.Common.ModSystem"/>s in the current mod, into the service collection.
            </summary>
            <param name="services">The service collection to add the <see cref="T:Vintagestory.API.Common.ModSystem"/>s to.</param>
            <param name="side">The app side to load systems from.</param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Extensions.HostExtensions.AddModSystem``1(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection)">
            <summary>
                Registers a client side features into the service collection.
            </summary>
            <param name="services">The service collection to add the features to.</param>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Filters.SideAttribute">
            <summary>
                Ensures that a command will only be processed if it is running on the specified app side.
            </summary>
            <seealso cref="T:ApacheTech.Common.BrighterSlim.RequestHandlerAttribute" />
        </member>
        <member name="P:Gantry.Core.DependencyInjection.Filters.SideAttribute.Side">
            <summary>
                Gets the side that this command should work on.
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Filters.SideAttribute.#ctor(Vintagestory.API.Common.EnumAppSide)">
            <summary>
             	Initialises a new instance of the <see cref="T:Gantry.Core.DependencyInjection.Filters.SideAttribute"/> class.
            </summary>
            <param name="side">The app side that this command should work on.</param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Filters.SideAttribute.GetHandlerType">
            <inheritdoc />
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Filters.SideAttribute.InitializerParams">
            <inheritdoc />
        </member>
        <member name="T:Gantry.Core.DependencyInjection.IOC">
             <summary>
                 Globally accessible services, populated through the IOC Container. If a derived
                 instance of type <see cref="T:Gantry.Core.DependencyInjection.ModHost"/> has not been created within the
                 Application layer, these services will not be available, and will have to be
                 instantiated manually.<br/><br/>
            
                 Globally static objects like this are required because no <see cref="T:Vintagestory.API.Common.ModSystem"/>
                 can make use of dependency injection directly, because they are instantiated by
                 the game. Instead of using traditional singleton instances, where we'd need to
                 add boilerplate every time it's needed, we can cache the instances here, and then
                 used them anywhere they are needed, in lieu of being able to pass it in through
                 an importing constructor.
             </summary>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.IOC.ServerIOC">
            <summary>
                Gets the IOC Resolver for the Server.
            </summary>
            <value>The IOC Resolver for the Server.</value>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.IOC.ClientIOC">
            <summary>
                Gets the IOC Resolver for the Client.
            </summary>
            <value>The IOC Resolver for the Client.</value>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.IOC.Services">
            <summary>
                Gets the IOC Resolver for the current app-side.
            </summary>
            <value>The IOC Resolver for the current app-side.</value>
        </member>
        <member name="P:Gantry.Core.DependencyInjection.IOC.Brighter">
            <summary>
                Universal access to the Brighter command processor.
            </summary>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.ModHost">
            <summary>
                Only one derived instance of this base-class should be added to any single mod within
                the VintageMods domain. This base-class will enable Dependency Injection, and add all
                the domain services. Derived instances should only have minimal functionality, 
                instantiating, and adding Application specific services to the IOC Container.
            </summary>
            <seealso cref="T:Vintagestory.API.Common.ModSystem" />
        </member>
        <member name="M:Gantry.Core.DependencyInjection.ModHost.#ctor">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.DependencyInjection.ModHost" /> class.
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.ModHost.ConfigureUniversalModServices(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,Vintagestory.API.Common.ICoreAPI)">
            <summary>
                Configures any services that need to be added to the IO Container, on the both app sides, equally.
            </summary>
            <param name="services">The as-of-yet un-built services container.</param>
            <param name="api">Access to the universal API.</param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.ModHost.ConfigureServerModServices(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,Vintagestory.API.Server.ICoreServerAPI)">
            <summary>
                Configures any services that need to be added to the IO Container, on the server side.
            </summary>
            <param name="services">The as-of-yet un-built services container.</param>
            <param name="sapi">Access to the server-side API.</param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.ModHost.ConfigureClientModServices(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
                Configures any services that need to be added to the IO Container, on the client side.
            </summary>
            <param name="services">The as-of-yet un-built services container.</param>
            <param name="capi">Access to the client-side API.</param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.ModHost.StartPreUniversal(Vintagestory.API.Common.ICoreAPI)">
            <summary>
                Called during initial mod loading, called before any mod receives the call to Start().
            </summary>
            <param name="api">
                Common API Components that are available on the server and the client.
                Cast to ICoreServerAPI or ICoreClientAPI to access side specific features.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.ModHost.Start(Vintagestory.API.Common.ICoreAPI)">
            <summary>
                Side agnostic Start method, called after all mods received a call to StartPre().
            </summary>
            <param name="api">
                Common API Components that are available on the server and the client.
                Cast to ICoreServerAPI or ICoreClientAPI to access side specific features.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.ModHost.StartPreUniversalSide(Vintagestory.API.Common.ICoreAPI)">
            <summary>
                Called during initial mod loading, called before any mod receives the call to Start().
            </summary>
            <param name="api">
                Common API Components that are available on the server and the client.
                Cast to ICoreServerAPI or ICoreClientAPI to access side specific features.
            </param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.ModHost.StartUniversal(Vintagestory.API.Common.ICoreAPI)">
            <summary>
                Side agnostic Start method, called after all mods received a call to StartPre().
            </summary>
            <param name="api">
                Common API Components that are available on the server and the client.
                Cast to ICoreServerAPI or ICoreClientAPI to access side specific features.
            </param>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.ModHost.ExecuteOrder">
            <summary>
                If you need mods to be executed in a certain order, adjust this method's return value.
                The server will call each Mods Start() method the ascending order of each mod's execute order value.
                And thus, as long as every mod registers it's event handlers in the Start() method, all event handlers
                will be called in the same execution order. Default execute order of some survival mod parts.
            
                World Gen: 
                - GenTerra: 0
                - RockStrata: 0.1
                - Deposits: 0.2
                - Caves: 0.3
                - BlockLayers: 0.4
            
                Asset Loading:
                - Json Overrides loader: 0.05
                - Load hardcoded mantle block: 0.1
                - Block and Item Loader: 0.2
                - Recipes (Smithing, Knapping, ClayForming, Grid recipes, Alloys) Loader: 1
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.ModHost.Dispose">
            <summary>
                If this mod allows runtime reloading, you must implement this method to unregister any listeners / handlers
            </summary>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Registration.Api.ClientApiRegistrar">
            <summary>
                Handles registration of the Game's API within the client-side IOC Container.
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Registration.Api.ClientApiRegistrar.RegisterClientApiEndpoints(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
                Registers the Game's API within the client-side IOC Container.
            </summary>
            <param name="services">The IOC container.</param>
            <param name="capi">Access to the client-side API.</param>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Registration.Api.ServerApiRegistrar">
            <summary>
                Handles registration of the Game's API within the server-side IOC Container.
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Registration.Api.ServerApiRegistrar.RegisterServerApiEndpoints(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,Vintagestory.API.Server.ICoreServerAPI)">
            <summary>
                Registers the Game's API within the server-side IOC Container.
            </summary>
            <param name="services">The IOC container.</param>
            <param name="sapi">The Server-Side API to register.</param>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Registration.IClientServiceRegistrar">
            <summary>
                Represents a class that can add services to the Client IOC container. Implements <see cref="T:System.IDisposable" />.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Registration.IClientServiceRegistrar.ConfigureClientModServices(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
                Allows a mod to include Singleton, or Transient services to the IOC Container.
            </summary>
            <param name="services">The service collection.</param>
            <param name="capi">Access to the client-side API.</param>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Registration.IServerServiceRegistrar">
            <summary>
                Represents a class that can add services to the Client IOC container.
            </summary>
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Registration.IServerServiceRegistrar.ConfigureServerModServices(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,Vintagestory.API.Server.ICoreServerAPI)">
            <summary>
                Allows a mod to include Singleton, or Transient services to the IOC Container.
            </summary>
            <param name="services">The service collection.</param>
            <param name="sapi">Access to the server-side API.</param>
        </member>
        <member name="T:Gantry.Core.DependencyInjection.Registration.IUniversalServiceRegistrar">
            <summary>
                Represents a class that can add services to both the Client, and Server IOC containers.
            </summary>
            <seealso cref="T:Gantry.Core.DependencyInjection.Registration.IServerServiceRegistrar" />
            <seealso cref="T:Gantry.Core.DependencyInjection.Registration.IClientServiceRegistrar" />
        </member>
        <member name="M:Gantry.Core.DependencyInjection.Registration.IUniversalServiceRegistrar.ConfigureUniversalModServices(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,Vintagestory.API.Common.ICoreAPI)">
            <summary>
                Allows a mod to include Singleton, or Transient services to the IOC Container.
            </summary>
            <param name="services">The service collection.</param>
            <param name="api">Access to the universal API.</param>
        </member>
        <member name="T:Gantry.Core.Diagnostics.Ensure">
            <summary>
                Helper methods to ensure specific criteria.
            </summary>
        </member>
        <member name="M:Gantry.Core.Diagnostics.Ensure.PopulatedWith``1(``0,``0)">
            <summary>
                Ensures that a member is populated with a specific value. If the hash code is different to the current value, the value is changed.
            </summary>
            <typeparam name="T">The type of value to work with.</typeparam>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <returns></returns>
        </member>
        <member name="T:Gantry.Core.Diagnostics.GantryException">
            <summary>
                Represents errors that occur within the Gantry MDK Framework.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Gantry.Core.Diagnostics.GantryException.#ctor">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Diagnostics.GantryException"/> class.
            </summary>
        </member>
        <member name="M:Gantry.Core.Diagnostics.GantryException.#ctor(System.String)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Diagnostics.GantryException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Gantry.Core.Diagnostics.GantryException.#ctor(System.String,System.Exception)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Diagnostics.GantryException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Gantry.Core.Diagnostics.GantryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Diagnostics.GantryException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Gantry.Core.Diagnostics.Guard">
            <summary>
                Guard clauses to streamline error checking of input parameters.
            </summary>
        </member>
        <member name="M:Gantry.Core.Diagnostics.Guard.AgainstNull(System.String,System.Object)">
            <summary>
                Throws an <see cref="T:System.ArgumentNullException"/> if the specified <see cref="T:System.Object"/> is <see langword="null"/>.
            </summary>
            <param name="argumentName">The name of the object to check.</param>
            <param name="value">The object to check.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Gantry.Core.Diagnostics.Guard.TypeHasDefaultConstructor(System.Type,System.String)">
            <summary>
                Throws an <see cref="T:System.ArgumentException"/> if the specified <see cref="T:System.Type"/> does not have a default constructor.
            </summary>
            <param name="type">The type.</param>
            <param name="argumentName">The name of the object to check.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Gantry.Core.Diagnostics.Guard.AgainstNullAndEmpty(System.String,System.String)">
            <summary>
                Throws an <see cref="T:System.ArgumentNullException"/> if the specified <see cref="T:System.String"/> is <see langword="null"/> or empty.
            </summary>
            <param name="argumentName">The name of the object to check.</param>
            <param name="value">The object to check.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Gantry.Core.Diagnostics.Guard.AgainstNullAndEmpty(System.String,System.Collections.ICollection)">
            <summary>
                Throws an <see cref="T:System.ArgumentNullException"/> if the specified <see cref="T:System.Collections.ICollection"/> is <see langword="null"/>.
                Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <see cref="T:System.Collections.ICollection"/> is empty.
            </summary>
            <param name="argumentName">The name of the object to check.</param>
            <param name="value">The object to check.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Gantry.Core.Diagnostics.Guard.AgainstNegativeAndZero(System.String,System.Int32)">
            <summary>
                Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <see cref="T:System.Int32"/> value is less than or equal to zero.
            </summary>
            <param name="argumentName">The name of the object to check.</param>
            <param name="value">The object to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Gantry.Core.Diagnostics.Guard.AgainstNegative(System.String,System.Int32)">
            <summary>
                Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <see cref="T:System.Int32"/> value is less than zero.
            </summary>
            <param name="argumentName">The name of the object to check.</param>
            <param name="value">The object to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Gantry.Core.Diagnostics.Guard.AgainstNegativeAndZero(System.String,System.TimeSpan)">
            <summary>
                Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <see cref="T:System.TimeSpan"/> is less than or equal to zero.
            </summary>
            <param name="argumentName">The name of the object to check.</param>
            <param name="value">The object to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Gantry.Core.Diagnostics.Guard.AgainstNegative(System.String,System.TimeSpan)">
            <summary>
                Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <see cref="T:System.TimeSpan"/> is less than zero.
            </summary>
            <param name="argumentName">The name of the object to check.</param>
            <param name="value">The object to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Gantry.Core.Extensions.Api.ApiExtensions">
            <summary>
                Extension methods for converting apis to concrete implementations.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.AsClientMain(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
                Returns the <see cref="T:Vintagestory.Client.NoObf.ClientMain"/> from the current <see cref="T:Vintagestory.API.Client.ICoreClientAPI"/> instance.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.AsApi(Vintagestory.Client.NoObf.ClientMain)">
            <summary>
                Returns the <see cref="T:Vintagestory.API.Client.ICoreClientAPI"/> from the current <see cref="T:Vintagestory.Client.NoObf.ClientMain"/> instance.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.ClientWindowSize(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
                Returns the dimensions of the physical viewport the game is currently running on.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.UnregisterInternalClientSystem``1(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
                Unregisters an internal client system from the game engine.
            </summary>
            <typeparam name="T">The type of <see cref="T:Vintagestory.Client.NoObf.ClientSystem"/> to unregister.</typeparam>
            <param name="capi">Core Client API.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.UnregisterInternalClientSystem(Vintagestory.API.Client.ICoreClientAPI,System.String)">
            <summary>
                Unregisters an internal client system from the game engine.
            </summary>
            <param name="capi">Core Client API.</param>
            <param name="name">The friendly name of the system to unregister.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.GetInternalClientSystem(Vintagestory.API.Client.ICoreClientAPI,System.String)">
            <summary>
                Returns a specific <see cref="T:Vintagestory.Client.NoObf.ClientSystem"/> that is registered with the game engine.
            </summary>
            <param name="capi">Core Client API.</param>
            <param name="commandName">The friendly name of the system to return.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.GetInternalClientSystem``1(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
                Returns a specific <see cref="T:Vintagestory.Client.NoObf.ClientSystem"/> that is registered with the game engine.
            </summary>
            <param name="capi">Core Client API.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.UnregisterCommand(Vintagestory.API.Client.ICoreClientAPI,System.String)">
            <summary>
                
            </summary>
            <param name="capi">Core Client API.</param>
            <param name="commandName">The name of the command to unregister.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.AsServerMain(Vintagestory.API.Server.ICoreServerAPI)">
            <summary>
                Returns the <see cref="T:Vintagestory.Server.ServerMain"/> from the current <see cref="T:Vintagestory.API.Server.ICoreServerAPI"/> instance.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.AsApi(Vintagestory.Server.ServerMain)">
            <summary>
                Returns the <see cref="T:Vintagestory.API.Server.ICoreServerAPI"/> from the current <see cref="T:Vintagestory.Server.ServerMain"/> instance.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.IsDedicatedServerProcess(Vintagestory.API.Server.ICoreServerAPI)">
            <summary>
                Determines whether the server is running as a dedicated server, via
                VintagestoryServer.exe, or as a threaded server within Vintagestory.exe.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.GetInternalServerSystem``1(Vintagestory.API.Server.ICoreServerAPI)">
            <summary>
                Returns a specific <see cref="T:Vintagestory.Server.ServerSystem"/> that is registered with the game engine.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.GetSeed(Vintagestory.API.Common.ICoreAPI)">
            <summary>
                Gets the world seed.
            </summary>
            <param name="api">The core game API.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.ForServer(Vintagestory.API.Common.ICoreAPI)">
            <summary>
                Converts an agnostic API to a Server-side API.
            </summary>
            <param name="api">The core game API.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.ForClient(Vintagestory.API.Common.ICoreAPI)">
            <summary>
                Converts an side-agnostic API to a client-side API.
            </summary>
            <param name="api">The core game API.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.IsSinglePlayer(Vintagestory.API.Common.ICoreAPI)">
            <summary>
                Side-agnostic way to determine whether the current world is being played as a single-player world.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ApiExtensions.RegisterDelayedCallback(Vintagestory.API.Common.ICoreAPI,System.Action{System.Single},System.Int32)">
            <summary>
                Performs an action on the main thread of the application, after a given timeout.
            </summary>
            <param name="api">Core API.</param>
            <param name="onDelayedCallbackTick">The action to run once the delay has elapsed.</param>
            <param name="millisecondInterval">The delay, in millisecond, before the callback is called.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.Api.AppSideExtensions">
            <summary>
                Extension method for working with the Core API.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.AppSideExtensions.ChooseOneOf``1(Vintagestory.API.Common.EnumAppSide,``0,``0)">
            <summary>
                Chooses between one of two objects, based on whether it's being called by the client, or the server.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="side">The app side in question.</param>
            <param name="clientObject">The client object.</param>
            <param name="serverObject">The server object.</param>
            <returns>
                Returns <paramref name="clientObject"/> if called from the client, or <paramref name="serverObject"/> if called from the server.
            </returns>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.AppSideExtensions.RunOneOf(Vintagestory.API.Common.EnumAppSide,System.Action,System.Action)">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <param name="side">The app side in question.</param>
            <param name="clientAction">The client action.</param>
            <param name="serverAction">The server action.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.AppSideExtensions.RunOneOf``1(Vintagestory.API.Common.EnumAppSide,System.Action{``0},System.Action{``0},``0)">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <remarks>
                This generic method works best with the Options Pattern, rather than anonymous tuples, when passing in multiple values as a single parameter.
            </remarks>
            <param name="side">The app side in question.</param>
            <param name="clientAction">The client action.</param>
            <param name="serverAction">The server action.</param>
            <param name="parameter">The parameter to pass to the invoked action.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.AppSideExtensions.ReturnOneOf``1(Vintagestory.API.Common.EnumAppSide,System.Func{``0},System.Func{``0})">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <remarks>
                This generic method works best with the Options Pattern, rather than anonymous tuples, when passing in multiple values as a single parameter.
            </remarks>
            <param name="side">The app side in question.</param>
            <param name="clientAction">The client action.</param>
            <param name="serverAction">The server action.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.AppSideExtensions.ReturnOneOf``1(Vintagestory.API.Common.EnumAppSide,System.Func{``0},System.Func{``0},``0)">
            <summary>
                Invokes an action, based on whether it's being called by the client, or the server.
            </summary>
            <remarks>
                This generic method works best with the Options Pattern, rather than anonymous tuples, when passing in multiple values as a single parameter.
            </remarks>
            <param name="side">The app side in question.</param>
            <param name="clientAction">The client action.</param>
            <param name="serverAction">The server action.</param>
            <param name="parameter">The parameter to pass to the invoked action.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.AppSideExtensions.SetSidedInstances(Vintagestory.API.Common.ICoreAPI,Vintagestory.API.Client.ICoreClientAPI@,Vintagestory.API.Server.ICoreServerAPI@)">
            <summary>
                Populates client, or server specific API members, dependent on which app side the method is called from.
            </summary>
            <param name="api">The universal API to cast from.</param>
            <param name="clientApi">The client API member to populate, if on the Client app side.</param>
            <param name="serverApi">The server API member to populate, if on the Server app side.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Gantry.Core.Extensions.Api.ClientMainExtensions">
            <summary>
                Extensions methods for the <see cref="T:Vintagestory.Client.NoObf.ClientMain"/> class.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.ClientMainExtensions.StopAllSounds(Vintagestory.Client.NoObf.ClientMain)">
            <summary>
                Stops all currently playing sounds.
            </summary>
        </member>
        <member name="T:Gantry.Core.Extensions.Api.LoggerExtensions">
            <summary>
                Extension methods for logging, within Gantry.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.LoggerExtensions.GantryDebug(Vintagestory.API.Common.ILogger,System.String,System.Object[])">
            <summary>
                Adds a new <see cref="F:Vintagestory.API.Common.EnumLogType.Audit" /> log entry with the specified message, if debug mode is enabled.
            </summary>
        </member>
        <member name="T:Gantry.Core.Extensions.Api.BlockPosExtensions">
            <summary>
                Extension methods that aid scanning for blocks, and block entities.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.BlockPosExtensions.GetBlock``1(Vintagestory.API.MathTools.BlockPos,Gantry.Core.Abstractions.BlockLayer)">
            <summary>
                Gets the block at the specified position within the gameworld.
            </summary>
            <typeparam name="TBlock">The type of the block.</typeparam>
            <param name="this">The <see cref="T:Vintagestory.API.MathTools.BlockPos"/> to find the block at.</param>
            <param name="layer">Each block pos can house a liquid, and a solid. Defaults to solid blocks.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.BlockPosExtensions.GetBlockEntity``1(Vintagestory.API.MathTools.BlockPos)">
            <summary>
                Gets the block entity at the specified position within the gameworld.
            </summary>
            <typeparam name="TBlockEntity">The type of the block.</typeparam>
            <param name="this">The <see cref="T:Vintagestory.API.MathTools.BlockPos"/> to find the block at.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.Api.WorldAccessorExtensions">
            <summary>
                Extension methods that aid scanning for blocks, and block entities.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.WorldAccessorExtensions.WalkBlocks``1(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos,System.Func{Vintagestory.API.Common.Block,Vintagestory.API.MathTools.BlockPos,System.Boolean},System.Func{Vintagestory.API.Common.Block,Vintagestory.API.MathTools.BlockPos,``0},System.Boolean)">
            <summary>
                A method to iterate over blocks in an area. Less overhead than when calling GetBlock(pos) many times. Currently used for more efficient collision testing.
            </summary>
            <param name="walker"></param>
            <param name="minPos"></param>
            <param name="maxPos"></param>
            <param name="onBlockMap"></param>
            <param name="onBlockPredicate">The method in which you want to check for the block, whatever it may be.</param>
            <param name="centreOrder">If true, the blocks will be ordered by the distance to the center position</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.WorldAccessorExtensions.GetNearestBlock``1(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Single,System.Single,System.Func{``0,System.Boolean})">
            <summary>
                Gets the nearest block, of a specified type, given an origin <see cref="T:Vintagestory.API.MathTools.BlockPos"/>.
            </summary>
            <typeparam name="TBlock">The type of the block entity.</typeparam>
            <param name="world">The world to scan for blocks in.</param>
            <param name="origin">The origin position.</param>
            <param name="horizontalRange">The horizontal (X/Z) range to scan.</param>
            <param name="verticalRange">The vertical (Y) range to scan.</param>
            <param name="predicate">A custom filter to narrow the focus of the search.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.WorldAccessorExtensions.GetNearestBlockEntity``1(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Single,System.Single,System.Func{``0,System.Boolean})">
            <summary>
                Gets the nearest block entity, of a specified type, given an origin <see cref="T:Vintagestory.API.MathTools.BlockPos"/>.
            </summary>
            <typeparam name="TBlockEntity">The type of the block entity.</typeparam>
            <param name="world">The world to scan for blocks in.</param>
            <param name="origin">The origin position.</param>
            <param name="horRange">The horizontal (X/Z) range to scan.</param>
            <param name="vertRange">The vertical (Y) range to scan.</param>
            <param name="predicate">A custom filter to narrow the focus of the search.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.WorldAccessorExtensions.GetNearestBlockEntity``1(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Single,System.Single)">
            <summary>
                Gets the nearest block entity, of a specified type, given an origin <see cref="T:Vintagestory.API.MathTools.BlockPos"/>.
            </summary>
            <typeparam name="TBlockEntity">The type of the block entity.</typeparam>
            <param name="world">The world to scan for blocks in.</param>
            <param name="origin">The origin position.</param>
            <param name="horRange">The horizontal (X/Z) range to scan.</param>
            <param name="vertRange">The vertical (Y) range to scan.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.WorldAccessorExtensions.GetNearestBlock``1(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Single,System.Single,System.Func{``0,System.Boolean},Vintagestory.API.MathTools.BlockPos@)">
            <summary>
                Gets the nearest block, of a specified type, given an origin <see cref="T:Vintagestory.API.MathTools.BlockPos"/>.
            </summary>
            <typeparam name="TBlock">The type of the block entity.</typeparam>
            <param name="world">The world to scan for blocks in.</param>
            <param name="origin">The origin position.</param>
            <param name="horRange">The horizontal (X/Z) range to scan.</param>
            <param name="vertRange">The vertical (Y) range to scan.</param>
            <param name="predicate">A custom filter to narrow the focus of the search.</param>
            <param name="blockPosOut">The block position the block was found at.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.WorldAccessorExtensions.GetNearestBlock``1(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Single,System.Single,Vintagestory.API.MathTools.BlockPos@)">
            <summary>
                Gets the nearest block, of a specified type, given an origin <see cref="T:Vintagestory.API.MathTools.BlockPos"/>.
            </summary>
            <typeparam name="TBlock">The type of the block entity.</typeparam>
            <param name="world">The world to scan for blocks in.</param>
            <param name="origin">The origin position.</param>
            <param name="horRange">The horizontal (X/Z) range to scan.</param>
            <param name="vertRange">The vertical (Y) range to scan.</param>
            <param name="blockPosOut">The block position the block was found at.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Api.WorldAccessorExtensions.InRangeCubic(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos,System.Int32,System.Int32)">
            <summary>
                Determines whether one <see cref="T:Vintagestory.API.MathTools.BlockPos"/> is within three-dimensional range of another <see cref="T:Vintagestory.API.MathTools.BlockPos"/>.
            </summary>
            <param name="sourceBlockPos">The position under test.</param>
            <param name="originBlockPos">The position used as the origin of the search.</param>
            <param name="horizontalRadius">The horizontal radius for the search.</param>
            <param name="verticalRadius">The vertical radius for the search.</param>
            <returns><c>true</c> if the source block position is within the specified range of the origin position, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Gantry.Core.Extensions.ChatCommandExtensions">
            <summary>
                Extension methods to aid working with chat commands.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.ChatCommandExtensions.PopAll(Vintagestory.API.Common.CmdArgs,System.String)">
            <summary>
                Returns all remaining arguments as single merged string, concatenated with spaces.
            </summary>
            <param name="args">The CmdArgs instance that called this extension method.</param>
            <param name="defaultValue">The default value to use, if nothing remains within the argument buffer.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.ClassRegistryExtensions">
            <summary>
                Extension methods to help register classes with the game engine.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.ClassRegistryExtensions.RegisterItem``1(Vintagestory.API.Common.ICoreAPICommon)">
            <summary>
                Registers a new Item class. <br/>
                Must happen before any blocks are loaded. <br/>
                Must be registered on both the client, and server.
            </summary>
            <typeparam name="T">The type of the Item to register.</typeparam>
            <param name="api">The game's internal API.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.ClassRegistryExtensions.RegisterBlock``1(Vintagestory.API.Common.ICoreAPICommon)">
            <summary>
                Registers a new Block class. <br/>
                Must happen before any blocks are loaded. <br/>
                Must be registered on both the client, and server.
            </summary>
            <typeparam name="T">The type of the Block to register.</typeparam>
            <param name="api">The game's internal API.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.ClassRegistryExtensions.RegisterBlockEntity``1(Vintagestory.API.Common.ICoreAPICommon)">
            <summary>
                Registers a new Block class. <br/>
                Must happen before any blocks are loaded. <br/>
                Must be registered on both the client, and server.
            </summary>
            <typeparam name="T">The type of the Block to register.</typeparam>
            <param name="api">The game's internal API.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.ClassRegistryExtensions.RegisterBlockBehaviour``1(Vintagestory.API.Common.ICoreAPICommon)">
            <summary>
                Registers a new Block Behaviour. <br/>
                Must happen before any blocks are loaded. <br/>
                Must be registered on both the client, and server.
            </summary>
            <typeparam name="T">The type of the Block Behaviour to register.</typeparam>
            <param name="api">The game's internal API.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.ClassRegistryExtensions.RegisterBlockEntityBehaviour``1(Vintagestory.API.Common.ICoreAPICommon)">
            <summary>
                Registers a new BlockEntity Behaviour. <br/>
                Must happen before any blocks are loaded. <br/>
                Must be registered on both the client, and server.
            </summary>
            <typeparam name="T">The type of the BlockEntity Behaviour to register.</typeparam>
            <param name="api">The game's internal API.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.ClassRegistryExtensions.RegisterEntity``1(Vintagestory.API.Common.ICoreAPICommon)">
            <summary>
                Registers a new Block Behaviour. <br/>
                Must happen before any blocks are loaded. <br/>
                Must be registered on both the client, and server.
            </summary>
            <typeparam name="T">The type of the Block Behaviour to register.</typeparam>
            <param name="api">The game's internal API.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.ClassRegistryExtensions.RegisterEntityBehaviour``1(Vintagestory.API.Common.ICoreAPICommon)">
            <summary>
                Registers a new Entity Behaviour. <br/>
                Must be registered on both the client, and server.
            </summary>
            <typeparam name="T">The type of the Entity Behaviour to register.</typeparam>
            <param name="api">The game's internal API.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.ClassRegistryExtensions.RegisterCropBehaviour``1(Vintagestory.API.Common.ICoreAPICommon)">
            <summary>
                Registers a new Crop Behaviour. <br/>
                Must be registered on both the client, and server.
            </summary>
            <typeparam name="T">The type of the Crop Behaviour to register.</typeparam>
            <param name="api">The game's internal API.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.ClassRegistryExtensions.RegisterCollectibleBehaviour``1(Vintagestory.API.Common.ICoreAPICommon)">
            <summary>
                Registers a new Collectible Behaviour. <br/>
                Must be registered on both the client, and server.
            </summary>
            <typeparam name="T">The type of the Collectible Behaviour to register.</typeparam>
            <param name="api">The game's internal API.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.ColourExtensions">
            <summary>
                Extension methods to aid conversion of values to colour representations.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.ColourExtensions.ToRgbaVec4F(System.Double[])">
            <summary>
                Converts an array of <see cref="T:System.Double"/> values to a <see cref="T:Vintagestory.API.MathTools.Vec4f"/> in RGBA format.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.ColourExtensions.ToRgbaVec4F(System.Single[])">
            <summary>
                Converts an array of <see cref="T:System.Single"/> values to a <see cref="T:Vintagestory.API.MathTools.Vec4f"/> in RGBA format.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.ColourExtensions.ToRgbaVec4F(System.Drawing.Color)">
            <summary>
                Converts a <see cref="T:System.Drawing.Color"/> to a <see cref="T:Vintagestory.API.MathTools.Vec4f"/> in RGBA format.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.ColourExtensions.ToRgbaVec4F(System.String)">
            <summary>
                Converts a <see cref="T:System.String"/> to a <see cref="T:Vintagestory.API.MathTools.Vec4f"/> in RGBA format.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.ColourExtensions.ToRgbaVec4F(Gantry.Core.GameContent.AssetEnum.NamedColour)">
            <summary>
                Converts a <see cref="T:Gantry.Core.GameContent.AssetEnum.NamedColour"/> to a <see cref="T:Vintagestory.API.MathTools.Vec4f"/> in RGBA format.
            </summary>
        </member>
        <member name="T:Gantry.Core.Extensions.DotNet.CollectionExtensions">
            <summary>
                Extension methods to aid when working with collections.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.DotNet.CollectionExtensions.ToSortedDictionary``1(System.Collections.Generic.IList{``0})">
            <summary>
                Preserves the original indices of a list, within a sorted dictionary.
            </summary>
            <typeparam name="T">The type of the items held in the collection.</typeparam>
            <param name="collection">The collection to sort.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.DotNet.CollectionExtensions.ToFilteredSortedDictionary``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
                Filters a list, but preserves the original indices, within a sorted dictionary.
            </summary>
            <typeparam name="T">The type of the items held in the collection.</typeparam>
            <param name="collection">The collection to filter.</param>
            <param name="predicate">A function used to filter the collection.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.DotNet.EmbeddedResourcesExtensions">
            <summary>
                Provides a means for interacting with embedded resources within mod assemblies.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.DotNet.EmbeddedResourcesExtensions.ResourceExists(System.Reflection.Assembly,System.String)">
            <summary>
                Determines whether an embedded resource exists within an assembly.
            </summary>
            <param name="assembly">The assembly to find the resource in.</param>
            <param name="fileName">The name of the file to find.</param>
            <returns><c>true</c> if the embedded resource is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.DotNet.EmbeddedResourcesExtensions.GetResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
                Reads the resource, and passes back the output as a raw stream.
            </summary>
            <param name="assembly">The assembly to load the resource from.</param>
            <param name="fileName">Name of the file, embedded within the assembly.</param>
            <returns>The contents of the file, as a raw stream.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Embedded data file not found.</exception>
        </member>
        <member name="M:Gantry.Core.Extensions.DotNet.EmbeddedResourcesExtensions.GetResourceContent(System.Reflection.Assembly,System.String)">
            <summary>
                Reads the resource, and passes back the output as a string, as UTF8.
            </summary>
            <param name="assembly">The assembly to load the resource from.</param>
            <param name="fileName">Name of the file, embedded within the assembly.</param>
            <returns>The contents of the file, as a string.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Embedded data file not found.</exception>
        </member>
        <member name="M:Gantry.Core.Extensions.DotNet.EmbeddedResourcesExtensions.GetResourceContent(System.Reflection.Assembly,System.String,System.Text.Encoding)">
            <summary>
                Reads the resource, and passes back the output as a string
            </summary>
            <param name="assembly">The assembly to load the resource from.</param>
            <param name="fileName">Name of the file, embedded within the assembly.</param>
            <param name="encoding">The encoding to apply to the resource.</param>
            <returns>The contents of the file, as a string.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Embedded data file not found.</exception>
        </member>
        <member name="M:Gantry.Core.Extensions.DotNet.EmbeddedResourcesExtensions.DisembedResource(System.Reflection.Assembly,System.String,System.String)">
            <summary>
                Disembeds an embedded resource to specified location.
            </summary>
            <param name="assembly">The assembly to load the resource from.</param>
            <param name="resourceName">The manifest name of the resource.</param>
            <param name="fileName">The full path to where the file should be copied to.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.DotNet.FunctionalExtensions">
            <summary>
               Extension methods to aid with functional programming in C#.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.DotNet.FunctionalExtensions.IterateUntil``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})">
            <summary>
                Performs an operation repeatedly, until the criteria for stopping has been met.
            </summary>
            <typeparam name="T">The type of operation handler.</typeparam>
            <param name="this">The operation function to run.</param>
            <param name="createNext">A function that changes the state of the operation, between iterations.</param>
            <param name="finishCondition">A predicate that determines whether the criteria for stopping the iteration has been met.</param>
            <returns></returns>
        </member>
        <member name="T:Gantry.Core.Extensions.DotNet.OrphanedStaticsExtensions">
            <summary>
                Extension methods to aid the cleaning up of code, when exiting a game world.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.DotNet.OrphanedStaticsExtensions.NullifyOrphanedStaticMembers(System.Reflection.Assembly)">
            <summary>
                Nullifies any orphaned static members within a given assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.DotNet.StringExtensions">
            <summary>
                Extension methods to aid working with strings.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.DotNet.StringExtensions.EmptyIfNull(System.String)">
            <summary>
                Guards against null strings by returning an empty string if the string is null.
            </summary>
            <param name="param">The string to check.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Gantry.Core.Extensions.GameContent.EntityExtensions">
            <summary>
                Extension methods for when working with entities.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.EntityExtensions.ApplyForce(Vintagestory.API.Common.Entities.Entity,Vintagestory.API.MathTools.Vec3d,System.Double)">
            <summary>
                Applies a force to an entity, for a given direction vector.
            </summary>
            <param name="entity">The entity to apply the force to.</param>
            <param name="forwardVec">The forward direction vector, in which to apply the force.</param>
            <param name="force">The amount of force to apply.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.EntityExtensions.LookAwayFrom(Vintagestory.API.Common.Entities.EntityPos,Vintagestory.API.MathTools.Vec3d)">
            <summary>
                Changes the facing of a given agent, to face directly away from a target gameworld location.
            </summary>
            <param name="agentPos">The agent's position.</param>
            <param name="targetPos">The target position.</param>
            <returns>An <see cref="T:Vintagestory.API.Common.Entities.EntityPos"/>, containing the agent's current XYZ position, and the new YPR rotations.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.EntityExtensions.LookAt(Vintagestory.API.Common.Entities.EntityPos,Vintagestory.API.MathTools.Vec3d)">
            <summary>
                Changes the facing of a given agent, to face directly towards a target gameworld location.
            </summary>
            <param name="agentPos">The agent's position.</param>
            <param name="targetPos">The target position.</param>
            <returns>An <see cref="T:Vintagestory.API.Common.Entities.EntityPos"/>, containing the agent's current XYZ position, and the new YPR rotations.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.EntityExtensions.RelativeRotationalDirection(Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3d)">
            <summary>
                Determines the relative rotational direction vector between two locations.
            </summary>
            <param name="sourcePos">The source position.</param>
            <param name="targetPos">The target position.</param>
            <returns>A <see cref="T:Vintagestory.API.MathTools.Vec2f"/> containing the normalised rotational values around the X, and Y axes, as if the target position was facing directly towards the source.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.EntityExtensions.IsLookingAt(Vintagestory.API.Common.EntityAgent,Vintagestory.API.MathTools.Vec3d,System.Single)">
            <summary>
                Determines whether an agent is looking at the specified target position.
            </summary>
            <param name="agent">The agent.</param>
            <param name="targetPos">The target position.</param>
            <param name="radThreshold">The margin of error threshold, in radians.</param>
            <returns><c>true</c> if the agent is looking at the specified target position; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.EntityExtensions.IsLookingAtTheSun(Vintagestory.API.Common.EntityAgent,System.Single)">
            <summary>
             Determines whether the agent is looking at the sun, within a specified margin of error.
            </summary>
            <param name="agent">The agent.</param>
            <param name="radThreshold">The margin of error threshold, in radians.</param>
            <returns><c>true</c> if the agent is looking at the sun; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.EntityExtensions.IsLookingAtTheMoon(Vintagestory.API.Common.EntityAgent,System.Single)">
            <summary>
             Determines whether the agent is looking at the moon, within a specified margin of error.
            </summary>
            <param name="agent">The agent.</param>
            <param name="radThreshold">The margin of error threshold, in radians.</param>
            <returns><c>true</c> if the agent is looking at the moon; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Gantry.Core.Extensions.GameContent.Gui.GuiComposerExtensions">
            <summary>
                Extensions methods to aid the composition of GUI forms.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.Gui.GuiComposerExtensions.DefaultButtonBounds">
            <summary>
                The default bounds for a menu button.
            </summary>
            <returns>The default bounds for a menu button.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.Gui.GuiComposerExtensions.DefaultButtonBounds(Vintagestory.Client.NoObf.GuiCompositeSettings)">
            <summary>
            The default bounds for a menu button.
            </summary>
            <returns>The default bounds for a menu button.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.Gui.GuiComposerExtensions.GetElements``1(Vintagestory.API.Client.GuiComposer)">
            <summary>
                Returns all elements of a specific type, from the composer.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.Gui.GuiComposerExtensions.GetElements(Vintagestory.API.Client.GuiComposer)">
            <summary>
                Returns all elements that have been added to the composer.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.Gui.GuiComposerExtensions.ToggleGui``1(``0)">
            <summary>
                Opens the GUI is closed, closes the GUI is open.
            </summary>
            <typeparam name="TDialogue">The type of the dialogue.</typeparam>
            <param name="dialogue">The dialogue.</param>
            <returns></returns>
        </member>
        <member name="T:Gantry.Core.Extensions.GameContent.Gui.InputApiExtensions">
            <summary>
                Extensions methods to aid the registration of GUI forms.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.Gui.InputApiExtensions.RegisterGuiDialogueHotKey(Vintagestory.API.Client.IInputAPI,Vintagestory.API.Client.GuiDialog,System.String,Vintagestory.API.Client.GlKeys,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Registers a hot key, and associates it with a dialogue form, as a singleton.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.Gui.InputApiExtensions.RegisterTransientGuiDialogueHotKey(Vintagestory.API.Client.IInputAPI,System.Func{Vintagestory.API.Client.GuiDialog},System.String,Vintagestory.API.Client.GlKeys,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Registers a hot key, and associates it with a dialogue form, as transient, using a factory to instantiate the dialogue.
            </summary>
        </member>
        <member name="T:Gantry.Core.Extensions.GameContent.Gui.LoadedTextureExtensions">
            <summary>
                Extension methods to aid when working with textures.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.Gui.LoadedTextureExtensions.Delete(Vintagestory.API.Client.LoadedTexture)">
            <summary>
                Deletes the specified <see cref="T:Vintagestory.API.Client.LoadedTexture"/>. Can only be run on the Client.
            </summary>
            <param name="texture">The texture to delete.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.GameContent.PlayerExtensions">
            <summary>
                Extension methods for when working with players and player entities.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.PlayerExtensions.SendMessage(Vintagestory.API.Common.IPlayer,System.Int32,System.String,Vintagestory.API.Common.EnumChatType)">
            <summary>
                Sends a generic notification message to a given player, from the server.
            </summary>
            <param name="player">The player to send the message to.</param>
            <param name="groupId">The chat group to send the message to.</param>
            <param name="message">The message to send.</param>
            <param name="chatType">The type of message to send.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.PlayerExtensions.SendInvalidSyntaxMessage(Vintagestory.API.Common.IPlayer,System.Int32)">
            <summary>
                Sends a message to the player, giving feedback about an invalid syntax message.
            </summary>
            <param name="player">The player to send the message to.</param>
            <param name="groupId">The chat group to send the message to.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.GameContent.TavisExtensions">
            <summary>
                Extension methods for Tavis JSON Patching Engine.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.TavisExtensions.#cctor">
            <summary>
            	Initialises static members of the <see cref="T:Gantry.Core.Extensions.GameContent.TavisExtensions"/> class.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.TavisExtensions.ApplyJsonPatch(Vintagestory.API.Common.ICoreAPI,Vintagestory.ServerMods.NoObf.JsonPatch)">
            <summary>
                Applies a single patch to a JSON file.
            </summary>
            <param name="api">The core API used by the game, on both the client, and the server.</param>
            <param name="patch">The patch to apply.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.TavisExtensions.ApplyJsonPatches(Vintagestory.API.Common.ICoreAPI,System.Collections.Generic.List{Vintagestory.ServerMods.NoObf.JsonPatch})">
            <summary>
                Applies a number of patches to the JSON assets of the game.
            </summary>
            <param name="api">The core API used by the game, on both the client, and the server.</param>
            <param name="patches">The patches to apply.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.TavisExtensions.ApplyPatch(Vintagestory.ServerMods.NoObf.ModJsonPatchLoader,Vintagestory.ServerMods.NoObf.JsonPatch)">
            <summary>
                Applies a single patch to a JSON file.
            </summary>
            <param name="jsonPatcher">The <see cref="T:Vintagestory.ServerMods.NoObf.ModJsonPatchLoader"/> ModSystem used to patch JSON files in the game.</param>
            <param name="patch">The patch to apply.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.TavisExtensions.ApplyPatches(Vintagestory.ServerMods.NoObf.ModJsonPatchLoader,System.Collections.Generic.List{Vintagestory.ServerMods.NoObf.JsonPatch})">
            <summary>
                Applies a number of patches to the JSON assets of the game.
            </summary>
            <param name="jsonPatcher">The <see cref="T:Vintagestory.ServerMods.NoObf.ModJsonPatchLoader"/> ModSystem used to patch JSON files in the game.</param>
            <param name="patches">The patches to apply.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.TavisExtensions.PatchBlockBehaviour``1(Vintagestory.API.Common.ICoreAPI,Vintagestory.API.Common.AssetLocation)">
            <summary>
                Registers a BlockBehaviour with the API, and patches the JSON file to add the behaviour to the block.
            </summary>
            <typeparam name="TBlockBehaviour">The type of <see cref="T:Vintagestory.API.Common.BlockBehavior"/> to register.</typeparam>
            <param name="api">The API to register the <see cref="T:Vintagestory.API.Common.BlockBehavior"/> with.</param>
            <param name="fileAsset">The file to patch.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.TavisExtensions.PatchBlockEntityBehaviour``1(Vintagestory.API.Common.ICoreAPI,Vintagestory.API.Common.AssetLocation)">
            <summary>
                Registers a BlockEntityBehaviour with the API, and patches the JSON file to add the behaviour to the block.
            </summary>
            <typeparam name="TBehaviour">The type of <see cref="T:Vintagestory.API.Common.BlockEntityBehavior"/> to register.</typeparam>
            <param name="api">The API to register the <see cref="T:Vintagestory.API.Common.BlockEntityBehavior"/> with.</param>
            <param name="fileAsset">The file to patch.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.GameContent.TemporalStormServerExtensions">
            <summary>
                Extensions methods to aid working with temporal storms.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.TemporalStormServerExtensions.StartTemporalStorm(Vintagestory.API.Server.IServerWorldAccessor,System.Nullable{Vintagestory.GameContent.EnumTempStormStrength},System.Nullable{System.Double})">
            <summary>
                Immediately starts a temporal storm.
            </summary>
            <param name="world">The world to start the storm in.</param>
            <param name="stormType">The <see cref="T:Vintagestory.GameContent.EnumTempStormStrength"/> type of the storm.</param>
            <param name="strength">The strength of the storm.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.TemporalStormServerExtensions.StopTemporalStorm(Vintagestory.API.Server.IServerWorldAccessor)">
            <summary>
                Immediately stops a temporal storm.
            </summary>
            <param name="world">The world to start the storm in.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.GameContent.WaypointExtensions">
            <summary>
                Extension methods to aid working with Waypoints, and the WaypointMapLayer.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.WaypointExtensions.IsInHorizontalRangeOf(Vintagestory.GameContent.Waypoint,Vintagestory.API.MathTools.BlockPos,System.Single)">
            <summary>
                Determines whether the specified waypoint is within a set horizontal distance of a specific block, or location within the game world.
            </summary>
            <param name="waypoint">The waypoint.</param>
            <param name="targetPosition">The target position.</param>
            <param name="squareDistance">The maximum square distance tolerance level.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.WaypointExtensions.IsInHorizontalRangeOf(Vintagestory.GameContent.Waypoint,Vintagestory.API.MathTools.BlockPos,System.Int32)">
            <summary>
                Determines whether the specified waypoint is within a set horizontal distance of a specific block, or location within the game world.
            </summary>
            <param name="waypoint">The waypoint.</param>
            <param name="targetPosition">The target position.</param>
            <param name="blockRadius">The radius tolerance, in blocks.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.WaypointExtensions.AddWaypointAtPos(Vintagestory.API.MathTools.BlockPos,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Adds a waypoint at the a position within the world, relative to the global spawn point.
            </summary>
            <param name="pos">The position to add the waypoint at. World Pos - Not Relative to Spawn!</param>
            <param name="icon">The icon to use for the waypoint.</param>
            <param name="colour">The colour of the waypoint.</param>    
            <param name="title">The title to set.</param>
            <param name="pinned">if set to <c>true</c>, the waypoint will be pinned to the world map.</param>
            <param name="allowDuplicates">if set to <c>true</c>, the waypoint will not be placed, if another similar waypoint already exists at that position.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.WaypointExtensions.AddWaypointAtPosAsync(Vintagestory.API.MathTools.BlockPos,System.String,System.String,System.String,System.Boolean)">
            <summary>
                Asynchronously adds a waypoint at the a position within the world, relative to the global spawn point.
            </summary>
            <param name="pos">The position to add the waypoint at. World Pos - Not Relative to Spawn!</param>
            <param name="icon">The icon to use for the waypoint.</param>
            <param name="colour">The colour of the waypoint.</param>    
            <param name="title">The title to set.</param>
            <param name="pinned">if set to <c>true</c>, the waypoint will be pinned to the world map.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.WaypointExtensions.WaypointExistsWithinRadius(Vintagestory.API.MathTools.BlockPos,System.Int32,System.Int32,System.Func{Vintagestory.GameContent.Waypoint,System.Boolean})">
            <summary>
                Determines whether a waypoint already exists within a radius of a specific position on the world map.
            </summary>
            <param name="position">The position to check.</param>
            <param name="horizontalRadius">The number of blocks away from the origin position to scan, on the X and Z axes.</param>
            <param name="verticalRadius">The number of blocks away from the origin position to scan, on the Y axis.</param>
            <param name="filter">A custom filter, to narrow the scope of the search.</param>
            <returns><c>true</c> if a waypoint already exists within range of the specified position, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.WaypointExtensions.WaypointExistsWithinRadiusAsync(Vintagestory.API.MathTools.BlockPos,System.Int32,System.Int32,System.Func{Vintagestory.GameContent.Waypoint,System.Boolean})">
            <summary>
                Asynchronously determines whether a waypoint already exists within a radius of a specific position on the world map.
            </summary>
            <param name="position">The position to check.</param>
            <param name="horizontalRadius">The number of blocks away from the origin position to scan, on the X and Z axes.</param>
            <param name="verticalRadius">The number of blocks away from the origin position to scan, on the Y axis.</param>
            <param name="filter">A custom filter, to narrow the scope of the search.</param>
            <returns><c>true</c> if a waypoint already exists within range of the specified position, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.WaypointExtensions.WaypointExistsAtPos(Vintagestory.API.MathTools.BlockPos,System.Func{Vintagestory.GameContent.Waypoint,System.Boolean})">
            <summary>
                Determines whether a waypoint already exists at a specific position on the world map.
            </summary>
            <param name="pos">The position to check.</param>
            <param name="filter">A custom filter, to narrow the scope of the search.</param>
            <returns><c>true</c> if a waypoint already exists at the specified position, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.WaypointExtensions.WaypointExistsAtPosAsync(Vintagestory.API.MathTools.BlockPos,System.Func{Vintagestory.GameContent.Waypoint,System.Boolean})">
            <summary>
                Asynchronously determines whether a waypoint already exists at a specific position on the world map.
            </summary>
            <param name="pos">The position to check.</param>
            <param name="filter">A custom filter, to narrow the scope of the search.</param>
            <returns><c>true</c> if a waypoint already exists at the specified position, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.WaypointExtensions.IsSameAs(Vintagestory.GameContent.Waypoint,Vintagestory.GameContent.Waypoint)">
            <summary>
                The game does not implement any way of uniquely identifying waypoints, nor does it set waypoint objects as ValueTypes.
                So this is a memberwise equality checker, to see if one waypoint is the same as another waypoint, when jumping through the numerous hoops required.
                This method should not be needed... but here we are.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.WaypointExtensions.AddWaypointForBlockPosPairAsync(System.Collections.Generic.KeyValuePair{Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.Block},System.String,System.String)">
            <summary>
                Asynchronously adds a <see cref="T:Vintagestory.GameContent.Waypoint"/> for a specific <see cref="T:Vintagestory.API.Common.Block"/>, at a given <see cref="T:Vintagestory.API.MathTools.BlockPos"/>.
            </summary>
            <param name="blockPosPair">The <see cref="T:Vintagestory.API.Common.Block"/>, with its <see cref="T:Vintagestory.API.MathTools.BlockPos"/> as a key.</param>
            <param name="icon">The icon to add to the waypoint.</param>
            <param name="colour">The colour to set the waypoint as.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.WaypointExtensions.AddWaypointForBlockPosPair(System.Collections.Generic.KeyValuePair{Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.Block},System.String,System.String)">
            <summary>
                Adds a <see cref="T:Vintagestory.GameContent.Waypoint"/> for a specific <see cref="T:Vintagestory.API.Common.Block"/>, at a given <see cref="T:Vintagestory.API.MathTools.BlockPos"/>.
            </summary>
            <param name="blockPosPair">The <see cref="T:Vintagestory.API.Common.Block"/>, with its <see cref="T:Vintagestory.API.MathTools.BlockPos"/> as a key.</param>
            <param name="icon">The icon to add to the waypoint.</param>
            <param name="colour">The colour to set the waypoint as.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.GameContent.WorldMapManagerExtensions">
            <summary>
                Extension Methods for the World Map Manager.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.WorldMapManagerExtensions.WaypointMapLayer(Vintagestory.GameContent.WorldMapManager)">
            <summary>
                Returns the map layer used for rendering waypoints.
            </summary>
            <param name="mapManager">The <see cref="T:Vintagestory.GameContent.WorldMapManager" /> instance that this method was called from.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.WorldMapManagerExtensions.PlayerMapLayer(Vintagestory.GameContent.WorldMapManager)">
            <summary>
                Returns the map layer used for rendering player pins.
            </summary>
            <param name="mapManager">The <see cref="T:Vintagestory.GameContent.WorldMapManager" /> instance that this method was called from.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.WorldMapManagerExtensions.ForceSendWaypoints(Vintagestory.GameContent.WorldMapManager)">
            <summary>
                Trick the server into sending waypoints to the client even if they don't have their map opened. <br/>
                Credit to Novocain.
            </summary>
            <param name="mapManager">The <see cref="T:Vintagestory.GameContent.WorldMapManager" /> instance that this method was called from.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.GameContent.WorldMapManagerExtensions.RecentreMap(Vintagestory.GameContent.WorldMapManager,Vintagestory.API.MathTools.Vec3d)">
            <summary>
                Re-centres the map on a specific position.
            </summary>
            <param name="mapManager">The <see cref="T:Vintagestory.GameContent.WorldMapManager" /> instance that this method was called from.</param>
            <param name="pos">The position to re-centre the map on.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.GameModeExtensions">
            <summary>
                Extension methods to aid working with the current player's game mode.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.GameModeExtensions.IsSurvival(Vintagestory.API.Common.EnumGameMode)">
            <summary>
                Determines whether the current game mode is set to Survival.
            </summary>
            <param name="mode">The current game mode.</param>
            <returns><c>true</c> if the current game mode is set to Survival; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameModeExtensions.IsCreative(Vintagestory.API.Common.EnumGameMode)">
            <summary>
                Determines whether the current game mode is set to Creative.
            </summary>
            <param name="mode">The current game mode.</param>
            <returns><c>true</c> if the current game mode is set to Creative; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameModeExtensions.IsSpectator(Vintagestory.API.Common.EnumGameMode)">
            <summary>
                Determines whether the current game mode is set to Spectator.
            </summary>
            <param name="mode">The current game mode.</param>
            <returns><c>true</c> if the current game mode is set to Spectator; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.GameModeExtensions.IsGuest(Vintagestory.API.Common.EnumGameMode)">
            <summary>
                Determines whether the current game mode is set to Guest.
            </summary>
            <param name="mode">The current game mode.</param>
            <returns><c>true</c> if the current game mode is set to Guest; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Gantry.Core.Extensions.Harmony.HarmonyReflectionExtensions">
            <summary>
                Extension methods for easier, and more performant use of reflection.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Harmony.HarmonyReflectionExtensions.GetProperties``1(System.Object)">
            <summary>
                Gets an array of fields within the calling instanced object, of a specified Type. These can be an internal or private fields within another assembly.
            </summary>
            <typeparam name="T">The type of field to return.</typeparam>
            <param name="instance">The instance in which the field resides.</param>
            <returns>An array containing the values of the fields of a specified Type, reflected by this instance.</returns>
        </member>
        <member name="T:Gantry.Core.Extensions.Helpers.BrowserEx">
            <summary>
                Extension methods to aid with cross-platform operations. 
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Helpers.BrowserEx.OpenUrl(System.String)">
            <summary>
                Opens a URL within the user's default browser.
            </summary>
            <param name="url">The URL to browse to.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.Helpers.EnumEx">
            <summary>
                Helper class that extends the normal functionality of enums.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Helpers.EnumEx.Parse``1(System.String,System.Boolean)">
            <summary>
                Converts the string representation of the name or numeric value of one or more enumerated constants to an
                equivalent enumerated object. A parameter specifies whether the operation is case-insensitive.
            </summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase">true to ignore case; false to regard case.</param>
            <returns>
                An object of type <typeparamref name="TEnum">enumType</typeparamref> whose value is represented by
                <paramref name="value">value</paramref>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <typeparamref name="TEnum">enumType</typeparamref> or
                <paramref name="value">value</paramref> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                <typeparamref name="TEnum">enumType</typeparamref> is not an
                <see cref="T:System.Enum"></see>.   -or-  <paramref name="value">value</paramref> is either an empty string ("") or
                only contains white space.   -or-  <paramref name="value">value</paramref> is a name, but not one of the named
                constants defined for the enumeration.
            </exception>
            <exception cref="T:System.OverflowException">
                <paramref name="value">value</paramref> is outside the range of the
                underlying type of <typeparamref name="TEnum">enumType</typeparamref>.
            </exception>
        </member>
        <member name="T:Gantry.Core.Extensions.Helpers.RandomEx">
            <summary>
                Static Helper class for Random Number Generation.
            </summary>
        </member>
        <member name="P:Gantry.Core.Extensions.Helpers.RandomEx.Shared">
            <summary>
                Returns a shared instance of <see cref="T:System.Random"/> that can safely be used across threads.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Helpers.RandomEx.RandomValueBetween(System.Double,System.Double)">
            <summary>
                Returns a random <see langword="double"/> that is within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>A double-precision floating-point number greater than or equal to <paramref name="minValue">minValue</paramref> and less than <paramref name="maxValue">maxValue</paramref>; that is, the range of return values includes <paramref name="minValue">minValue</paramref> but not <paramref name="maxValue">maxValue</paramref>. If <paramref name="minValue">minValue</paramref> equals <paramref name="maxValue">maxValue</paramref>, <paramref name="minValue">minValue</paramref> is returned.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minValue">minValue</paramref> is greater than <paramref name="maxValue">maxValue</paramref>.</exception>
        </member>
        <member name="M:Gantry.Core.Extensions.Helpers.RandomEx.RandomValueAround(System.Double,System.Double)">
            <summary>
                Returns a random <see langword="double"/> that is within a specified range.
            </summary>
            <param name="value">The value to randomise.</param>
            <param name="threshold">The threshold of the lower and upper bounds of randomisation.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Helpers.RandomEx.RandomValueAround(System.Single,System.Single)">
            <summary>
                Returns a random <see langword="float"/> that is within a specified range.
            </summary>
            <param name="value">The value to randomise.</param>
            <param name="threshold">The threshold of the lower and upper bounds of randomisation.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Helpers.RandomEx.RandomValueAround(System.Int32,System.Int32)">
            <summary>
                Returns a random <see langword="int"/> that is within a specified range.
            </summary>
            <param name="value">The value to randomise.</param>
            <param name="threshold">The threshold of the lower and upper bounds of randomisation.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Helpers.RandomEx.RandomBool">
            <summary>
                Returns a random <see langword="bool"/> value.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Helpers.RandomEx.RandomSign(System.Double)">
            <summary>
                Returns a <see langword="double"/> with a random signing.
                The same numerical value as the input, but either positive, or negative.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Helpers.RandomEx.RandomSign(System.Single)">
            <summary>
                Returns a <see langword="double"/> with a random signing.
                The same numerical value as the input, but either positive, or negative.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Helpers.RandomEx.RandomSign(System.Int32)">
            <summary>
                Returns a <see langword="double"/> with a random signing.
                The same numerical value as the input, but either positive, or negative.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Helpers.RandomEx.RandomSign(System.Int64)">
            <summary>
                Returns a <see langword="double"/> with a random signing.
                The same numerical value as the input, but either positive, or negative.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.ModLoaderExtensions">
            <summary>
                Extension methods to aid with core game engine tasks.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.ModLoaderExtensions.GetModSystem(Vintagestory.Common.ModLoader,System.Type)">
            <summary>
                Returns a loaded <see cref="T:Vintagestory.API.Common.ModSystem"/> with the specified type.
            </summary>
            <param name="modLoader">The instance used to load mods.</param>
            <param name="type">The type of <see cref="T:Vintagestory.API.Common.ModSystem"/> to find.</param>
            <returns></returns>
        </member>
        <member name="M:Gantry.Core.Extensions.ModLoaderExtensions.GetModSystem``1(Vintagestory.Common.ModLoader)">
            <summary>
                Returns a loaded <see cref="T:Vintagestory.API.Common.ModSystem"/> with the specified type.
            </summary>
            <typeparam name="T">The type of <see cref="T:Vintagestory.API.Common.ModSystem"/> to find.</typeparam>
            <param name="modLoader">The instance used to load mods.</param>
            <returns></returns>
        </member>
        <member name="T:Gantry.Core.Extensions.PlayerExtensions">
            <summary>
                Extensions methods to aid working with players.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.PlayerExtensions.SendMessage(Vintagestory.API.Server.IServerPlayer,System.String)">
            <summary>
                Sends a chat message to the player, using the current chat channel.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.PlayerExtensions.ShowChatMessage(Vintagestory.API.Common.IPlayer,System.String)">
            <summary>
                Sends a chat message to the player, using the current chat channel.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.PlayerExtensions.EnqueueShowChatMessage(Vintagestory.API.Client.ICoreClientAPI,System.String)">
            <summary>
                Thread-Safe.
                Shows a client side only chat message in the current chat channel. Does not execute client commands.
            </summary>
            <param name="api">The core game API this method was called from.</param>
            <param name="message">The message to show to the player.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.PlayerExtensions.EnqueueShowChatMessage(Vintagestory.Client.NoObf.ClientMain,System.String)">
            <summary>
                Thread-Safe.
                Shows a client side only chat message in the current chat channel. Does not execute client commands.
            </summary>
            <param name="game">The core game API this method was called from.</param>
            <param name="message">The message to show to the player.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.PositionExtensions">
            <summary>
                Extension methods to aid working with gameworld positions.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.PositionExtensions.RelativeToSpawn(Vintagestory.API.MathTools.BlockPos)">
            <summary>
                Gets the position relative to spawn, given an absolute position within the game world.
            </summary>
            <param name="pos">The absolute position of the block being queried.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.PositionExtensions.ClampToWorldBounds(Vintagestory.API.MathTools.BlockPos)">
            <summary>
                Ensures that a <see cref="T:Vintagestory.API.MathTools.BlockPos"/> is inside of the world borders.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.PositionExtensions.GetRandomPositionInRange(Vintagestory.API.MathTools.Vec3d,System.Int32,System.Int32)">
            <summary>
                Generates a random position within a specified range of an origin position.
            </summary>
            <param name="origin">The origin position.</param>
            <param name="horizontalRadius">The radius away from the origin to use as the upper and lower bounds for the X and Z coordinates of the returned position.</param>
            <param name="verticalRadius">The radius away from the origin to use as the upper and lower bounds for the Y coordinates of the returned position.</param>
            <returns>A <see cref="T:Vintagestory.API.MathTools.Vec3d"/> representing a position in the game world, a random distance away from the origin position.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.PositionExtensions.GetSurfaceLevel(Vintagestory.API.MathTools.BlockPos)">
            <summary>
                Gets the surface level at the specified block position. This is the highest point on the Y axis, where the block is solid, from above.
            </summary>
            <param name="pos">The position.</param>
            <returns>An <see cref="T:System.Int32"/> value, representing the highest Y value with a solid block underneath it.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.PositionExtensions.CollisionCheck(Vintagestory.API.Common.Entities.Entity,Vintagestory.API.MathTools.Vec3d)">
            <summary>
                Checks to see whether the entity will collide with anything at a given position in the world.
            </summary>
            <param name="entity">The entity in question.</param>
            <param name="position">The position for which to check for collisions.</param>
            <returns>Returns <c>true</c>, if the entity will collide with something at the given position; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Gantry.Core.Extensions.RenderApiExtensions">
            <summary>
                Extension methods to aid working with the Render API.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.RenderApiExtensions.ReloadShadersThreadSafe(Vintagestory.API.Client.IShaderAPI,Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
                Discards all currently compiled shaders and re-compiles them.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.RenderApiExtensions.ReloadShadersThreadSafe(Vintagestory.API.Client.IShaderAPI)">
            <summary>
                Discards all currently compiled shaders and re-compiles them.
            </summary>
        </member>
        <member name="T:Gantry.Core.Extensions.Threading.ClientThreadInjectionExtensions">
            <summary>
                Provides methods for injecting ClientSystems into the game.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Threading.ClientThreadInjectionExtensions.#cctor">
            <summary>
            	Initialises static members of the <see cref="T:Gantry.Core.Extensions.Threading.ClientThreadInjectionExtensions"/> class.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Threading.ClientThreadInjectionExtensions.IsClientSystemLoaded(Vintagestory.API.Client.ICoreClientAPI,System.String)">
            <summary>
                Determines whether a given ClientSystem is present within the game's registry.
            </summary>
            <param name="api">
                The core API implemented by the client. The main interface for accessing the client. Contains all
                sub-components, and some miscellaneous methods.
            </param>
            <param name="name">The name of the ClientSystem to find.</param>
            <returns><c>true</c> if the ClientSystem is loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.Threading.ClientThreadInjectionExtensions.IsClientSystemLoaded``1(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
                Determines whether a given ClientSystem is present within the game's registry.
            </summary>
            <param name="api">
                The core API implemented by the client. The main interface for accessing the client. Contains all
                sub-components, and some miscellaneous methods.
            </param>
            <typeparam name="TClientSystem">The type of the ClientSystem to find.</typeparam>
            <returns><c>true</c> if the ClientSystem is loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.Threading.ClientThreadInjectionExtensions.GetClientThreads(Vintagestory.API.Client.IClientWorldAccessor)">
            <summary>
                Gets a list of all currently running client threads.
            </summary>
            <param name="world">The world accessor API for the client.</param>
            <returns>A list, containing all the currently running threads, for the client process.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.Threading.ClientThreadInjectionExtensions.GetClientSystems(Vintagestory.API.Client.IClientWorldAccessor)">
            <summary>
                Retrieves all currently registered <see cref="T:Vintagestory.Client.NoObf.ClientSystem" />s.
            </summary>
            <param name="world">The world accessor API for the client.</param>
            <returns>A <see cref="T:System.Collections.Generic.Stack`1" />, containing all the currently registered systems, on the client.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.Threading.ClientThreadInjectionExtensions.InjectClientThread(Vintagestory.API.Client.ICoreClientAPI,System.String,Vintagestory.Client.NoObf.ClientSystem[])">
            <summary>
                Injects custom thread into the client process, passing control of 
                the thread's lifetime and integration, from the mod, to the game.
            </summary>
            <param name="capi">The internal API for the client.</param>
            <param name="name">The name of the thread to inject.</param>
            <param name="systems">One or more custom <see cref="T:Vintagestory.Client.NoObf.ClientSystem" /> implementations to run on the thread.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Threading.ClientThreadInjectionExtensions.InjectClientThread(Vintagestory.API.Client.IClientWorldAccessor,System.String,Vintagestory.Client.NoObf.ClientSystem[])">
            <summary>
                Injects custom thread into the client process, passing control of 
                the thread's lifetime and integration, from the mod, to the game.
            </summary>
            <param name="world">The world accessor API for the client.</param>
            <param name="name">The name of the thread to inject.</param>
            <param name="systems">One or more custom <see cref="T:Vintagestory.Client.NoObf.ClientSystem" /> implementations to run on the thread.</param>
        </member>
        <member name="T:Gantry.Core.Extensions.Threading.ServerThreadInjectionExtensions">
            <summary>
                Provides methods for injecting ServerSystems into the game.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Threading.ServerThreadInjectionExtensions.#cctor">
            <summary>
                Initialises static members of the <see cref="T:Gantry.Core.Extensions.Threading.ServerThreadInjectionExtensions" /> class.
            </summary>
        </member>
        <member name="M:Gantry.Core.Extensions.Threading.ServerThreadInjectionExtensions.IsServerSystemLoaded``1(Vintagestory.API.Server.ICoreServerAPI)">
            <summary>
                Determines whether a given ServerSystem is present within the game's registry.
            </summary>
            <param name="api">
                The core API implemented by the server. The main interface for accessing the server.
                Contains all sub-components, and some miscellaneous methods.
            </param>
            <typeparam name="TServerSystem">The type of the ServerSystem to find.</typeparam>
            <returns><c>true</c> if the ServerSystem is loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.Threading.ServerThreadInjectionExtensions.GetServerThreads(Vintagestory.API.Server.IServerWorldAccessor)">
            <summary>
                Gets a list of all currently running server threads.
            </summary>
            <param name="world">The world accessor API for the server.</param>
            <returns>A list, containing all the currently running threads, for the server process.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.Threading.ServerThreadInjectionExtensions.GetServerSystems(Vintagestory.API.Server.IServerWorldAccessor)">
            <summary>
                Retrieves all currently registered <see cref="T:Vintagestory.Server.ServerSystem" />s.
            </summary>
            <param name="world">The world accessor API for the server.</param>
            <returns>A <see cref="T:System.Collections.Generic.Stack`1" />, containing all the currently registered systems, on the server.</returns>
        </member>
        <member name="M:Gantry.Core.Extensions.Threading.ServerThreadInjectionExtensions.InjectServerThread(Vintagestory.API.Server.ICoreServerAPI,System.String,Vintagestory.Server.ServerSystem[])">
            <summary>
                Injects custom thread into the server process, passing control of 
                the thread's lifetime and integration, from the mod, to the game.
            </summary>
            <param name="sapi">The ServerCore API.</param>
            <param name="name">The name of the thread to inject.</param>
            <param name="systems">One or more custom <see cref="T:Vintagestory.Server.ServerSystem" /> implementations to run on the thread.</param>
        </member>
        <member name="M:Gantry.Core.Extensions.Threading.ServerThreadInjectionExtensions.InjectServerThread(Vintagestory.API.Server.IServerWorldAccessor,System.String,Vintagestory.Server.ServerSystem[])">
            <summary>
                Injects custom thread into the server process, passing control of 
                the thread's lifetime and integration, from the mod, to the game.
            </summary>
            <param name="world">The world accessor API for the server.</param>
            <param name="name">The name of the thread to inject.</param>
            <param name="systems">One or more custom <see cref="T:Vintagestory.Server.ServerSystem" /> implementations to run on the thread.</param>
        </member>
        <member name="T:Gantry.Core.GameAssemblies">
            <summary>
                Direct access to the game's vanilla assemblies.
            </summary>
        </member>
        <member name="P:Gantry.Core.GameAssemblies.VSEssentials">
            <summary>
                VSEssentials.dll
            </summary>
        </member>
        <member name="P:Gantry.Core.GameAssemblies.VSSurvivalMod">
            <summary>
                VSSurvivalMod.dll
            </summary>
        </member>
        <member name="P:Gantry.Core.GameAssemblies.VSCreativeMod">
            <summary>
                VSCreativeMod.dll
            </summary>
        </member>
        <member name="P:Gantry.Core.GameAssemblies.VintagestoryAPI">
            <summary>
                VintagestoryAPI.dll
            </summary>
        </member>
        <member name="P:Gantry.Core.GameAssemblies.VintagestoryLib">
            <summary>
                VintagestoryLib.dll
            </summary>
        </member>
        <member name="P:Gantry.Core.GameAssemblies.VintagestoryExe">
            <summary>
                Vintagestory.exe
            </summary>
        </member>
        <member name="P:Gantry.Core.GameAssemblies.All">
            <summary>
                Retrieves a list of all the assemblies collated within the <see cref="T:Gantry.Core.GameAssemblies"/> class. 
            </summary>
        </member>
        <member name="M:Gantry.Core.GameAssemblies.FindType(System.Reflection.Assembly,System.String)">
            <summary>
                Scans for a specific type within one of the game's vanilla assemblies. Includes internal classes, and nested
                private classes. It can then be instantiated via Harmony.
            </summary>
            <param name="assembly">The assembly to scan within.</param>
            <param name="typeName">The name of the type to scan for.</param>
            <returns>The Type definition of the object being scanned for.</returns>
        </member>
        <member name="M:Gantry.Core.GameAssemblies.FindType(System.String)">
            <summary>
                Scans for a specific type within the game's vanilla assemblies. Includes internal classes, and nested private
                classes. It can then be instantiated via Harmony.
            </summary>
            <param name="typeName">The name of the type to scan for.</param>
            <returns>The Type definition of the object being scanned for.</returns>
        </member>
        <member name="T:Gantry.Core.GameContent.AssetEnum.NamedColour">
            <summary>
                The colours that can be used when adding waypoints to the map.
            </summary>
        </member>
        <member name="T:Gantry.Core.GameContent.AssetEnum.TraderType">
            <summary>
                The different types of trader that are available in the vanilla game.
            </summary>
        </member>
        <member name="T:Gantry.Core.GameContent.AssetEnum.WaypointIcon">
            <summary>
                The icons that can be used to add waypoints to the map.
            </summary>
        </member>
        <member name="T:Gantry.Core.GameContent.Blocks.BlockBehaviour`1">
            <summary>
                A behaviour that can be added to a block, to allow it to interact, or react, to external stimuli; or maintain an internal state.
            </summary>
            <typeparam name="TBlock">The type of the block.</typeparam>
            <seealso cref="T:Vintagestory.API.Common.BlockBehavior" />
        </member>
        <member name="P:Gantry.Core.GameContent.Blocks.BlockBehaviour`1.BlockInstance">
            <summary>
                The block to apply this behaviour to.
            </summary>
        </member>
        <member name="M:Gantry.Core.GameContent.Blocks.BlockBehaviour`1.#ctor(Vintagestory.API.Common.Block)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.GameContent.Blocks.BlockBehaviour`1"/> class.
            </summary>
            <param name="block">The block to apply this behaviour to.</param>
            <exception cref="T:System.InvalidCastException">This behaviour cannot be applied to the specified block.</exception>
        </member>
        <member name="T:Gantry.Core.GameContent.Blocks.BlockEntity`1">
            <summary>
                Basic class for block entities - a data structures to hold custom
                information for blocks, e.g. for chests to hold its contents.
            </summary>
            <typeparam name="TBlock">The type of the block.</typeparam>
            <seealso cref="T:Vintagestory.API.Common.BlockEntity" />
        </member>
        <member name="P:Gantry.Core.GameContent.Blocks.BlockEntity`1.OwnerBlock">
            <summary>
                The black that this entity applies to.
            </summary>
        </member>
        <member name="T:Gantry.Core.GameContent.Blocks.BlockEntityBehaviour`1">
            <summary>
                Basic class for block entities - a data structures to hold custom
                information for blocks, e.g. for chests to hold its contents.
            </summary>
            <typeparam name="TBlockEntity">The type of the block entity.</typeparam>
            <seealso cref="T:Vintagestory.API.Common.BlockEntityBehavior" />
        </member>
        <member name="P:Gantry.Core.GameContent.Blocks.BlockEntityBehaviour`1.Entity">
            <summary>
                The <see cref="T:Vintagestory.API.Common.BlockEntity"/> this behaviour is applied to.
            </summary>
        </member>
        <member name="M:Gantry.Core.GameContent.Blocks.BlockEntityBehaviour`1.#ctor(Vintagestory.API.Common.BlockEntity)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.GameContent.Blocks.BlockEntityBehaviour`1"/> class.
            </summary>
            <param name="blockEntity">The <see cref="T:Vintagestory.API.Common.BlockEntity"/> this behaviour is applied to.</param>
            <exception cref="T:System.InvalidCastException">This behaviour cannot be applied to the specified block entity.</exception>
        </member>
        <member name="T:Gantry.Core.GameContent.GUI.ButtonLayout">
            <summary>
            Determines which buttons to display on the <see cref="T:Gantry.Core.GameContent.GUI.MessageBox" /> GUI window.
            </summary>
        </member>
        <member name="F:Gantry.Core.GameContent.GUI.ButtonLayout.Ok">
            <summary>
                Display only an OK button.
            </summary>
        </member>
        <member name="F:Gantry.Core.GameContent.GUI.ButtonLayout.OkCancel">
            <summary>
                Display both an OK button, and a Cancel button.
            </summary>
        </member>
        <member name="T:Gantry.Core.GameContent.GUI.Elements.GuiElementImage">
            <summary>
                Represents a PNG file, that can be rendered to a GUI form. The image will stretch to fit the <see cref="T:Vintagestory.API.Client.ElementBounds"/> passed into the constructor.
            </summary>
            <seealso cref="T:Vintagestory.API.Client.GuiElementTextBase" />
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.Elements.GuiElementImage.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.AssetLocation,Cairo.Operator)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Core.GameContent.GUI.Elements.GuiElementImage"/> class.
            </summary>
            <param name="capi">The capi.</param>
            <param name="bounds">The bounds.</param>
            <param name="imageAsset">The image asset.</param>
            <param name="blendMode"></param>
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.Elements.GuiElementImage.ComposeElements(Cairo.Context,Cairo.ImageSurface)">
            <summary>
                Draws the image to the current context.
            </summary>
            <param name="context">The context to draw with.</param>
            <param name="originalSurface">The current surface used by the context. This will not be written to directly.</param>
        </member>
        <member name="T:Gantry.Core.GameContent.GUI.Elements.GuiElementTitleBar">
            <summary>
                A title bar for your GUI.  
            </summary>
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.Elements.GuiElementTitleBar.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.String,System.Action,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.GameContent.GUI.Elements.GuiElementTitleBar"/> class.
            </summary>
            <param name="capi">The Core Client API.</param>
            <param name="text">The text to display in the title bar.</param>
            <param name="onClose">The action to perform when the close button is pressed.</param>
            <param name="font">The font to use to display the text.</param>
            <param name="bounds">The bounds to render the title bar within.</param>
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.Elements.GuiElementTitleBar.ComposeTextElements(Cairo.Context,Cairo.ImageSurface)">
            <summary>
                Composes the text elements.
            </summary>
            <param name="ctx">The Cairo context to draw with.</param>
            <param name="surface">The Image Surface to draw on.</param>
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.Elements.GuiElementTitleBar.RenderInteractiveElements(System.Single)">
            <summary>
                Renders the element as an interactive element.
            </summary>
            <param name="deltaTime">The change in time since the last time this method was called.</param>
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.Elements.GuiElementTitleBar.OnMouseUpOnElement(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseEvent)">
            <summary>
                Called when a mouse button is released, while hovering over the element.
            </summary>
            <param name="capi">The capi.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.Elements.GuiElementTitleBar.Dispose">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:Gantry.Core.GameContent.GUI.GenericDialogue">
            <summary>
                Acts as a base class for basic, automatically sized dialogue boxes.
            </summary>
            <seealso cref="T:Vintagestory.API.Client.GuiDialog" />
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.GenericDialogue.#ctor(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Core.GameContent.GUI.GenericDialogue"/> class.
            </summary>
            <param name="capi">The client API.</param>
        </member>
        <member name="P:Gantry.Core.GameContent.GUI.GenericDialogue.ToggleKeyCombinationCode">
            <summary>
                The key combination string that toggles this GUI object.
            </summary>
            <value>The toggle key combination code.</value>
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.GenericDialogue.TryOpen">
            <summary>
                Attempts to open this dialogue.
            </summary>
            <returns>
                Returns <see langword="true"/> if the dialogue window was opened correctly; otherwise, returns <see langword="false"/>
            </returns>
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.GenericDialogue.Compose">
            <summary>
                Composes the GUI components for this instance.
            </summary>
        </member>
        <member name="P:Gantry.Core.GameContent.GUI.GenericDialogue.Title">
            <summary>
                Sets the title of the dialogue box.
            </summary>
            <value>The raw, pre-localised, string literal to use for the title of the dialogue box.</value>
        </member>
        <member name="P:Gantry.Core.GameContent.GUI.GenericDialogue.Alignment">
            <summary>
                Sets the alignment of the form on the screen, when set to Fixed mode.
            </summary>
            <value>The <see cref="T:Vintagestory.API.Client.EnumDialogArea"/> alignment to set the window as.</value>
        </member>
        <member name="P:Gantry.Core.GameContent.GUI.GenericDialogue.DialogueBounds">
            <summary>
                The overall maximum bounds of the dialogue box.
            </summary>
        </member>
        <member name="P:Gantry.Core.GameContent.GUI.GenericDialogue.Movable">
            <summary>
                Determines whether or not to allow the user to be able to move the form, within the bounds of the screen.
            </summary>
        </member>
        <member name="P:Gantry.Core.GameContent.GUI.GenericDialogue.Modal">
            <summary>
                Modal forms will remain the topmost form, and not allow throughput, until the form is closed.
            </summary>
        </member>
        <member name="P:Gantry.Core.GameContent.GUI.GenericDialogue.ModalTransparency">
            <summary>
                Applies a transparency effect to the surrounding modal form.
            </summary>
        </member>
        <member name="P:Gantry.Core.GameContent.GUI.GenericDialogue.ShowTitleBar">
            <summary>
                Determines whether or not to display a title bar for this dialogue box.
            </summary>
        </member>
        <member name="P:Gantry.Core.GameContent.GUI.GenericDialogue.TransparentBackground">
            <summary>
                Determines whether or not to display an opaque background.
            </summary>
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.GenericDialogue.RefreshValues">
            <summary>
                Refreshes the displayed values on the form.
            </summary>
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.GenericDialogue.ComposeBody(Vintagestory.API.Client.GuiComposer)">
            <summary>
                Composes the header for the GUI.
            </summary>
            <param name="composer">The composer.</param>
        </member>
        <member name="P:Gantry.Core.GameContent.GUI.GenericDialogue.DisableMouseGrab">
            <summary>
                Gets whether ability to grab the mouse cursor is disabled while
                this dialog is opened. For example, the escape menu. (Default: false)
            </summary>
        </member>
        <member name="T:Gantry.Core.GameContent.GUI.Helpers.ElementBoundsEx">
            <summary>
                Extension methods to aid adding elements to GUI forms.
            </summary>
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.Helpers.ElementBoundsEx.ForPngImage(Vintagestory.API.Common.AssetLocation,System.Single)">
            <summary>
                Provides an <see cref="T:Vintagestory.API.Client.ElementBounds"/> with a fixed size, based on the dimensions of the image file represented within the <see cref="T:Vintagestory.API.Common.AssetLocation"/>.
            </summary>
            <param name="imageAsset">The image asset to determine the dimensions of.</param>
            <param name="scale">Scales the width and height of the returned <see cref="T:Vintagestory.API.Client.ElementBounds"/> by the provided value.</param>
            <returns>An instance of <see cref="T:Vintagestory.API.Client.ElementBounds"/>, with a fixed size, and an origin position of (0, 0).</returns>
        </member>
        <member name="T:Gantry.Core.GameContent.GUI.Helpers.GuiComposerHelpers">
            <summary>
                Extension methods to aid when composing GUIs.
            </summary>
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.Helpers.GuiComposerHelpers.AddTitleBarWithNoMenu(Vintagestory.API.Client.GuiComposer,System.String,System.Action,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds)">
            <summary>
                Adds a dialogue title bar to the GUI, with no "Movable" menu bar.  
            </summary>
            <param name="composer"></param>
            <param name="text">The text of the title bar.</param>
            <param name="onClose">The event fired when the title bar is closed.</param>
            <param name="font">The font of the title bar.</param>
            <param name="bounds">The bounds of the title bar.</param>
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.Helpers.GuiComposerHelpers.AddStaticImage(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Common.AssetLocation,Vintagestory.API.Client.ElementBounds,Cairo.Operator)">
            <summary>
                Adds a PNG image to the composer, scaled to the dimensions of the containing <see cref="T:Vintagestory.API.Client.ElementBounds"/>. 
            </summary>
            <param name="composer">The composer to add the image to.</param>
            <param name="imageAsset">The image asset to add.</param>
            <param name="bounds">The containing <see cref="T:Vintagestory.API.Client.ElementBounds"/>. This defines the dimensions of the image to load.</param>
            <param name="blendMode">The mode with which to . Defaults to <see cref="F:Cairo.Operator.Over"/>.</param>
            <returns>GuiComposer.</returns>
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.Helpers.GuiComposerHelpers.AddHoverTextForCellList``1(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Client.ElementBounds)">
            <summary>
                Adds hover-text for each cell within a cell list, based on the content of its `HoverText` property.
            </summary>
            <typeparam name="TCellEntry">The type of cell entry the list is populated with.</typeparam>
            <param name="composer">The composer the cell list belongs to.</param>
            <param name="cellListName">The name, given to the cell list, to identify it within the composer.</param>
            <param name="clippedBounds">The bounds to clip the hover-text elements to.</param>
            <returns>The same instance of <see cref="T:Vintagestory.API.Client.GuiComposer"/> that this extension method was called on.</returns>
            <remarks>
                Ripped from the main menu of the game, and genericised, to form an extension method.
                Originally, this code was made to create hover-text for save-game entries.
            </remarks>
        </member>
        <member name="T:Gantry.Core.GameContent.GUI.MessageBox">
            <summary>
                A generic message box that can be used for basic confirmation within the game.
            </summary>
            <seealso cref="T:Gantry.Core.GameContent.GUI.GenericDialogue" />
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.MessageBox.Show(System.String,System.String,Gantry.Core.GameContent.GUI.ButtonLayout,System.Action,System.Action)">
            <summary>
                Displays a message box that has a message, title bar caption, and button; and that runs option callback options for positive and negative responses.
            </summary>
            <param name="title">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="message">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="buttons">A <see cref="T:Gantry.Core.GameContent.GUI.ButtonLayout"/> value that specifies which button or buttons to display.</param>
            <param name="onOkButtonPressed">The <see cref="T:System.Action"/> to be invoked if the user selects the confirm option.</param>
            <param name="onCancelButtonPressed">The <see cref="T:System.Action"/> to be invoked if the user selects the cancel option.</param>
        </member>
        <member name="M:Gantry.Core.GameContent.GUI.MessageBox.ComposeBody(Vintagestory.API.Client.GuiComposer)">
            <summary>
                Composes the header for the GUI.
            </summary>
            <param name="composer">The composer.</param>
        </member>
        <member name="T:Gantry.Core.GameContent.Shaders.IGenericRenderer`1">
            <summary>
                Represents a renderer, used to render something on to the client's screen.
            </summary>
        </member>
        <member name="P:Gantry.Core.GameContent.Shaders.IGenericRenderer`1.Shader">
            <summary>
                The <see cref="T:Gantry.Core.GameContent.Shaders.IGenericShaderProgram"/> instance to use to render graphics to the screen.
            </summary>
        </member>
        <member name="T:Gantry.Core.GameContent.Shaders.IGenericShaderProgram">
            <summary>
                Represents a generic shader program, that allows values to be passed to the shader, every frame.
            </summary>
            <seealso cref="T:Vintagestory.API.Client.IShaderProgram" />
        </member>
        <member name="M:Gantry.Core.GameContent.Shaders.IGenericShaderProgram.UpdateUniforms">
            <summary>
                Runs before every frame, to set the values for the shader pass.
            </summary>
        </member>
        <member name="T:Gantry.Core.LangEx">
            <summary>
                Extended functionality for the <see cref="T:Vintagestory.API.Config.Lang"/> class.
            </summary>
        </member>
        <member name="M:Gantry.Core.LangEx.#cctor">
            <summary>
                Initialises the <see cref="T:Gantry.Core.LangEx"/> class.
            </summary>
        </member>
        <member name="M:Gantry.Core.LangEx.BooleanString(System.Boolean)">
            <summary>
                Returns a localised string based on the state of a boolean variable.
            </summary>
            <param name="state">The boolean value to localise.</param>
            <returns>A localised string representation of the boolean value.</returns>
        </member>
        <member name="M:Gantry.Core.LangEx.ConfirmationString(System.String)">
            <summary>
                Returns a localised string.
            </summary>
            <param name="value">The value to localise.</param>
            <returns>A localised string representation of the boolean value.</returns>
        </member>
        <member name="M:Gantry.Core.LangEx.FullMonthString(System.DateTime)">
            <summary>
                Returns a localised string based on the month value within a <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> object to localise.</param>
            <returns>A localised string representation of the full name of the month of the year.</returns>
        </member>
        <member name="M:Gantry.Core.LangEx.AbbreviatedMonthString(System.DateTime)">
            <summary>
                Returns a localised string based on the month value within a <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> object to localise.</param>
            <returns>A localised string representation of the abbreviated name of the month of the year.</returns>
        </member>
        <member name="M:Gantry.Core.LangEx.FullDayString(System.DateTime)">
            <summary>
                Returns a localised string based on the day value within a <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> object to localise.</param>
            <returns>A localised string representation of the full name of the day of the week.</returns>
        </member>
        <member name="M:Gantry.Core.LangEx.AbbreviatedDayString(System.DateTime)">
            <summary>
                Returns a localised string based on the day value within a <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> object to localise.</param>
            <returns>A localised string representation of the abbreviated name of the day of the week.</returns>
        </member>
        <member name="M:Gantry.Core.LangEx.FeatureString(System.String,System.String,System.Object[])">
            <summary>
                Returns a localised string.
            </summary>
            <param name="featureName">The name of the feature.</param>
            <param name="path">The path to the feature based string to translate.</param>
            <param name="args">The arguments to pass to the lang file.</param>
            <returns>A localised string representation of the abbreviated name of the day of the week.</returns>
        </member>
        <member name="M:Gantry.Core.LangEx.FeatureCode(System.String,System.String)">
            <summary>
                Returns a localised string.
            </summary>
            <param name="featureName">The name of the feature.</param>
            <param name="path">The path to the feature based string to translate.</param>
            <returns>A localised string representation of the abbreviated name of the day of the week.</returns>
        </member>
        <member name="M:Gantry.Core.LangEx.Get(System.String)">
            <summary>
                Returns a localised string.
            </summary>
            <param name="path">The path to the feature based string to translate.</param>
            <returns>A localised string from the current mod's language files.</returns>
        </member>
        <member name="M:Gantry.Core.LangEx.Get(System.String,System.Object[])">
            <summary>
                Returns a localised string.
            </summary>
            <param name="path">The path to the feature based string to translate.</param>
            <param name="args">The arguments to pass to the lang file.</param>
            <returns>A localised string from the current mod's language files.</returns>
        </member>
        <member name="M:Gantry.Core.LangEx.Pluralise(System.String,System.Int32)">
            <summary>
                Returns a string, based on whether the specified value if greater than one (1).
            </summary>
            <param name="value">The value.</param>
            <param name="path">The path to the feature based string to translate.</param>
            <returns>A localised string from the mod's language files.</returns>
        </member>
        <member name="M:Gantry.Core.LangEx.ModTitle">
            <summary>
                Returns the title of the mod.
            </summary>
            <returns>A localised string from the mod's language files.</returns>
        </member>
        <member name="T:Gantry.Core.Maths.Enum.HermiteTension">
            <summary>
                How sharply does the curve bend?
                The tension is used to calculate the tangents, which must be in the interval [-1, 1].
                In some sense, this can be interpreted as the "length" of the tangent.
            </summary>
        </member>
        <member name="F:Gantry.Core.Maths.Enum.HermiteTension.High">
            <summary>
                High tension yields all zero tangents.
            </summary>
        </member>
        <member name="F:Gantry.Core.Maths.Enum.HermiteTension.Normal">
            <summary>
                Produces a spline much closer to a Catmull–Rom spline.
            </summary>
        </member>
        <member name="F:Gantry.Core.Maths.Enum.HermiteTension.Low">
            <summary>
                Low tension yields all one tangents.
            </summary>
        </member>
        <member name="T:Gantry.Core.Maths.Extensions.Vec3dExtensions">
            <summary>
                Extension methods for dealing with vectors.
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Extensions.Vec3dExtensions.Scale(Vintagestory.API.MathTools.Vec3d,System.Double)">
            <summary>
                Scales the vector by the specified scale factor.
            </summary>
            <param name="vec">The vector to scale.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>A new instance of <see cref="T:Vintagestory.API.MathTools.Vec3d"/>, scaled from the original, by the given factor.</returns>
        </member>
        <member name="T:Gantry.Core.Maths.GameMathsEx">
            <summary>
                An even larger set of extremely useful mathematical functions.
            </summary>
        </member>
        <member name="P:Gantry.Core.Maths.GameMathsEx.I">
            <summary>
                The mathematical constant, i, which is equal to the sqrt. of -1.
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.GameMathsEx.DistributiveProduct(Vintagestory.API.MathTools.Vec2f,Vintagestory.API.MathTools.Vec2f)">
            <summary>
                Calculates the distributive product of two binomials.
            </summary>
            <param name="a">The first binomials.</param>
            <param name="b">The second binomials.</param>
            <returns>The distributive product of two binomials.</returns>
        </member>
        <member name="M:Gantry.Core.Maths.GameMathsEx.DistributiveProduct(Vintagestory.API.MathTools.Vec2d,Vintagestory.API.MathTools.Vec2d)">
            <summary>
                Calculates the distributive product of two binomials.
            </summary>
            <param name="a">The first binomials.</param>
            <param name="b">The second binomials.</param>
            <returns>The distributive product of two binomials.</returns>
        </member>
        <member name="M:Gantry.Core.Maths.GameMathsEx.DistributiveProduct(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Calculates the distributive product of two binomials.
            </summary>
            <param name="a1">The first index of the first binomial.</param>
            <param name="a2">The second index of the first binomial.</param>
            <param name="b1">The first index of the second binomial.</param>
            <param name="b2">The second index of the second binomial.</param>
            <returns>The distributive product of two binomials.</returns>
        </member>
        <member name="M:Gantry.Core.Maths.GameMathsEx.DistributiveProduct(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Calculates the distributive product of two binomials.
            </summary>
            <param name="a1">The first index of the first binomial.</param>
            <param name="a2">The second index of the first binomial.</param>
            <param name="b1">The first index of the second binomial.</param>
            <param name="b2">The second index of the second binomial.</param>
            <returns>The distributive product of two binomials.</returns>
        </member>
        <member name="M:Gantry.Core.Maths.GameMathsEx.ClampWrap(System.Single,System.Single,System.Single)">
            <summary>
                Clamps a value between two points, by continuously wrapping the value
                around the minimum and maximum points, until the value falls within range.
                <br/><br/>For example, ClampWrap(14, 5, 12) = 7.
            </summary>
            <param name="val">The value to wrap.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Gantry.Core.Maths.GameMathsEx.Increment(System.Byte[],Vintagestory.API.MathTools.Vec3f)">
            <summary>
                Increments the array by a specified amount, for each individual index.
            </summary>
            <param name="source">The source array.</param>
            <param name="factor">The values to increment each index by.</param>
            <returns></returns>
        </member>
        <member name="M:Gantry.Core.Maths.GameMathsEx.Increment(System.Byte[],System.Single)">
            <summary>
                Increments the array by a specified amount, for all indices.
            </summary>
            <param name="source">The source array.</param>
            <param name="factor">The value to increment each index by.</param>
        </member>
        <member name="M:Gantry.Core.Maths.GameMathsEx.Brighten(Vintagestory.API.MathTools.Vec3f,Vintagestory.API.MathTools.Vec3f)">
            <summary>
                Brighten a colour by a specific amount.
            </summary>
            <param name="source">The source array.</param>
            <param name="factor">The value to brighten each index by.</param>
        </member>
        <member name="M:Gantry.Core.Maths.GameMathsEx.ScaleBy(Vintagestory.API.MathTools.Vec3f,Vintagestory.API.MathTools.Vec3f)">
            <summary>
                ScaleBy a vector by a specific amount.
            </summary>
            <param name="source">The source array.</param>
            <param name="factor">The value to scale each index by.</param>
        </member>
        <member name="M:Gantry.Core.Maths.GameMathsEx.ScaleBy(Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3d)">
            <summary>
                ScaleBy a vector by a specific amount.
            </summary>
            <param name="source">The source array.</param>
            <param name="factor">The value to scale each index by.</param>
        </member>
        <member name="M:Gantry.Core.Maths.GameMathsEx.ScaleBy(Vintagestory.API.MathTools.Vec3f,System.Double[])">
            <summary>
                ScaleBy a vector by a specific amount.
            </summary>
            <param name="source">The source array.</param>
            <param name="factor">The value to scale each index by.</param>
        </member>
        <member name="M:Gantry.Core.Maths.GameMathsEx.ScaleBy(Vintagestory.API.MathTools.Vec3d,System.Double[])">
            <summary>
                ScaleBy a vector by a specific amount.
            </summary>
            <param name="source">The source array.</param>
            <param name="factor">The value to scale each index by.</param>
        </member>
        <member name="M:Gantry.Core.Maths.GameMathsEx.ScaleBy(System.Byte[],Vintagestory.API.MathTools.Vec3f)">
            <summary>
                ScaleBy a vector by a specific amount.
            </summary>
            <param name="source">The source array.</param>
            <param name="factor">The value to scale each index by.</param>
        </member>
        <member name="M:Gantry.Core.Maths.GameMathsEx.ScaleBy(System.Byte[],System.Single)">
            <summary>
                ScaleBy a vector by a specific amount.
            </summary>
            <param name="source">The source array.</param>
            <param name="factor">The value to scale each index by.</param>
        </member>
        <member name="T:Gantry.Core.Maths.Interpolation.CosineInterpolation">
            <summary>
                Cosine Interpolation
            </summary>
            <seealso cref="T:Gantry.Core.Maths.Interpolation.InterpolationBase" />
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.CosineInterpolation.#ctor(System.Double[],System.Double[])">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Interpolation.CosineInterpolation"/> class.
            </summary>
            <param name="times">The times.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.CosineInterpolation.#ctor(System.Double[])">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Interpolation.CosineInterpolation"/> class.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.CosineInterpolation.ValueAt(System.Double,System.Int32,System.Int32)">
            <summary>
                Calculates the value at a specific point between two nodes.
            </summary>
            <param name="mu">The fractional point between with two nodes.</param>
            <param name="pointIndex">The start node index.</param>
            <param name="pointIndexNext">The end node index.</param>
            <returns>
            A <see cref="T:System.Double" /> value that represents a specific point along a curve between two nodes of a path.
            </returns>
        </member>
        <member name="T:Gantry.Core.Maths.Interpolation.CubicCatmullInterpolation">
            <summary>
                Cubic Catmull Interpolation
            </summary>
            <seealso cref="T:Gantry.Core.Maths.Interpolation.InterpolationBase" />
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.CubicCatmullInterpolation.#ctor(System.Double[],System.Double[])">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Interpolation.CubicCatmullInterpolation"/> class.
            </summary>
            <param name="times">The times.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.CubicCatmullInterpolation.#ctor(System.Double[])">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Interpolation.CubicCatmullInterpolation"/> class.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.CubicCatmullInterpolation.GetValue(System.Int32)">
            <summary>
                Gets the value at a specific node within the path.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.CubicCatmullInterpolation.ValueAt(System.Double,System.Int32,System.Int32)">
            <summary>
                Calculates the value at a specific point between two nodes.
            </summary>
            <param name="mu">The fractional point between with two nodes.</param>
            <param name="pointIndex">The start node index.</param>
            <param name="pointIndexNext">The end node index.</param>
            <returns>
                A <see cref="T:System.Double" /> value that represents a specific point along a curve between two nodes of a path.
            </returns>
        </member>
        <member name="T:Gantry.Core.Maths.Interpolation.CubicInterpolation">
            <summary>
                Cubic Interpolation
            </summary>
            <seealso cref="T:Gantry.Core.Maths.Interpolation.InterpolationBase" />
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.CubicInterpolation.#ctor(System.Double[],System.Double[])">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Interpolation.CubicInterpolation"/> class.
            </summary>
            <param name="times">The times.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.CubicInterpolation.#ctor(System.Double[])">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Interpolation.CubicInterpolation"/> class.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.CubicInterpolation.GetValue(System.Int32)">
            <summary>
                Gets the value at a specific node within the path.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.CubicInterpolation.ValueAt(System.Double,System.Int32,System.Int32)">
            <summary>
                Calculates the value at a specific point between two nodes.
            </summary>
            <param name="mu">The fractional point between with two nodes.</param>
            <param name="pointIndex">The start node index.</param>
            <param name="pointIndexNext">The end node index.</param>
            <returns>
                A <see cref="T:System.Double" /> value that represents a specific point along a curve between two nodes of a path.
            </returns>
        </member>
        <member name="T:Gantry.Core.Maths.Interpolation.HermiteInterpolation">
            <summary>
                In numerical analysis, Hermite interpolation, named after Charles Hermite, is a method of polynomial 
                interpolation, which generalizes Lagrange interpolation. Lagrange interpolation allows computing a
                polynomial of degree less than n that takes the same value at n given points as a given function. 
                
                Instead, Hermite interpolation computes a polynomial of degree less than mn such that the
                polynomial and its m − 1 first derivatives have the same values at n given points as a given
                function and its m − 1 first derivatives. 
                
                Hermite's method of interpolation is closely related to the Newton's interpolation method,
                in that both are derived from the calculation of divided differences. However, there other
                methods for computing a Hermite interpolating polynomial.One can use linear algebra, by taking
                the coefficients of the interpolating polynomial as unknowns, and writing as linear equations
                the constraints that the interpolating polynomial must satisfy.
            </summary>
            <remarks>For more information: https://en.wikipedia.org/wiki/Hermite_interpolation</remarks>
            <seealso cref="T:Gantry.Core.Maths.Interpolation.InterpolationBase" />
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.HermiteInterpolation.#ctor(System.Double[],System.Double[],System.Double,Gantry.Core.Maths.Enum.HermiteTension)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Interpolation.HermiteInterpolation"/> class.
            </summary>
            <param name="times">How changes in speed and direction, as we traverse the path.</param>
            <param name="points">The points that dictate the angle of the curves within a path.</param>
            <param name="bias">What is the direction of the curve as it passes through the key-point?</param>
            <param name="tension">How sharply does the curve bend?</param>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.HermiteInterpolation.#ctor(System.Double,Gantry.Core.Maths.Enum.HermiteTension,System.Double[])">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Interpolation.HermiteInterpolation"/> class.
            </summary>
            <param name="bias">What is the direction of the curve as it passes through the key-point?</param>
            <param name="tension">How sharply does the curve bend?</param>
            <param name="points">The points that dictate the angle of the curves within a path.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.HermiteInterpolation.#ctor(System.Double[],System.Double[],Gantry.Core.Maths.Enum.HermiteTension)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Interpolation.HermiteInterpolation"/> class.
            </summary>
            <param name="times">How changes in speed and direction, as we traverse the path.</param>
            <param name="points">The points that dictate the angle of the curves within a path.</param>
            <param name="tension">How sharply does the curve bend?</param>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.HermiteInterpolation.#ctor(Gantry.Core.Maths.Enum.HermiteTension,System.Double[])">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Interpolation.HermiteInterpolation"/> class.
            </summary>
            <param name="tension">How sharply does the curve bend?</param>
            <param name="points">The points that dictate the angle of the curves within a path.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.HermiteInterpolation.#ctor(System.Double[])">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Interpolation.HermiteInterpolation"/> class.
            </summary>
            <param name="points">The points that dictate the angle of the curves within a path.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.HermiteInterpolation.ValueAt(System.Double,System.Int32,System.Int32)">
            <summary>
                Calculates the value at a specific point between two nodes.
            </summary>
            <param name="mu">The fractional point between with two nodes.</param>
            <param name="pointIndex">The start node index.</param>
            <param name="pointIndexNext">The end node index.</param>
            <returns>A <see cref="T:System.Double"/> value that represents a specific point along a curve between two nodes of a path.</returns>
        </member>
        <member name="T:Gantry.Core.Maths.Interpolation.IInterpolator">
            <summary>
                Represents a specific form of interpolation between two nodes within a path.
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.IInterpolator.ValueAt(System.Double,System.Int32,System.Int32)">
            <summary>
                Calculates the value at a specific point between two nodes.
            </summary>
            <param name="mu">The fractional point between with two nodes.</param>
            <param name="pointIndex">The start node index.</param>
            <param name="pointIndexNext">The end node index.</param>
            <returns>A <see cref="T:System.Double"/> value that represents a specific point along a curve between two nodes of a path.</returns>
        </member>
        <member name="T:Gantry.Core.Maths.Interpolation.InterpolationBase">
            <summary>
                Acts as a base class for each type of interpolation.
            </summary>
            <seealso cref="T:Gantry.Core.Maths.Interpolation.IInterpolator" />
        </member>
        <member name="P:Gantry.Core.Maths.Interpolation.InterpolationBase.Points">
            <summary>
                Gets the list of key points, or nodes, along a path.
            </summary>
        </member>
        <member name="P:Gantry.Core.Maths.Interpolation.InterpolationBase.PointVectors">
            <summary>
                Gets the list of vectors, along a path, denoting change of speed, or direction.
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.InterpolationBase.#ctor(System.Double[],System.Double[])">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Interpolation.InterpolationBase"/> class.
            </summary>
            <param name="times">The times.</param>
            <param name="points">The points.</param>
            <exception cref="T:System.ArgumentException">
            At least two points are needed! - points
            or
            Invalid times array! - times
            </exception>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.InterpolationBase.#ctor(System.Double[])">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Interpolation.InterpolationBase"/> class.
            </summary>
            <param name="points">The points.</param>
            <exception cref="T:System.ArgumentException">At least two points are needed! - points</exception>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.InterpolationBase.ValueAt(System.Double,System.Int32,System.Int32)">
            <summary>
                Calculates the value at a specific point between two nodes.
            </summary>
            <param name="mu">The fractional point between with two nodes.</param>
            <param name="pointIndex">The start node index.</param>
            <param name="pointIndexNext">The end node index.</param>
            <returns>
                A <see cref="T:System.Double" /> value that represents a specific point along a curve between two nodes of a path.
            </returns>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.InterpolationBase.GetValue(System.Int32)">
            <summary>
                Gets the value at a specific node within the path.
            </summary>
                <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.InterpolationBase.ValueAt(System.Double)">
            <summary>
                Calculates the value at a specific point along the overall path.
            </summary>
            <param name="point">The fractional point, between 0..1 along the overall path.</param>
            <returns>
                A <see cref="T:System.Double" /> value that represents a specific point along the overall path.
            </returns>
        </member>
        <member name="T:Gantry.Core.Maths.Interpolation.LinearInterpolation">
            <summary>
                Interpolation between two points, in a straight line.
            </summary>
            <seealso cref="T:Gantry.Core.Maths.Interpolation.InterpolationBase" />
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.LinearInterpolation.#ctor(System.Double[],System.Double[])">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Interpolation.LinearInterpolation"/> class.
            </summary>
            <param name="times">How changes in speed and direction, as we traverse the path.</param>
            <param name="points">The points that dictate the angle of the curves within a path.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.LinearInterpolation.#ctor(System.Double[])">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Interpolation.LinearInterpolation"/> class.
            </summary>
            <param name="points">The points that dictate the angle of the curves within a path.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Interpolation.LinearInterpolation.ValueAt(System.Double,System.Int32,System.Int32)">
            <summary>
                Calculates the value at a specific point between two nodes.
            </summary>
            <param name="mu">The fractional point between with two nodes.</param>
            <param name="pointIndex">The start node index.</param>
            <param name="pointIndexNext">The end node index.</param>
            <returns>
                A <see cref="T:System.Double" /> value that represents a specific point along a curve between two nodes of a path.
            </returns>
        </member>
        <member name="T:Gantry.Core.Maths.Matrix.Matrix3d">
            <summary>
                A double precision floating point 3 by 3 matrix.
                Primarily to support rotations
            </summary>
        </member>
        <member name="F:Gantry.Core.Maths.Matrix.Matrix3d.M00">
            <summary>
                The first element of the first row.
            </summary>
        </member>
        <member name="F:Gantry.Core.Maths.Matrix.Matrix3d.M01">
            <summary>
                The second element of the first row.
            </summary>
        </member>
        <member name="F:Gantry.Core.Maths.Matrix.Matrix3d.M02">
            <summary>
                The third element of the first row.
            </summary>
        </member>
        <member name="F:Gantry.Core.Maths.Matrix.Matrix3d.M10">
            <summary>
                The first element of the second row.
            </summary>
        </member>
        <member name="F:Gantry.Core.Maths.Matrix.Matrix3d.M11">
            <summary>
                The second element of the second row.
            </summary>
        </member>
        <member name="F:Gantry.Core.Maths.Matrix.Matrix3d.M12">
            <summary>
                The third element of the second row.
            </summary>
        </member>
        <member name="F:Gantry.Core.Maths.Matrix.Matrix3d.M20">
            <summary>
                The first element of the third row.
            </summary>
        </member>
        <member name="F:Gantry.Core.Maths.Matrix.Matrix3d.M21">
            <summary>
                The second element of the third row.
            </summary>
        </member>
        <member name="F:Gantry.Core.Maths.Matrix.Matrix3d.M22">
            <summary>
                The third element of the third row.
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.Maths.Matrix.Matrix3d" /> class.
            </summary>
            <param name="m00">Element [0][0]</param>
            <param name="m01">Element [0][1]</param>
            <param name="m02">Element [0][2]</param>
            <param name="m10">Element [1][0]</param>
            <param name="m11">Element [1][1]</param>
            <param name="m12">Element [1][2]</param>
            <param name="m20">Element [2][0]</param>
            <param name="m21">Element [2][1]</param>
            <param name="m22">Element [2][2]</param>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.#ctor(System.Collections.Generic.IReadOnlyList{System.Double})">
            <summary>
                Constructs and initializes a Matrix3d from the specified 9 element array.
                M00 = m[0], M01 = m[1], etc.
            </summary>
            <param name="m">The array of length 9 containing in order.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.#ctor(Gantry.Core.Maths.Matrix.Matrix3d)">
            <summary>
                Constructs a new matrix with the same values as the Matrix3d parameter.
                @param m1 The source matrix.
            </summary>
            <param name="m1">The m1.</param>
        </member>
        <member name="P:Gantry.Core.Maths.Matrix.Matrix3d.Zero">
            <summary>
                Constructs and initialises a Matrix3d to all zeros.
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.ToString">
            <summary>
                Returns a string that contains the values of this Matrix3d.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.SetIdentity">
            <summary>
                Sets this Matrix3d to identity.
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.SetScale(System.Double)">
            <summary>
                Sets the scale component of the current matrix by factoring out the
                current scale (by doing an SVD) from the rotational component and
                multiplying by the new scale.
            </summary>
            <param name="scale">The amount to scale by.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.GetElement(System.Int32,System.Int32)">
            <summary>
                Retrieves the value at the specified row and column of this matrix.
            </summary>
            <param name="row">The row number to be retrieved (zero indexed).</param>
            <param name="column">The column number to be retrieved (zero indexed).</param>
            <returns>The value at the indexed element.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Index outside the bounds of the matrix. Row: {row}, Column: {column}</exception>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.GetRow(System.Int32,System.Double[])">
            <summary>
                Copies the matrix values in the specified row into the
                array parameter.
                @param row the matrix row
                @param v The array into which the matrix row values will be copied
            </summary>
            <param name="row">The row.</param>
            <param name="v">The v.</param>
            <exception cref="T:System.IndexOutOfRangeException">row must be 0 to 2 and is " + row</exception>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.GetRow(System.Int32,Vintagestory.API.MathTools.Vec3d)">
            <summary>
                Copies the matrix values in the specified row into the
                vector parameter.
                @param row the matrix row
                @param v The vector into which the matrix row values will be copied
            </summary>
            <param name="row">The row.</param>
            <param name="v">The v.</param>
            <exception cref="T:System.IndexOutOfRangeException">row must be 0 to 2 and is " + row</exception>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.GetColumn(System.Int32,Vintagestory.API.MathTools.Vec3d)">
            <summary>
                Copies the matrix values in the specified column into the vector
                parameter.
                @param column the matrix column
                @param v The vector into which the matrix row values will be copied
            </summary>
            <param name="column">The column.</param>
            <param name="v">The v.</param>
            <exception cref="T:System.IndexOutOfRangeException">column must be 0 to 2 and is " + column</exception>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.GetColumn(System.Int32,System.Double[])">
            <summary>
                Copies the matrix values in the specified column into the array
                parameter.
                @param column the matrix column
                @param v The array into which the matrix row values will be copied
            </summary>
            <param name="column">The column.</param>
            <param name="v">The v.</param>
            <exception cref="T:System.IndexOutOfRangeException">column must be 0 to 2 and is " + column</exception>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.GetScale">
            <summary>
                Performs an SVD normalization of this matrix to calculate and return the
                uniform scale factor. This matrix is not modified.
                @return the scale factor of this matrix
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.Add(System.Double)">
            <summary>
                Adds a scalar to each component of this matrix.
                @param scalar The scalar adder.
            </summary>
            <param name="scalar">The scalar.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.Sum(Gantry.Core.Maths.Matrix.Matrix3d[])">
            <summary>
                Sets the value of this matrix to the matrix sum of matrices.
            </summary>
            <param name="matrices">The list of matrices to sum together.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.Add(Gantry.Core.Maths.Matrix.Matrix3d)">
            <summary>
                Sets the value of this matrix to sum of itself and matrix m1.
                @param m1 the other matrix
            </summary>
            <param name="m1">The m1.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.Transpose">
            <summary>
                Sets the value of this matrix to its transpose.
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.Invert">
            <summary>
                Sets the value of this matrix to its inverse.
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.Determinant">
            <summary>
                Computes the determinant of this matrix.
                @return the determinant of the matrix
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.Scale(System.Double)">
            <summary>
                Sets the value of this matrix to a scale matrix with the
                passed scale amount.
                @param scale the scale factor for the matrix
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.RotX(System.Double)">
            <summary>
                Sets the value of this matrix to a rotation matrix about the x axis
                by the passed angle.
                @param angle the angle to rotate about the X axis in radians
            </summary>
            <param name="angle">The angle.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.RotY(System.Double)">
            <summary>
                Sets the value of this matrix to a rotation matrix about the y axis
                by the passed angle.
                @param angle the angle to rotate about the Y axis in radians
            </summary>
            <param name="angle">The angle.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.RotZ(System.Double)">
            <summary>
                Sets the value of this matrix to a rotation matrix about the z axis
                by the passed angle.
                @param angle the angle to rotate about the Z axis in radians
            </summary>
            <param name="angle">The angle.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.Mul(System.Double)">
            <summary>
                Multiplies each element of this matrix by a scalar.
                @param scalar The scalar multiplier.
            </summary>
            <param name="scalar">The scalar.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.MulTransposeRight(Gantry.Core.Maths.Matrix.Matrix3d,Gantry.Core.Maths.Matrix.Matrix3d)">
            <summary>
                Multiplies matrix m1 times the transpose of matrix m2, and places the
                result into this.
                @param m1 The matrix on the left hand side of the multiplication
                @param m2 The matrix on the right hand side of the multiplication
            </summary>
            <param name="m1">The m1.</param>
            <param name="m2">The m2.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.MulTransposeLeft(Gantry.Core.Maths.Matrix.Matrix3d,Gantry.Core.Maths.Matrix.Matrix3d)">
            <summary>
                Multiplies the transpose of matrix m1 times matrix m2, and places the
                result into this.
                @param m1 The matrix on the left hand side of the multiplication
                @param m2 The matrix on the right hand side of the multiplication
            </summary>
            <param name="m1">The m1.</param>
            <param name="m2">The m2.</param>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.Normalise">
            <summary>
                Performs singular value decomposition normalisation of this matrix.
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.NormaliseCp">
            <summary>
                Perform cross product normalisation of this matrix.
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.Equals(Gantry.Core.Maths.Matrix.Matrix3d)">
            <summary>
                Returns true if all of the data members of Matrix3d m1 are
                equal to the corresponding data members in this Matrix3d.
                @param m1 The matrix with which the comparison is made.
                @return true or false
            </summary>
            <param name="m1">The m1.</param>
            <returns>boolean.</returns>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.Equals(System.Object)">
            <summary>
                Returns true if the Object o1 is of type Matrix3d and all of the data
                members of t1 are equal to the corresponding data members in this
                Matrix3d.
                @param o1 the object with which the comparison is made.
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.EpsilonEquals(Gantry.Core.Maths.Matrix.Matrix3d,System.Double)">
            <summary>
                Returns true if the L-infinite distance between this matrix and matrix
                m1 is less than or equal to the epsilon parameter, otherwise returns
                false. The L-infinite distance is equal to MAX[i=0,1,2,3 ; j=0,1,2,3 ;
                abs(this.m(i,j) - m1.m(i,j)]
                @param m1 The matrix to be compared to this matrix
                @param epsilon the threshold value
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.Negate">
            <summary>
                Negates the value of this matrix: this = -this.
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.Transform(Vintagestory.API.MathTools.Vec3d)">
            <summary>
                Transform the vector vec using this Matrix3d and place the result back into vec.
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.Transform(Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3d)">
            <summary>
                Transform the vector vec using this Matrix3d and place the result into vecOut.
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.NormaliseSvd(System.Nullable{Gantry.Core.Maths.Matrix.Matrix3d},System.Double@)">
            <summary>
                Performs SVD on this matrix and gets scale and rotation.
                Rotation is placed into rot.
                @param rot the rotation factor.
                @return scale factor
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.FromQuaternion(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Converts a quaternion, to a <see cref="T:Gantry.Core.Maths.Matrix.Matrix3d"/>
            </summary>
        </member>
        <member name="M:Gantry.Core.Maths.Matrix.Matrix3d.FromAxisAngle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Converts axis angles to a <see cref="T:Gantry.Core.Maths.Matrix.Matrix3d"/>
            </summary>
        </member>
        <member name="T:Gantry.Core.ModEx">
            <summary>
                Provides global access to mod information, and metadata.
            </summary>
        </member>
        <member name="P:Gantry.Core.ModEx.ModAppSide">
            <summary>
                Gets the side designated within the mod information.
            </summary>
            <exception cref="T:Gantry.Core.Diagnostics.GantryException">Cannot determine app-side before `ApiEx` is intialised.</exception>
        </member>
        <member name="P:Gantry.Core.ModEx.ModAssembly">
            <summary>
                The main assembly for the mod that initialised the Gantry MDK.
            </summary>
            HACK: Potential Integration Bug: Is this global, static object shared among disparate mods?
        </member>
        <member name="P:Gantry.Core.ModEx.DebugMode">
            <summary>
                Gets or sets a value indicating whether to run Gantry in debug mode. This enables detailed logging, within the game log files.
            </summary>
            <value>
              <c>true</c> if debug mode is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Gantry.Core.ModEx.ModInfo">
            <summary>
                The mod's metadata.
            </summary>
        </member>
        <member name="P:Gantry.Core.ModEx.Mod">
            <summary>
                Represents the current mod, as registered with the mod manager.
            </summary>
        </member>
        <member name="M:Gantry.Core.ModEx.CreateInitialDirectory">
            <summary>
                Cleans up the mess I made of the previous attempt to fix Linux being a pain!
            </summary>
        </member>
        <member name="M:Gantry.Core.ModEx.IsModEnabled(System.String)">
            <summary>
                Determines whether a given mod is installed, and enabled, on the current app-side.
            </summary>
            <param name="modId">The mod identifier.</param>
            <returns><c>true</c> if the mod is enabled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gantry.Core.ModEx.IsCurrentlyOnMainThread">
            <summary>
                Determines whether the current code block is running on the main thread. See remarks.
            </summary>
            <remarks>
                Within a Single-Player game, the server will never run on the main application thread.
                Single-Player servers are run as a background thread, within the client application.
            </remarks>
            <returns><c>true</c> if the code is currently running on the main application thread; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Gantry.Core.ModSystems.ClientModSystem">
            <summary>
                Acts as a base class for Client-Side Only ModSystems. Derived classes will only be loaded on the Client.
            </summary>
            <seealso cref="T:Gantry.Core.ModSystems.Generic.ModSystemBase" />
        </member>
        <member name="P:Gantry.Core.ModSystems.ClientModSystem.Capi">
            <summary>
                The core API implemented by the client. The main interface for accessing the client. Contains all sub-components, and some miscellaneous methods.
            </summary>
        </member>
        <member name="M:Gantry.Core.ModSystems.ClientModSystem.ShouldLoad(Vintagestory.API.Common.EnumAppSide)">
            <summary>
                Returns if this mod should be loaded for the given app side.
            </summary>
            <param name="forSide">For side.</param>
            <returns><c>true</c> if the mod should be loaded on the specified side, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Gantry.Core.ModSystems.ClientModSystem.StartServerSide(Vintagestory.API.Server.ICoreServerAPI)">
            <inheritdoc />
        </member>
        <member name="M:Gantry.Core.ModSystems.ClientModSystem.StartPreServerSide(Vintagestory.API.Server.ICoreServerAPI)">
            <inheritdoc />
        </member>
        <member name="M:Gantry.Core.ModSystems.ClientModSystem.StartPreUniversal(Vintagestory.API.Common.ICoreAPI)">
            <inheritdoc />
        </member>
        <member name="T:Gantry.Core.ModSystems.Generic.ModSystemBase">
            <summary>
                Base representation of a ModSystem used to extend Vintage Story.
            </summary>
            <seealso cref="T:Vintagestory.API.Common.ModSystem" />
        </member>
        <member name="M:Gantry.Core.ModSystems.Generic.ModSystemBase.#ctor">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Core.ModSystems.Generic.ModSystemBase"/> class.
            </summary>
        </member>
        <member name="P:Gantry.Core.ModSystems.Generic.ModSystemBase.UApi">
            <summary>
                Common API Components that are available on the server and the client.<br/>
                Cast to ICoreServerAPI, or ICoreClientAPI, to access side specific features.
            </summary>
        </member>
        <member name="M:Gantry.Core.ModSystems.Generic.ModSystemBase.StartPre(Vintagestory.API.Common.ICoreAPI)">
            <summary>
                Called during initial mod loading, called before any mod receives the call to Start().
            </summary>
            <param name="api">
                Common API Components that are available on the server and the client.<br/>
                Cast to ICoreServerAPI or ICoreClientAPI to access side specific features.
            </param>
        </member>
        <member name="M:Gantry.Core.ModSystems.Generic.ModSystemBase.StartPreUniversal(Vintagestory.API.Common.ICoreAPI)">
            <summary>
                Called during initial mod loading, called before any mod receives the call to Start().
            </summary>
        </member>
        <member name="M:Gantry.Core.ModSystems.Generic.ModSystemBase.StartPreServerSide(Vintagestory.API.Server.ICoreServerAPI)">
            <summary>
                Called during initial mod loading, called before any mod receives the call to Start().
            </summary>
        </member>
        <member name="M:Gantry.Core.ModSystems.Generic.ModSystemBase.StartPreClientSide(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
                Called during initial mod loading, called before any mod receives the call to Start().
            </summary>
        </member>
        <member name="M:Gantry.Core.ModSystems.Generic.ModSystemBase.ExecuteOrder">
            <summary>
                If you need mods to be executed in a certain order, adjust this methods return value.<br/>
                The server will call each Mods Start() method the ascending order of each mods execute order value.<br/>
                And thus, as long as every mod registers it's event handlers in the Start() method, all event handlers<br/>
                will be called in the same execution order.<br/>
                Default execute order of some survival mod parts.<br/><br/>
            
                World Gen:<br/>
                - GenTerra: 0<br/>
                - RockStrata: 0.1<br/>
                - Deposits: 0.2<br/>
                - Caves: 0.3<br/>
                - BlockLayers: 0.4<br/><br/>
            
                Asset Loading:<br/>
                - Json Overrides loader: 0.05<br/>
                - Load hardcoded mantle block: 0.1<br/>
                - Block and Item Loader: 0.2<br/>
                - Recipes (Smithing, Knapping, ClayForming, Grid recipes, Alloys) Loader: 1
            </summary>
        </member>
        <member name="T:Gantry.Core.ModSystems.ServerModSystem">
            <summary>
                Acts as a base class for Server-Side Only ModSystems. Derived classes will only be loaded on the Server.
            </summary>
            <seealso cref="T:Gantry.Core.ModSystems.Generic.ModSystemBase" />
        </member>
        <member name="P:Gantry.Core.ModSystems.ServerModSystem.Sapi">
            <summary>
                The core API implemented by the server. The main interface for accessing the server. Contains all sub-components, and some miscellaneous methods.
            </summary>
        </member>
        <member name="M:Gantry.Core.ModSystems.ServerModSystem.ShouldLoad(Vintagestory.API.Common.EnumAppSide)">
            <summary>
                Returns if this mod should be loaded for the given app side.
            </summary>
            <param name="forSide">For side.</param>
            <returns><c>true</c> if the mod should be loaded on the specified side, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Gantry.Core.ModSystems.ServerModSystem.StartClientSide(Vintagestory.API.Client.ICoreClientAPI)">
            <inheritdoc />
        </member>
        <member name="M:Gantry.Core.ModSystems.ServerModSystem.StartPreClientSide(Vintagestory.API.Client.ICoreClientAPI)">
            <inheritdoc />
        </member>
        <member name="M:Gantry.Core.ModSystems.ServerModSystem.StartPreUniversal(Vintagestory.API.Common.ICoreAPI)">
            <inheritdoc />
        </member>
        <member name="T:Gantry.Core.ModSystems.UniversalModSystem">
            <summary>
                Acts as a base class for Universal Mod Systems, that work on both the Client, and Server.
            </summary>
            <seealso cref="T:Gantry.Core.ModSystems.Generic.ModSystemBase" />
        </member>
        <member name="P:Gantry.Core.ModSystems.UniversalModSystem.Capi">
            <summary>
                The core API implemented by the client. The main interface for accessing the client. Contains all sub-components, and some miscellaneous methods.
            </summary>
        </member>
        <member name="P:Gantry.Core.ModSystems.UniversalModSystem.Sapi">
            <summary>
                The core API implemented by the server. The main interface for accessing the server. Contains all sub-components, and some miscellaneous methods.
            </summary>
        </member>
        <member name="M:Gantry.Core.ModSystems.UniversalModSystem.ShouldLoad(Vintagestory.API.Common.EnumAppSide)">
            <summary>
                Returns if this mod should be loaded for the given app side.
            </summary>
            <param name="forSide">For side.</param>
            <returns><c>true</c> if the mod should be loaded on the specified side, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.Abstractions.Contracts.IBinaryModFile">
            <summary>
                Represents a binary (ProtoBuf) file on the filesystem.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IBinaryModFile.ParseAsByteArray">
            <summary>
                Parses the file into a primitive byte array.
            </summary>
            <returns>An array of type <see cref="T:System.Byte"/>, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IBinaryModFile.ParseAsByteArrayAsync">
            <summary>
                Parses the file into a primitive byte array.
            </summary>
            <returns>An array of type <see cref="T:System.Byte"/>, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IBinaryModFile.ParseAsMemoryStream">
            <summary>
                Parses the file into a memory stream.
            </summary>
            <returns>An instance of type <see cref="T:System.IO.MemoryStream"/>, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IBinaryModFile.ParseAsMemoryStreamAsync">
            <summary>
                Parses the file into a memory stream.
            </summary>
            <returns>An instance of type <see cref="T:System.IO.MemoryStream"/>, populated with data from this file.</returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.Abstractions.Contracts.IFileSystemService">
            <summary>
                Provides a means for handling files, including embedded resources, used within a mod.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IFileSystemService.GetRegisteredFile(System.String)">
            <summary>
                Retrieves a file that has previously been registered with the FileSystem Service.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Return an <see cref="T:System.Object"/> representation of the file, on disk.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IFileSystemService.GetJsonFile(System.String)">
            <summary>
                Retrieves a file that has previously been registered with the FileSystem Service.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Return an <see cref="T:Gantry.Services.FileSystem.Abstractions.Contracts.IJsonModFile"/> representation of the file, on disk.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IFileSystemService.GetBinaryFile(System.String)">
            <summary>
                Retrieves a file that has previously been registered with the FileSystem Service.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Return an <see cref="T:Gantry.Services.FileSystem.Abstractions.Contracts.IBinaryModFile"/> representation of the file, on disk.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IFileSystemService.ParseEmbeddedJsonFile``1(System.String)">
            <summary>
                Deserialises the specified file as a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <param name="fileName">The name of the file, including file extension.</param>
            <returns>An instance of type <typeparamref name="TModel" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IFileSystemService.ParseEmbeddedJsonArrayFile``1(System.String)">
            <summary>
                Deserialises the specified file as a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <param name="fileName">The name of the file, including file extension.</param>
            <returns>An instance of type <typeparamref name="TModel" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IFileSystemService.GetTextFile(System.String)">
            <summary>
                Retrieves a file that has previously been registered with the FileSystem Service.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Return an <see cref="T:Gantry.Services.FileSystem.Abstractions.Contracts.ITextModFile"/> representation of the file, on disk.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IFileSystemService.GetRegisteredFile``1(System.String)">
            <summary>
                Retrieves a file that has previously been registered with the FileSystem Service.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Return an <typeparamref name="TFileType"/> representation of the file, on disk.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IFileSystemService.RegisterFile(System.String,Gantry.Services.FileSystem.Enums.FileScope)">
             <summary>
                 Registers a file with the FileSystem Service. This will copy a default implementation of the file from:
                  • An embedded resource.
                  • The mod's unpack directory.
                  • The mod's assets folder.
            
                 If no default implementation can be found, a new file is created, at the correct location.
             </summary>
             <param name="fileName">The name of the file, including file extension.</param>
             <param name="scope">The scope of the file, be it global, or per-world.</param>
        </member>
        <member name="T:Gantry.Services.FileSystem.Abstractions.Contracts.IJsonModFile">
            <summary>
                Represents a JSON file on the filesystem.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IJsonModFile.ParseAsJsonObject">
            <summary>
                Parses the file into Vintage Story's bespoke JsonObject wrapper.
            </summary>
            <returns>An instance of type <see cref="T:Vintagestory.API.Datastructures.JsonObject"/>, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IJsonModFile.ParseAsJsonObjectAsync">
            <summary>
                Parses the file into Vintage Story's bespoke JsonObject wrapper.
            </summary>
            <returns>An instance of type <see cref="T:Vintagestory.API.Datastructures.JsonObject"/>, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IJsonModFile.SaveFrom``1(System.Collections.Generic.IEnumerable{``0},Newtonsoft.Json.Formatting)">
            <summary>
                Serialises the specified collection of objects, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="collection">The collection of the objects to save to a single file.</param>
            <param name="formatting">The JSON formatting style to use when serialising the data.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IJsonModFile.SaveFrom(System.String)">
            <summary>
                Serialises the specified collection of objects, and saves the resulting data to file.
            </summary>
            <param name="json">The serialised JSON string to save to a single file.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IJsonModFile.SaveFromAsync(System.String)">
            <summary>
                Serialises the specified collection of objects, and saves the resulting data to file.
            </summary>
            <param name="json">The serialised JSON string to save to a single file.</param>
        </member>
        <member name="T:Gantry.Services.FileSystem.Abstractions.Contracts.IModFile">
            <summary>
                Represents a file on the filesystem.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IModFile.ParseAs``1">
            <summary>
                Deserialises the specified file as a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <typeparamref name="TModel"/>, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IModFile.ParseAsAsync``1">
            <summary>
                Deserialises the specified file as a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <typeparamref name="TModel"/>, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IModFile.ParseAsMany``1">
            <summary>
                Deserialises the specified file as a collection of a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IModFile.ParseAsManyAsync``1">
            <summary>
                Deserialises the specified file as a collection of a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IModFile.SaveFrom``1(``0)">
            <summary>
                Serialises the specified instance, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="instance">The instance of the object to serialise.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IModFile.SaveFromAsync``1(``0)">
            <summary>
                Serialises the specified instance, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="instance">The instance of the object to serialise.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IModFile.SaveFromAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Serialises the specified collection of objects, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="collection">The collection of the objects to save to a single file.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IModFile.DisembedFrom(System.Reflection.Assembly)">
            <summary>
                Disembeds the file from a specific assembly.
            </summary>
            <param name="assembly">The assembly to disembed the file from.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IModFile.Disembed(System.String)">
            <summary>
                Disembeds the file from the mod assembly.
            </summary>
            <param name="filePath">The absolute path, on the local system, to disembed the file to.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IModFile.Disembed">
            <summary>
                Disembeds the file from the mod assembly, to the default file location.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.Abstractions.Contracts.IModFileBase">
            <summary>
                Acts as a common ancestor for all mod file interfaces.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.Abstractions.Contracts.IModFileBase.FileType">
            <summary>
                Gets the type of the file, be it JSON, or Binary.
            </summary>
            <value>The type of the file.</value>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.IModFileBase.AsFileInfo">
            <summary>
                Retrieves the underlying <see cref="T:System.IO.FileInfo"/> object for the given file.
            </summary>
            <returns>A <see cref="T:System.IO.FileInfo"/> object, instantiated with the given file's fully qualified path, as registered with the service.</returns>
        </member>
        <member name="P:Gantry.Services.FileSystem.Abstractions.Contracts.IModFileBase.Path">
            <summary>
                Retrieves the absolute, fully qualified path to the file.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the given file's fully qualified path, as registered with the service.</returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.Abstractions.Contracts.ITextModFile">
            <summary>
                Represents a Text file on the filesystem.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.ITextModFile.ReadAllText">
            <summary>
                Opens the file, reads all lines of text, and then closes the file.
            </summary>
            <returns>A <see cref="T:System.String" />, containing all lines of text within the file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.Contracts.ITextModFile.ReadAllTextAsync">
            <summary>
                Asynchronously opens the file, reads all lines of text, and then closes the file.
            </summary>
            <returns>A <see cref="T:System.String" />, containing all lines of text within the file.</returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.Abstractions.ModFile">
            <summary>
                A wrapper of a <see cref="T:System.IO.FileInfo" /> for a specific file on on the filesystem. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFile.#ctor(System.String)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.Abstractions.ModFile" /> class.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFile.#ctor(System.IO.FileInfo)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.Abstractions.ModFile" /> class.
            </summary>
            <param name="fileInfo">The file information.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFile.ParseAs``1">
            <summary>
                Deserialises the specified file as a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <typeparamref name="TModel" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFile.ParseAsAsync``1">
            <summary>
            Deserialises the specified file as a strongly-typed object.
            The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <typeparamref name="TModel" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFile.ParseAsMany``1">
            <summary>
                Deserialises the specified file as a collection of a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <see cref="T:System.Collections.Generic.IEnumerable`1" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFile.ParseAsManyAsync``1">
            <summary>
            Deserialises the specified file as a collection of a strongly-typed object.
            The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <see cref="T:System.Collections.Generic.IEnumerable`1" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFile.SaveFrom``1(``0)">
            <summary>
                Serialises the specified instance, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="instance">The instance of the object to serialise.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFile.SaveFromAsync``1(``0)">
            <summary>
            Serialises the specified instance, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="instance">The instance of the object to serialise.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFile.SaveFromAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Serialises the specified collection of objects, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="collection">The collection of the objects to save to a single file.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFile.SaveFrom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Serialises the specified collection of objects, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="collection">The collection of the objects to save to a single file.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFile.DisembedFrom(System.Reflection.Assembly)">
            <summary>
                Disembeds the file from a specific assembly.
            </summary>
            <param name="assembly">The assembly to disembed the file from.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFile.Disembed(System.String)">
            <summary>
                Disembeds the file from the mod assembly.
            </summary>
            <param name="filePath">The absolute path, on the local system, to disembed the file to.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFile.Disembed">
            <summary>
                Disembeds the file from the mod assembly, to the default file location.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.Abstractions.ModFileBase">
            <summary>
                A wrapper of a <see cref="T:System.IO.FileInfo" /> for a specific file on on the filesystem. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFileBase.#ctor(System.String)">
            <summary>
                Initialises a new instance of the <see cref="P:Gantry.Services.FileSystem.Abstractions.ModFileBase.ModFileInfo" /> class.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFileBase.#ctor(System.IO.FileInfo)">
            <summary>
                Initialises a new instance of the <see cref="P:Gantry.Services.FileSystem.Abstractions.ModFileBase.ModFileInfo" /> class.
            </summary>
            <param name="fileInfo">The file information.</param>
        </member>
        <member name="P:Gantry.Services.FileSystem.Abstractions.ModFileBase.FileType">
            <summary>
                Gets the type of the file, be it JSON, or Binary.
            </summary>
            <value>The type of the file.</value>
        </member>
        <member name="M:Gantry.Services.FileSystem.Abstractions.ModFileBase.AsFileInfo">
            <summary>
                Retrieves the underlying <see cref="T:System.IO.FileInfo" /> object for the given file.
            </summary>
            <returns>
            A <see cref="T:System.IO.FileInfo" /> object, instantiated with the given file's fully qualified path, as registered with the service.
            </returns>
        </member>
        <member name="P:Gantry.Services.FileSystem.Abstractions.ModFileBase.Path">
            <summary>
                Retrieves the absolute, fully qualified path to the file.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.Abstractions.ModFileBase.ModFileInfo">
            <summary>
                Gets the underlying mod file information.
            </summary>
            <value>
                The underlying mod file information.
            </value>
        </member>
        <member name="T:Gantry.Services.FileSystem.Configuration.Abstractions.FeatureSettings">
            <summary>
                Acts as a base class for all settings POCO Classes for a given feature.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.Abstractions.FeatureSettings.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.Abstractions.FeatureSettings.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.Configuration.Abstractions.IJsonSettingsFile">
            <summary>
                Represents a settings file for the mod, in JSON format.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.Abstractions.IJsonSettingsFile.File">
            <summary>
                Gets the underlying <see cref="T:Gantry.Services.FileSystem.Abstractions.Contracts.IJsonModFile"/> that this instance wraps.
            </summary>
            <value>The file underlying JSON file from the file system.</value>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.Abstractions.IJsonSettingsFile.Feature``1(System.String)">
            <summary>
                Retrieves the settings for a specific feature, parsed as a strongly-typed POCO class instance.
                Changes made to the settings will automatically be written to the file, as they are set.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of object to parse the settings for the feature into.</typeparam>
            <param name="featureName">The name of the feature.</param>
            <returns>An object, that represents the settings for a given mod feature.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.Abstractions.IJsonSettingsFile.Save``1(``0,System.String)">
            <summary>
                Saves the specified settings to file.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of object to parse the settings for the feature into.</typeparam>
            <param name="featureName">The name of the feature.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.Abstractions.IJsonSettingsFile.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.Configuration.Consumers.GlobalSettingsConsumer`1">
            <summary>
                Represents a class that affects, or is affected by specific feature settings.
            </summary>
            <typeparam name="T">The settings file to use within the patches in this class.</typeparam>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.Consumers.GlobalSettingsConsumer`1.Settings">
            <summary>
                Gets or sets the settings.
            </summary>
            <value>
                The settings.
            </value>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.Consumers.GlobalSettingsConsumer`1.FeatureName">
            <summary>
                Gets or sets the name of the feature.
            </summary>
            <value>
                The name of the feature.
            </value>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.Consumers.GlobalSettingsConsumer`1.SaveChanges">
            <summary>
                Saves any changes to the mod settings file.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.Configuration.Consumers.ISettingsConsumer">
            <summary>
                Represents a class that affects, or is affected by specific feature settings.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.Configuration.Consumers.SettingsConsumerAttribute">
            <summary>
                Designates which app-side the settings are stored on.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.Consumers.SettingsConsumerAttribute.Side">
            <summary>
                Designates which app-side the settings are stored on.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.Consumers.SettingsConsumerAttribute.#ctor(Vintagestory.API.Common.EnumAppSide)">
            <summary>
            Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.Configuration.Consumers.SettingsConsumerAttribute"/> class.
            </summary>
            <param name="side">The side.</param>
        </member>
        <member name="T:Gantry.Services.FileSystem.Configuration.Consumers.WorldSettingsConsumer`1">
            <summary>
                Represents a class that affects, or is affected by specific feature settings.
            </summary>
            <typeparam name="T">The settings file to use within the patches in this class.</typeparam>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.Consumers.WorldSettingsConsumer`1.Settings">
            <summary>
                Gets or sets the settings.
            </summary>
            <value>
                The settings.
            </value>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.Consumers.WorldSettingsConsumer`1.FeatureName">
            <summary>
                Gets or sets the name of the feature.
            </summary>
            <value>
                The name of the feature.
            </value>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.Consumers.WorldSettingsConsumer`1.SaveChanges">
            <summary>
                Saves any changes to the mod settings file.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.Configuration.Extensions.FileSystemServiceExtensions">
            <summary>
                Extension methods for use within the File System Service.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.Extensions.FileSystemServiceExtensions.RegisterSettingsFile(Gantry.Services.FileSystem.Abstractions.Contracts.IFileSystemService,System.String,Gantry.Services.FileSystem.Enums.FileScope)">
            <summary>
                Registers a settings file with the FileSystem Service. This will copy a default implementation of the file from:
                 • An embedded resource.
                 • The mod's unpack directory.
                 • The mod's assets folder.
            
                If no default implementation can be found, a new file is created, at the correct location.
            </summary>
            <param name="fileSystem">The <see cref="T:Gantry.Services.FileSystem.Abstractions.Contracts.IFileSystemService"/> to use to register the file.</param>
            <param name="fileName">The name of the file, including file extension.</param>
            <param name="scope">The scope of the file, be it global, or per-world.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.Extensions.FileSystemServiceExtensions.RegisterSettingsFiles(Gantry.Services.FileSystem.Abstractions.Contracts.IFileSystemService)">
            <summary>
                Registers settings files.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.Configuration.JsonSettingsFile">
            <summary>
                Represents a settings file for the mod, in JSON format.
            </summary>
            <seealso cref="T:Gantry.Services.FileSystem.Configuration.Abstractions.IJsonSettingsFile" />
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.JsonSettingsFile.File">
            <summary>
                Gets the underlying <see cref="T:Gantry.Services.FileSystem.Abstractions.Contracts.IJsonModFile" /> that this instance wraps.
            </summary>
            <value>
            The file underlying JSON file from the file system.
            </value>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.JsonSettingsFile.#ctor(Gantry.Services.FileSystem.Abstractions.Contracts.IJsonModFile,Gantry.Services.FileSystem.Enums.FileScope,HarmonyLib.Harmony)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.Configuration.JsonSettingsFile"/> class.
            </summary>
            <param name="file">The underlying file, registered within the file system service.</param>
            <param name="scope">The scope that the settings file resides in.</param>
            <param name="harmony">The harmony instance to use to patch the files.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.JsonSettingsFile.FromJsonFile(Gantry.Services.FileSystem.Abstractions.Contracts.IJsonModFile,Gantry.Services.FileSystem.Enums.FileScope,HarmonyLib.Harmony)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.Configuration.JsonSettingsFile"/> class.
            </summary>
            <param name="file">The underlying file, registered within the file system service.</param>
            <param name="scope">The scope that the settings file resides in.</param>
            <param name="harmony">The harmony instance to use to patch the files.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.JsonSettingsFile.Feature``1(System.String)">
            <summary>
                Binds the specified feature to a POCO class object; dynamically adding an implementation of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, 
                which saves changes to the underlying JSON file, whenever a property within the POCO is set.
            </summary>
            <remarks>
                NOTE: Over-enthusiastic use of property setting within the POCO class, may result in excessive writes to the JSON file.
                      Sliders, in particular should be set to only fire on mouse up.
            </remarks>
            <typeparam name="T">The <see cref="T:System.Type"/> of object to parse the settings for the feature into.</typeparam>
            <param name="featureName">The name of the feature.</param>
            <returns>An object, that represents the settings for a given mod feature.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.JsonSettingsFile.Save``1(``0,System.String)">
            <summary>
                Saves the specified settings to file.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of object to parse the settings for the feature into.</typeparam>
            <param name="settings">The settings.</param>
            <param name="featureName">The name of the feature.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.JsonSettingsFile.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.Configuration.ModSettings">
            <summary>
                Globally accessible settings files for the mod. Populated via the <see cref="T:Gantry.Services.FileSystem.Abstractions.Contracts.IFileSystemService"/>.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.ModSettings.ClientGlobal">
            <summary>
                The global mod settings; these settings will persist through each gameworld.
            </summary>
            <value>The global settings.</value>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.ModSettings.ClientWorld">
            <summary>
                The per-world mod settings; these settings can change within each gameworld.
            </summary>
            <value>The per-world settings.</value>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.ModSettings.ServerGlobal">
            <summary>
                The global mod settings; these settings will persist through each gameworld.
            </summary>
            <value>The global settings.</value>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.ModSettings.ServerWorld">
            <summary>
                The per-world mod settings; these settings can change within each gameworld.
            </summary>
            <value>The per-world settings.</value>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.ModSettings.Global">
            <summary>
                The global mod settings; these settings will persist through each gameworld.
            </summary>
            <value>The global settings.</value>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.ModSettings.World">
            <summary>
                The per-world mod settings; these settings can change within each gameworld.
            </summary>
            <value>The per-world settings.</value>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.ModSettings.For(Gantry.Services.FileSystem.Enums.FileScope)">
            <summary>
                The mod settings for a specific <see cref="T:Gantry.Services.FileSystem.Enums.FileScope"/>.
            </summary>
            <value>The global settings.</value>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.ModSettings.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.Configuration.ObservableFeatures.IObservableObject">
            <summary>
                Represents a class that notifies observers that a property value has changed within a wrapped POCO class.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.ObservableFeatures.IObservableObject.Object">
            <summary>
                The instance of the object being observed.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.ObservableFeatures.IObservableObject.Active">
            <summary>
                Sets a value indicating whether this <see cref="T:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableObject`1"/> is active.
            </summary>
            <value>
              <c>true</c> if active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.ObservableFeatures.IObservableObject.OnObjectPropertyChanged">
            <summary>
                Occurs when a property value is changed, within the observed POCO class.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.ObservableFeatures.IObservableObject.UnPatch">
            <summary>
                Removes the postfix patches from the observed item.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableFeatureSettings`1">
            <summary>
                Notifies observers that a property value has changed within a wrapped POCO class.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of object to watch.</typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableFeatureSettings`1.#ctor(`0,System.String,Gantry.Services.FileSystem.Enums.FileScope,HarmonyLib.Harmony)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableFeatureSettings`1"/> class.
            </summary>
            <param name="instance">The instance.</param>
            <param name="featureName">Name of the feature.</param>
            <param name="scope">Scope of the feature.</param>
            <param name="harmony">The harmony instance to use to patch the files.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableFeatureSettings`1.Bind(`0,System.String,Gantry.Services.FileSystem.Enums.FileScope,HarmonyLib.Harmony)">
            <summary>
                Binds the specified feature to a POCO class object; dynamically adding an implementation of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, 
                raising an event every time a property within the POCO class, is set.
            </summary>
            <param name="featureName">The name of the feature being observed.</param>
            <param name="instance">The instance of the POCO class that manages the feature settings.</param>
            <param name="scope">Scope of the feature.</param>
            <param name="harmony">The harmony instance to use to patch the files.</param>
            <returns>An instance of <see cref="T:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableFeatureSettings`1"/>, which exposes the <c>PropertyChanged</c> event.</returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableObject`1">
            <summary>
                Notifies observers that a property value has changed within a wrapped POCO class.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of object to watch.</typeparam>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableObject`1.Object">
            <summary>
                The instance of the object being observed.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableObject`1.#ctor(HarmonyLib.Harmony)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableObject`1"/> class.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableObject`1.#ctor(`0,HarmonyLib.Harmony)">
            <summary>
            Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableObject`1" /> class.
            </summary>
            <param name="instance">The instance.</param>
            <param name="harmony">The harmony instance to use to patch the files.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableObject`1.UnPatch">
            <summary>
                Removes the postfix patches from the observed item.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableObject`1.Bind(`0,HarmonyLib.Harmony)">
            <summary>
                Binds the specified feature to a POCO class object; dynamically adding an
                implementation of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, raising an event
                every time a property within the POCO class, is set.
            </summary>
            <param name="instance">The instance of the POCO class that manages the feature settings.</param>
            <param name="harmony">The harmony instance to use to patch the files.</param>
            <returns>An instance of <see cref="T:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableObject`1"/>, which exposes the <c>PropertyChanged</c> event.</returns>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableObject`1.Active">
            <summary>
                A value indicating whether this <see cref="T:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableObject`1"/> is active.
            </summary>
            <value>
              <c>true</c> if active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Gantry.Services.FileSystem.Configuration.ObservableFeatures.ObservableObject`1.OnObjectPropertyChanged">
            <summary>
                Occurs when a property value is changed, within the observed POCO class.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.DependencyInjection.GantryDependencyInjectionExtensions">
            <summary>
                Extension methods to aid the registration of the File System service, into a Gantry MDK IOC Container.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.DependencyInjection.GantryDependencyInjectionExtensions.AddFileSystemService(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,System.Action{Gantry.Services.FileSystem.FileSystemServiceOptions})">
            <summary>
                Attempts to add the file system service to the service collection, as service type <see cref="T:Gantry.Services.FileSystem.Abstractions.Contracts.IFileSystemService"/>.
            </summary>
            <param name="services">The services collection to add the service to.</param>
            <param name="options">The options to pass to the service.</param>
            <returns>A reference to this instance, after this operation has completed.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.DependencyInjection.GantryDependencyInjectionExtensions.AddFileSystemService(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection)">
            <summary>
                Attempts to add the file system service to the service collection, as service type <see cref="T:Gantry.Services.FileSystem.Abstractions.Contracts.IFileSystemService"/>.
            </summary>
            <param name="services">The services collection to add the service to.</param>
            <returns>A reference to this instance, after this operation has completed.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.DependencyInjection.GantryDependencyInjectionExtensions.AddFeatureWorldSettings``1(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,System.String)">
            <summary>
                Adds a per-world settings service for a specific feature.
            </summary>
            <typeparam name="TSettings">The type of the settings.</typeparam>
            <param name="services">The services collection to add the service to.</param>
            <param name="featureName">The name of the feature.</param>
            <returns>A reference to this instance, after this operation has completed.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.DependencyInjection.GantryDependencyInjectionExtensions.AddFeatureGlobalSettings``1(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,System.String)">
            <summary>
                Adds a global settings service for a specific feature.
            </summary>
            <typeparam name="TSettings">The type of the settings.</typeparam>
            <param name="services">The services collection to add the service to.</param>
            <param name="featureName">The name of the feature.</param>
            <returns>A reference to this instance, after this operation has completed.</returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.Dialogue.AutomaticFeatureSettingsDialogue`1">
            <summary>
                Acts as a base class for dialogue boxes that
            </summary>
            <typeparam name="TFeatureSettings">The strongly-typed settings for the feature under use.</typeparam>
            <seealso cref="T:Gantry.Core.GameContent.GUI.GenericDialogue" />
        </member>
        <member name="M:Gantry.Services.FileSystem.Dialogue.AutomaticFeatureSettingsDialogue`1.#ctor(Vintagestory.API.Client.ICoreClientAPI,`0,System.String)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.Dialogue.AutomaticFeatureSettingsDialogue`1"/> class.
            </summary>
            <param name="capi">The capi.</param>
            <param name="settings">The settings.</param>
            <param name="featureName">Name of the feature.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Dialogue.AutomaticFeatureSettingsDialogue`1.ComposeBody(Vintagestory.API.Client.GuiComposer)">
            <summary>
                Composes the header for the GUI.
            </summary>
            <param name="composer">The composer.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Dialogue.AutomaticFeatureSettingsDialogue`1.RefreshValues">
            <summary>
                Refreshes the displayed values on the form.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.Dialogue.FeatureSettingsDialogue`1">
            <summary>
                Acts as a base class for dialogue boxes that 
            </summary>
            <typeparam name="TFeatureSettings">The strongly-typed settings for the feature under use.</typeparam>
            <seealso cref="T:Gantry.Core.GameContent.GUI.GenericDialogue" />
        </member>
        <member name="P:Gantry.Services.FileSystem.Dialogue.FeatureSettingsDialogue`1.Settings">
            <summary>
                The strongly-typed settings for the feature under use.
            </summary>
            <value>The strongly-typed settings for the feature under use.</value>
        </member>
        <member name="P:Gantry.Services.FileSystem.Dialogue.FeatureSettingsDialogue`1.FeatureName">
            <summary>
                Gets the name of the feature.
            </summary>
            <value>The name of the feature.</value>
        </member>
        <member name="M:Gantry.Services.FileSystem.Dialogue.FeatureSettingsDialogue`1.#ctor(Vintagestory.API.Client.ICoreClientAPI,`0,System.String)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.Dialogue.FeatureSettingsDialogue`1"/> class.
            </summary>
            <param name="capi">The capi.</param>
            <param name="settings">The settings.</param>
            <param name="featureName">Name of the feature.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Dialogue.FeatureSettingsDialogue`1.LangEntry(System.String)">
            <summary>
                Gets an entry from the language files, for the feature this instance is representing.
            </summary>
            <param name="code">The entry to return.</param>
            <returns>A localised <see cref="T:System.String"/>, for the specified language file code.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Dialogue.FeatureSettingsDialogue`1.SaveFeatureChanges(Gantry.Services.FileSystem.Enums.FileScope)">
            <summary>
                Saves the feature changes.
            </summary>
            <param name="scope">The scope.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">scope - null</exception>
        </member>
        <member name="T:Gantry.Services.FileSystem.DynamicEx">
            <summary>
                Helper Methods for working with <see cref="T:System.Dynamic.ExpandoObject"/>s and <c>dynamic</c> objects.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.DynamicEx.HasProperty(System.Dynamic.ExpandoObject,System.String)">
            <summary>
                Determines whether the specified <see cref="T:System.Dynamic.ExpandoObject"/> has a given property.
            </summary>
            <param name="obj">The dynamically assignable object.</param>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Dynamic.ExpandoObject"/> contains the given property; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.Enums.FileScope">
            <summary>
                Specifies the scope of a file saved to the user's game folder.
            </summary>
        </member>
        <member name="F:Gantry.Services.FileSystem.Enums.FileScope.Global">
            <summary>
                Denotes that a file is held in global scope, for all multi-player and single-player worlds.
            </summary>
        </member>
        <member name="F:Gantry.Services.FileSystem.Enums.FileScope.World">
            <summary>
                Denotes that a file is created for each world a player enters.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.Enums.FileType">
            <summary>
                Specifies the type of a file saved to the user's game folder.
            </summary>
        </member>
        <member name="F:Gantry.Services.FileSystem.Enums.FileType.Json">
            <summary>
                Denotes that a file is stored in clear-text JSON format.
            </summary>
        </member>
        <member name="F:Gantry.Services.FileSystem.Enums.FileType.Binary">
            <summary>
                Denotes that a file is stored in binary ProtoBuf format.
            </summary>
        </member>
        <member name="F:Gantry.Services.FileSystem.Enums.FileType.Text">
            <summary>
                Denotes that a file is stored in clear text format.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.Extensions.AssemblyExtensions">
            <summary>
                Extension methods to aid assembly level reflection.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.AssemblyExtensions.InstantiateAllTypesImplementing``1(System.Reflection.Assembly)">
            <summary>
                Instantiates all types within the assembly that implement a specific interface.
            </summary>
            <typeparam name="T">The type of interface to scan the assembly for concrete implementations of.</typeparam>
            <param name="assembly">The assembly to scan.</param>
            <returns></returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.AssemblyExtensions.GetAllTypesImplementing``1(System.Reflection.Assembly)">
            <summary>
                Gets all types within the assembly that implement a specific interface.
            </summary>
            <typeparam name="T">The type of interface to scan the assembly for concrete implementations of.</typeparam>
            <param name="assembly">The assembly to scan.</param>
            <returns></returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.AssemblyExtensions.InitialiseSettingsConsumers(System.Reflection.Assembly)">
            <summary>
                Initialises classes that implement the <see cref="T:Gantry.Services.FileSystem.Configuration.Consumers.ISettingsConsumer"/> interface, within the given assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.AssemblyExtensions.RunClassConstructor(System.Type)">
            <summary>
                Invokes the type constructor for the specified type.
            </summary>
            <param name="type">The type of the class to invoke the class Constructor on.</param>
        </member>
        <member name="T:Gantry.Services.FileSystem.Extensions.DirectoryInfoExtensions">
            <summary>
                Extension methods to extend the functionality of <see cref="T:System.IO.DirectoryInfo"/> instances.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.DirectoryInfoExtensions.CopyTo(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
                Copy the directory to another location.
            </summary>
            <param name="sourceDir">The source dir.</param>
            <param name="destinationDir">The destination dir.</param>
            <param name="recursive">if set to <c>true</c>, subdirectories will recursively be copied as well. Default: True.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.DirectoryInfoExtensions.IsEmpty(System.IO.DirectoryInfo)">
            <summary>
                Determines whether the specified directory is empty.
            </summary>
            <param name="sourceDir">The source dir.</param>
            <returns><c>true</c> if the specified source dir is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.DirectoryInfoExtensions.Rename(System.IO.DirectoryInfo,System.String)">
            <summary>
                Renames a directory, keeping its contents intact. The new name is case-sensitive.
            </summary>
            <param name="directoryInfo">The DirectoryInfo object representing the directory to rename.</param>
            <param name="newName">The new name for the directory.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.DirectoryInfoExtensions.MoveToWithOverwrite(System.IO.DirectoryInfo,System.String)">
            <summary>
                Moves a directory and its contents to another location, overwriting existing files and directories.
            </summary>
            <param name="sourceDir">The source directory to move.</param>
            <param name="destDir">The destination directory.</param>
        </member>
        <member name="T:Gantry.Services.FileSystem.Extensions.FileInfoExtensions">
             <summary>
                 Until .NET6 is available for the game, these async helper methods will have to suffice.
            
                 .NET 6.0 will introduce File.WriteAllTextAsync, and similar IO static async methods.
             </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.FileInfoExtensions.WriteAllBytesAsync(System.IO.FileInfo,System.Byte[])">
            <summary>
                Asynchronously opens the file, writes all given bytes to the file, overwriting all contents, then closes the file.
            </summary>
            <param name="fileInfo">The <see cref="T:System.IO.FileInfo"/> wrapper for the file to write to.</param>
            <param name="bytes">The byte array to write to the file.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.FileInfoExtensions.WriteAllTextAsync(System.IO.FileInfo,System.String)">
            <summary>
                Asynchronously opens the file, writes all given text to the file, overwriting all contents, then closes the file.
            </summary>
            <param name="fileInfo">The <see cref="T:System.IO.FileInfo"/> wrapper for the file to write to.</param>
            <param name="text">The string to write to the file.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.FileInfoExtensions.ReadAllLinesAsync(System.IO.FileInfo)">
            <summary>
                Read all lines from a file, as an asynchronous operation.
            </summary>
            <param name="fileInfo">The <see cref="T:System.IO.FileInfo"/> wrapper for the file to write to.</param>
            <returns>A enumerable collection of strings, containing the contents of each line of text within the file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.FileInfoExtensions.ReadAllBytesAsync(System.IO.FileInfo)">
            <summary>
                Read all bytes from a file, as an asynchronous operation.
            </summary>
            <param name="fileInfo">The <see cref="T:System.IO.FileInfo"/> wrapper for the file to write to.</param>
            <returns>A byte array, containing the contents of the file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.FileInfoExtensions.ReadAllTextAsync(System.IO.FileInfo)">
            <summary>
                Read all text from a file, as an asynchronous operation.    
            </summary>
            <param name="fileInfo">The <see cref="T:System.IO.FileInfo"/> wrapper for the file to write to.</param>
            <returns>A string, containing the contents of the file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.FileInfoExtensions.ReadAllText(System.IO.FileInfo)">
            <summary>
                Read all text from a file, as an asynchronous operation.    
            </summary>
            <param name="fileInfo">The <see cref="T:System.IO.FileInfo"/> wrapper for the file to write to.</param>
            <returns>A string, containing the contents of the file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.FileInfoExtensions.ParseAsMany``1(System.IO.FileInfo)">
            <summary>
                Deserialises the specified file as a collection of a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>, populated with data from this file.</returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.Extensions.FileScopeExtensions">
            <summary>
                Extension methods to aid the use of <see cref="T:Gantry.Services.FileSystem.Enums.FileScope"/> enums.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.FileScopeExtensions.FastToString(Gantry.Services.FileSystem.Enums.FileScope)">
            <summary>
                Converts the value of this FileScope enum to its equivalent string representation.
            </summary>
            <param name="scope">The FileScope enum value to convert.</param>
        </member>
        <member name="T:Gantry.Services.FileSystem.Extensions.FileTypeExtensions">
            <summary>
                Extension methods to aid the use of <see cref="T:Gantry.Services.FileSystem.Enums.FileType"/> enums.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.FileTypeExtensions.ParseFileType(System.IO.FileSystemInfo)">
            <summary>
                Parses the type of the file.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.Extensions.FileTypeExtensions.CreateModFileWrapper(System.IO.FileInfo)">
            <summary>
                Creates the mod file wrapper.
            </summary>
            <param name="file">The file to wrap.</param>
            <returns></returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile">
            <summary>
                Represents a binary file, used by the mod. This class cannot be inherited.
            </summary>
            <seealso cref="T:Gantry.Services.FileSystem.Abstractions.ModFile" />
            <seealso cref="T:Gantry.Services.FileSystem.Abstractions.Contracts.IBinaryModFile" />
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile.#ctor(System.String)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile"/> class.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile.#ctor(System.IO.FileInfo)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile"/> class.
            </summary>
            <param name="fileInfo">The file information.</param>
        </member>
        <member name="P:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile.FileType">
            <summary>
                Gets the type of the file.
            </summary>
            <value>The type of the file.</value>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile.ParseAs``1">
            <summary>
                Deserialises the specified file as a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <typeparamref name="TModel" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile.ParseAsAsync``1">
            <summary>
            parse as as an asynchronous operation.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <typeparamref name="TModel" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile.ParseAsMany``1">
            <summary>
                Deserialises the specified file as a collection of a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <see cref="T:System.Collections.Generic.IEnumerable`1" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile.ParseAsManyAsync``1">
            <summary>
                Deserialises the specified file as a collection of a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <see cref="T:System.Collections.Generic.IEnumerable`1" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile.SaveFrom``1(``0)">
            <summary>
                Serialises the specified instance, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="instance">The instance of the object to serialise.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile.SaveFromAsync``1(``0)">
            <summary>
            Serialises the specified instance, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="instance">The instance of the object to serialise.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile.SaveFromAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Serialises the specified collection of objects, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="collection">The collection of the objects to save to a single file.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile.SaveFrom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Serialises the specified collection of objects, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="collection">The collection of the objects to save to a single file.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile.ParseAsByteArray">
            <summary>
                Parses the file into a primitive byte array.
            </summary>
            <returns>An array of type <see cref="T:System.Byte" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile.ParseAsByteArrayAsync">
            <summary>
                Parses the file into a primitive byte array.
            </summary>
            <returns>An array of type <see cref="T:System.Byte" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile.ParseAsMemoryStream">
            <summary>
                Parses the file into a memory stream.
            </summary>
            <returns>An instance of type <see cref="T:System.IO.MemoryStream" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.BinaryModFile.ParseAsMemoryStreamAsync">
            <summary>
                Parses the file into a memory stream.
            </summary>
            <returns>An instance of type <see cref="T:System.IO.MemoryStream" />, populated with data from this file.</returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.FileAdaptors.JsonModFile">
            <summary>
                Represents a JSON file, used by the mod. This class cannot be inherited.
            </summary>
            <seealso cref="T:Gantry.Services.FileSystem.Abstractions.ModFile" />
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.#ctor(System.String)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.FileAdaptors.JsonModFile"/> class.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.#ctor(System.IO.FileInfo)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.FileAdaptors.JsonModFile"/> class.
            </summary>
            <param name="fileInfo">The file information.</param>
        </member>
        <member name="P:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.FileType">
            <summary>
                Gets the type of the file.
            </summary>
            <value>The type of the file.</value>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.ParseAs``1">
            <summary>
                Deserialises the specified file as a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <typeparamref name="TModel" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.ParseAsAsync``1">
            <summary>
                Deserialises the specified file as a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <typeparamref name="TModel" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.ParseAsMany``1">
            <summary>
                Deserialises the specified file as a collection of a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <see cref="T:System.Collections.Generic.IEnumerable`1" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.ParseAsManyAsync``1">
            <summary>
                Deserialises the specified file as a collection of a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <returns>An instance of type <see cref="T:System.Collections.Generic.IEnumerable`1" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.SaveFrom``1(``0)">
            <summary>
                Serialises the specified instance, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="instance">The instance of the object to serialise.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.SaveFromAsync``1(``0)">
            <summary>
                Serialises the specified instance, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="instance">The instance of the object to serialise.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.SaveFromAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Serialises the specified collection of objects, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="collection">The collection of the objects to save to a single file.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.ReadAllText">
            <summary>
                Opens the file, reads all lines of text, and then closes the file.
            </summary>
            <returns>A <see cref="T:System.String" />, containing all lines of text within the file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.ReadAllTextAsync">
            <summary>
                Asynchronously opens the file, reads all lines of text, and then closes the file.
            </summary>
            <returns>A <see cref="T:System.String" />, containing all lines of text within the file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.ParseAsJsonObjectAsync">
            <summary>
                Parses the file into Vintage Story's bespoke JsonObject wrapper.
            </summary>
            <returns>An instance of type <see cref="T:Vintagestory.API.Datastructures.JsonObject" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.SaveFrom``1(System.Collections.Generic.IEnumerable{``0},Newtonsoft.Json.Formatting)">
            <summary>
                Serialises the specified collection of objects, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="collection">The collection of the objects to save to a single file.</param>
            <param name="formatting">The JSON formatting style to use when serialising the data.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.SaveFrom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Serialises the specified collection of objects, and saves the resulting data to file.
            </summary>
            <typeparam name="TModel">The type of the object to serialise.</typeparam>
            <param name="collection">The collection of the objects to save to a single file.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.SaveFrom(System.String)">
            <summary>
                Serialises the specified collection of objects, and saves the resulting data to file.
            </summary>
            <param name="json">The serialised JSON string to save to a single file.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.SaveFromAsync(System.String)">
            <summary>
                Serialises the specified collection of objects, and saves the resulting data to file.
            </summary>
            <param name="json">The serialised JSON string to save to a single file.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.JsonModFile.ParseAsJsonObject">
            <summary>
                Parses the file into Vintage Story's bespoke JsonObject wrapper.
            </summary>
            <returns>An instance of type <see cref="T:Vintagestory.API.Datastructures.JsonObject" />, populated with data from this file.</returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.FileAdaptors.TextModFile">
            <summary>
                Represents a Text file, used by the mod. This class cannot be inherited.
            </summary>
            <seealso cref="T:Gantry.Services.FileSystem.Abstractions.ModFile" />
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.TextModFile.#ctor(System.String)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.FileAdaptors.JsonModFile"/> class.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.TextModFile.#ctor(System.IO.FileInfo)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.FileAdaptors.JsonModFile"/> class.
            </summary>
            <param name="fileInfo">The file information.</param>
        </member>
        <member name="P:Gantry.Services.FileSystem.FileAdaptors.TextModFile.FileType">
            <summary>
                Gets the type of the file.
            </summary>
            <value>The type of the file.</value>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.TextModFile.ReadAllText">
            <summary>
                Opens the file, reads all lines of text, and then closes the file.
            </summary>
            <returns>A <see cref="T:System.String" />, containing all lines of text within the file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileAdaptors.TextModFile.ReadAllTextAsync">
            <summary>
                Asynchronously opens the file, reads all lines of text, and then closes the file.
            </summary>
            <returns>A <see cref="T:System.String" />, containing all lines of text within the file.</returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.FileSystemService">
            <summary>
                Provides a means for handling files, including embedded resources, used within a mod.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileSystemService.#ctor">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.FileSystemService"/> class.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileSystemService.#ctor(Gantry.Services.FileSystem.FileSystemServiceOptions)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.FileSystemService"/> class.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileSystemService.RegisterFile(System.String,Gantry.Services.FileSystem.Enums.FileScope)">
            <summary>
                Registers a file with the FileSystem Service. This will copy a default implementation of the file from:
                <br/>• An embedded resource.
                <br/>• The mod's unpack cache directory.
                <br/>• The mod's assets folder.
                <br/>If no default implementation can be found, a new file is created, at the correct location.
            </summary>
            <param name="fileName">The name of the file, including file extension.</param>
            <param name="scope">The scope of the file, be it global, or per-world.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileSystemService.GetRegisteredFile(System.String)">
            <summary>
                Retrieves a file that has previously been registered with the FileSystem Service.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Return an <see cref="T:Gantry.Services.FileSystem.Abstractions.Contracts.IModFile" /> representation of the file, on disk.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileSystemService.GetRegisteredFile``1(System.String)">
            <summary>
                Retrieves a file that has previously been registered with the FileSystem Service.
            </summary>
            <typeparam name="TFileType">The type of the file type to return as.</typeparam>
            <param name="fileName">The name of the file, including file extension.</param>
            <returns>Return an <typeparamref name="TFileType" /> representation of the file, on disk.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileSystemService.GetJsonFile(System.String)">
            <summary>
            Retrieves a file that has previously been registered with the FileSystem Service.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Return an <see cref="T:Gantry.Services.FileSystem.Abstractions.Contracts.IJsonModFile" /> representation of the file, on disk.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileSystemService.GetBinaryFile(System.String)">
            <summary>
            Retrieves a file that has previously been registered with the FileSystem Service.
            </summary>
            <param name="fileName">The name of the file, including file extension.</param>
            <returns>Return an <see cref="T:Gantry.Services.FileSystem.Abstractions.Contracts.IBinaryModFile" /> representation of the file, on disk.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileSystemService.ParseEmbeddedJsonFile``1(System.String)">
            <summary>
                Deserialises the specified file as a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <param name="fileName">The name of the file, including file extension.</param>
            <returns>An instance of type <typeparamref name="TModel" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileSystemService.ParseEmbeddedJsonArrayFile``1(System.String)">
            <summary>
                Deserialises the specified file as a strongly-typed object.
                The consuming type must have a paramaterless constructor.
            </summary>
            <typeparam name="TModel">The type of object to deserialise into.</typeparam>
            <param name="fileName">The name of the file, including file extension.</param>
            <returns>An instance of type <typeparamref name="TModel" />, populated with data from this file.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileSystemService.GetTextFile(System.String)">
            <summary>
            Retrieves a file that has previously been registered with the FileSystem Service.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Return an <see cref="T:Gantry.Services.FileSystem.Abstractions.Contracts.ITextModFile" /> representation of the file, on disk.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.FileSystemService.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.FileSystemServiceOptions">
            <summary>
            Configuration options for the file system service.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.FileSystemServiceOptions.Default">
            <summary>
                Gets the default settings for the file system service. Sets the root folder name to the Mod ID.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.FileSystemServiceOptions.RootFolderName">
            <summary>
                Returns the name of the root folder to use to store files for this mod, within the data folder of the game.
                %VINTAGE_STORY_DATA%\ModData\{RootFolderName}\
            </summary>
            <value>
                The name of the root folder to use to store files for this mod.
            </value>
        </member>
        <member name="P:Gantry.Services.FileSystem.FileSystemServiceOptions.RegisterSettingsFiles">
            <summary>
                Determines whether or not to register the standard settings files for the mod. Default: False.
            </summary>
            <remarks>
                "%VINTAGE_STORY_DATA%\ModData\{RootFolderName}\{Scope}\settings-{scope}-{side}.json"
            </remarks>
        </member>
        <member name="T:Gantry.Services.FileSystem.ModPaths">
            <summary>
                Helper class for determining mod paths.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.ModPaths.Initialise(System.String,System.String)">
            <summary>
            	Initialises static members of the <see cref="T:Gantry.Services.FileSystem.ModPaths" /> class.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.ModPaths.WorldGuid">
            <summary>
                Gets the world unique identifier.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.ModPaths.VintageModsRootPath">
            <summary>
                Gets the root path for all VintageMods mod files.
            </summary>
            <value>A path on the filesystem, used to store mod files.</value>
        </member>
        <member name="P:Gantry.Services.FileSystem.ModPaths.ModDataRootPath">
            <summary>
                Gets the path used for storing data files for a particular mod.
            </summary>
            <value>A path on the filesystem, used to store mod files.</value>
        </member>
        <member name="P:Gantry.Services.FileSystem.ModPaths.ModDataGlobalPath">
            <summary>
                Gets the path used for storing global data files.
            </summary>
            <value>A path on the filesystem, used to store mod files.</value>
        </member>
        <member name="P:Gantry.Services.FileSystem.ModPaths.ModDataWorldPath">
            <summary>
                Gets the path used for storing per-world data files.
            </summary>
            <value>A path on the filesystem, used to store mod files.</value>
        </member>
        <member name="P:Gantry.Services.FileSystem.ModPaths.ModRootPath">
            <summary>
                Gets the path that the mod library is stored in.
            </summary>
            <value>A path on the filesystem, used to store mod files.</value>
        </member>
        <member name="P:Gantry.Services.FileSystem.ModPaths.ModAssetsPath">
            <summary>
                Gets the main asset origin directory for the mod.
            </summary>
            <value>A path on the filesystem, used to store mod files.</value>
        </member>
        <member name="M:Gantry.Services.FileSystem.ModPaths.CreateDirectory(System.String)">
            <summary>
                Creates a directory on the file-system.
            </summary>
            <param name="path">A path on the filesystem, used to store mod files.</param>
            <returns>Returns the absolute path to the directory that has been created.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.ModPaths.Dispose">
            <summary>
                DEV NOTE: Stops world settings files from being transferred between worlds.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.Abstractions.IFileCollection">
            <summary>
                A File Container, which holds references to Added files, and their <see cref="T:Gantry.Services.FileSystem.v2.DataStructures.FileDescriptor"/> representations.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.Abstractions.IFileProvider">
            <summary>
                Defines a mechanism for retrieving a file, from the file system.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.Abstractions.IFileProvider.GetFile(System.String,Gantry.Services.FileSystem.v2.DataStructures.FileScope)">
            <summary>
                Gets the file, with the specified name, and scope.
            </summary>
            <param name="fileName">The name of the file, including the extension.</param>
            <param name="scope">Determines where the file is stored on the file system.</param>
            <returns>
                A <see cref="T:System.IO.FileInfo"/> representation of a file on the file system.
            </returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.Abstractions.IFileProvider.Wrap``1(System.String,Gantry.Services.FileSystem.v2.DataStructures.FileScope)">
            <summary>
                Gets the service object of the specified type.
            </summary>
            <param name="fileName">The name of the file to get.</param>
            <param name="scope">The scope of the file to get.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No file named `{fileName}`, of scope `{scope}`, has been registered.</exception>
            <exception cref="T:Gantry.Core.Diagnostics.GantryException">No wrapper found for file extension, `{file.Extension}`</exception>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.Abstractions.ModFileInfo">
            <summary>
                A wrapper of a <see cref="T:System.IO.FileInfo" /> for a specific file on on the filesystem. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.v2.Abstractions.ModFileInfo.Scope">
            <summary>
                Determines where the file is stored on the file system.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.v2.Abstractions.ModFileInfo.File">
            <summary>
                A <see cref="T:System.IO.FileInfo"/> representation of a file on the file system.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.Abstractions.ModFileInfo.#ctor(System.IO.FileInfo,Gantry.Services.FileSystem.v2.DataStructures.FileScope)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.v2.Abstractions.ModFileInfo"/> class.
            </summary>
            <param name="file">A <see cref="T:System.IO.FileInfo"/> representation of a file on the file system.</param>
            <param name="scope">Determines where the file is stored on the file system.</param>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.DataStructures.FileCollection">
            <summary>
                Default implementation of <see cref="T:Gantry.Services.FileSystem.v2.Abstractions.IFileCollection" />.
            </summary>
            <seealso cref="T:Gantry.Services.FileSystem.v2.Abstractions.IFileCollection" />
        </member>
        <member name="P:Gantry.Services.FileSystem.v2.DataStructures.FileCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:Gantry.Services.FileSystem.v2.DataStructures.FileCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Gantry.Services.FileSystem.v2.DataStructures.FileCollection.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.DataStructures.FileCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.DataStructures.FileCollection.Contains(Gantry.Services.FileSystem.v2.DataStructures.FileDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.DataStructures.FileCollection.CopyTo(Gantry.Services.FileSystem.v2.DataStructures.FileDescriptor[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.DataStructures.FileCollection.Remove(Gantry.Services.FileSystem.v2.DataStructures.FileDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.DataStructures.FileCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.DataStructures.FileCollection.IndexOf(Gantry.Services.FileSystem.v2.DataStructures.FileDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.DataStructures.FileCollection.Insert(System.Int32,Gantry.Services.FileSystem.v2.DataStructures.FileDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.DataStructures.FileCollection.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.DataStructures.FileDescriptor">
            <summary>
                Describes a file with its scope, and <see cref="T:System.IO.FileInfo"/> representation.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.v2.DataStructures.FileDescriptor.FileName">
            <summary>
                The name of the file, including the file extension.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.v2.DataStructures.FileDescriptor.Scope">
            <summary>
                Determines where the file is stored on the file system.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.v2.DataStructures.FileDescriptor.Path">
            <summary>
                The absolute path of the file, on the file system.
            </summary>
        </member>
        <member name="P:Gantry.Services.FileSystem.v2.DataStructures.FileDescriptor.File">
            <summary>
                A <see cref="T:System.IO.FileInfo"/> representation of a file on the file system.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.DataStructures.FileScope">
            <summary>
                Specifies the scope of a file saved to the user's game folder.
            </summary>
        </member>
        <member name="F:Gantry.Services.FileSystem.v2.DataStructures.FileScope.Global">
            <summary>
                Denotes that a file is held in global scope, for all multi-player and single-player worlds.
            </summary>
        </member>
        <member name="F:Gantry.Services.FileSystem.v2.DataStructures.FileScope.World">
            <summary>
                Denotes that a file is created for each world a player enters.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.Extensions.FileCollectionBuilderExtensions">
            <summary>
                Extension methods to aid the building of an <see cref="T:Gantry.Services.FileSystem.v2.Abstractions.IFileProvider"/> from an <see cref="T:Gantry.Services.FileSystem.v2.Abstractions.IFileCollection"/>.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.Extensions.FileCollectionBuilderExtensions.BuildServiceProvider(Gantry.Services.FileSystem.v2.Abstractions.IFileCollection)">
            <summary>
                Creates a <see cref="T:Gantry.Services.FileSystem.v2.FileProvider"/> containing files from the provided <see cref="T:Gantry.Services.FileSystem.v2.Abstractions.IFileCollection"/>.
            </summary>
            <param name="services">The <see cref="T:Gantry.Services.FileSystem.v2.Abstractions.IFileCollection"/> containing file descriptors.</param>
            <returns>The <see cref="T:Gantry.Services.FileSystem.v2.FileProvider"/>.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.Extensions.FileCollectionBuilderExtensions.BuildServiceProvider(Gantry.Services.FileSystem.v2.Abstractions.IFileCollection,System.Action{Gantry.Services.FileSystem.v2.FileProviderOptions})">
            <summary>
                Creates a <see cref="T:Gantry.Services.FileSystem.v2.FileProvider"/> containing files from the provided <see cref="T:Gantry.Services.FileSystem.v2.Abstractions.IFileCollection"/>.
            </summary>
            <param name="services">The <see cref="T:Gantry.Services.FileSystem.v2.Abstractions.IFileCollection"/> containing service descriptors.</param>
            <param name="optionsFactory"> Configures various file provider behaviours.</param>
            <returns>The <see cref="T:Gantry.Services.FileSystem.v2.FileProvider"/>.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.Extensions.FileCollectionBuilderExtensions.BuildServiceProvider(Gantry.Services.FileSystem.v2.Abstractions.IFileCollection,Gantry.Services.FileSystem.v2.FileProviderOptions)">
            <summary>
                Creates a <see cref="T:Gantry.Services.FileSystem.v2.FileProvider"/> containing files from the provided <see cref="T:Gantry.Services.FileSystem.v2.Abstractions.IFileCollection"/>.
            </summary>
            <param name="services">The <see cref="T:Gantry.Services.FileSystem.v2.Abstractions.IFileCollection"/> containing service descriptors.</param>
            <param name="options"> Configures various file provider behaviours.</param>
            <returns>The <see cref="T:Gantry.Services.FileSystem.v2.FileProvider"/>.</returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.FileProvider">
            <summary>
                Default implementation of <see cref="T:Gantry.Services.FileSystem.v2.Abstractions.IFileProvider" />.
            </summary>
            <seealso cref="T:Gantry.Services.FileSystem.v2.Abstractions.IFileProvider" />
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.FileProvider.#ctor(System.Collections.Generic.IEnumerable{Gantry.Services.FileSystem.v2.DataStructures.FileDescriptor},Gantry.Services.FileSystem.v2.FileProviderOptions)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.v2.Abstractions.IFileProvider"/> class.
            </summary>
            <param name="files">The <see cref="T:Gantry.Services.FileSystem.v2.Abstractions.IFileProvider"/> containing service descriptors.</param>
            <param name="options"> Configures various service provider behaviours.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.FileProvider.GetFile(System.String,Gantry.Services.FileSystem.v2.DataStructures.FileScope)">
            <summary>
                Gets the service object of the specified type.
            </summary>
            <param name="fileName">The name of the file to get.</param>
            <param name="scope">The scope of the file to get.</param>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.FileProvider.Gantry#Services#FileSystem#v2#Abstractions#IFileProvider#Wrap``1(System.String,Gantry.Services.FileSystem.v2.DataStructures.FileScope)">
            <summary>
                Gets the service object of the specified type.
            </summary>
            <param name="fileName">The name of the file to get.</param>
            <param name="scope">The scope of the file to get.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No file named `{fileName}`, of scope `{scope}`, has been registered.</exception>
            <exception cref="T:Gantry.Core.Diagnostics.GantryException">No wrapper found for file extension, `{file.Extension}`</exception>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.FileProviderOptions">
            <summary>
                Options for configuring various behaviors of the default <see cref="T:Gantry.Services.FileSystem.v2.Abstractions.IFileProvider"/> implementation.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.FileTypes.Binary.BinaryFile">
            <summary>
                Represents a binary file, on the file system.
            </summary>
            <seealso cref="T:Gantry.Services.FileSystem.v2.Abstractions.ModFileInfo" />
            <seealso cref="T:Gantry.Services.FileSystem.v2.FileTypes.Binary.IBinaryFile" />
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.FileTypes.Binary.BinaryFile.#ctor(System.IO.FileInfo,Gantry.Services.FileSystem.v2.DataStructures.FileScope)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.v2.FileTypes.Binary.BinaryFile"/> class.
            </summary>
            <param name="file">A <see cref="T:System.IO.FileInfo" /> representation of a file on the file system.</param>
            <param name="scope">Determines where the file is stored on the file system.</param>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.FileTypes.Binary.BinaryFileProviderExtensions">
            <summary>
                Extension methods to aid providing binary files to the user.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.FileTypes.Binary.BinaryFileProviderExtensions.GetBinaryFile(Gantry.Services.FileSystem.v2.Abstractions.IFileProvider,System.String,Gantry.Services.FileSystem.v2.DataStructures.FileScope)">
            <summary>
                Gets a binary file, previously registered with the file provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="fileName">The name of the file.</param>
            <param name="scope">The scope of the file.</param>
            <returns>A <see cref="T:Gantry.Services.FileSystem.v2.FileTypes.Binary.IBinaryFile"/> representation of the file, on the file system.</returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.FileTypes.Binary.IBinaryFile">
            <summary>
                Represents a binary file, on the file system.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.IJsonSettingsFile">
            <summary>
                Represents a JSON file, on the file system.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.JsonSettingsFile">
            <summary>
                Represents a JSON file, on the file system, used for configuring mod settings.
            </summary>
            <seealso cref="T:Gantry.Services.FileSystem.v2.Abstractions.ModFileInfo" />
            <seealso cref="T:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.IJsonSettingsFile" />
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.JsonSettingsFile.#ctor(System.IO.FileInfo,Gantry.Services.FileSystem.v2.DataStructures.FileScope)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.JsonSettingsFile"/> class.
            </summary>
            <param name="file">A <see cref="T:System.IO.FileInfo" /> representation of a file on the file system.</param>
            <param name="scope">Determines where the file is stored on the file system.</param>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.JsonSettingsFileProviderExtensions">
            <summary>
                Extension methods to aid providing JSON settings files to the user.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.JsonSettingsFileProviderExtensions.GetJsonSettingsFile(Gantry.Services.FileSystem.v2.Abstractions.IFileProvider,System.String,Gantry.Services.FileSystem.v2.DataStructures.FileScope)">
            <summary>
                Gets a JSON file, previously registered with the file provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="fileName">The name of the file.</param>
            <param name="scope">The scope of the file.</param>
            <returns>A <see cref="T:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.IJsonSettingsFile"/> representation of the file, on the file system.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.JsonSettingsFileProviderExtensions.GetClientSettings(Gantry.Services.FileSystem.v2.Abstractions.IFileProvider,Gantry.Services.FileSystem.v2.DataStructures.FileScope)">
            <summary>
                Gets the settings file for the specific scope, on the Client.
            </summary>
            <param name="provider">The provider.</param>
            <param name="scope">The scope of the file.</param>
            <returns>A <see cref="T:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.IJsonSettingsFile"/> representation of the file, on the file system.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.JsonSettingsFileProviderExtensions.GetServerSettings(Gantry.Services.FileSystem.v2.Abstractions.IFileProvider,Gantry.Services.FileSystem.v2.DataStructures.FileScope)">
            <summary>
                Gets the settings file for the specific scope, on the Server.
            </summary>
            <param name="provider">The provider.</param>
            <param name="scope">The scope of the file.</param>
            <returns>A <see cref="T:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.IJsonSettingsFile"/> representation of the file, on the file system.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.JsonSettingsFileProviderExtensions.GetSettings(Gantry.Services.FileSystem.v2.Abstractions.IFileProvider,Gantry.Services.FileSystem.v2.DataStructures.FileScope)">
            <summary>
                Gets the settings file for the specific scope, for the current app side.
            </summary>
            <param name="provider">The provider.</param>
            <param name="scope">The scope of the file.</param>
            <returns>A <see cref="T:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.IJsonSettingsFile"/> representation of the file, on the file system.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.JsonSettingsFileProviderExtensions.GetWorldSettings(Gantry.Services.FileSystem.v2.Abstractions.IFileProvider)">
            <summary>
                Gets the world settings file for the current app side.
            </summary>
            <param name="provider">The provider.</param>
            <returns>A <see cref="T:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.IJsonSettingsFile"/> representation of the file, on the file system.</returns>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.JsonSettingsFileProviderExtensions.GetGlobalSettings(Gantry.Services.FileSystem.v2.Abstractions.IFileProvider)">
            <summary>
                Gets the global settings file for the current app side.
            </summary>
            <param name="provider">The provider.</param>
            <returns>A <see cref="T:Gantry.Services.FileSystem.v2.FileTypes.JsonSettings.IJsonSettingsFile"/> representation of the file, on the file system.</returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.FileTypes.Json.IJsonFile">
            <summary>
                Represents a JSON file, on the file system.
            </summary>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.FileTypes.Json.JsonFile">
            <summary>
                Represents a JSON file, on the file system.
            </summary>
            <seealso cref="T:Gantry.Services.FileSystem.v2.Abstractions.ModFileInfo" />
            <seealso cref="T:Gantry.Services.FileSystem.v2.FileTypes.Json.IJsonFile" />
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.FileTypes.Json.JsonFile.#ctor(System.IO.FileInfo,Gantry.Services.FileSystem.v2.DataStructures.FileScope)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.v2.FileTypes.Json.JsonFile"/> class.
            </summary>
            <param name="file">A <see cref="T:System.IO.FileInfo" /> representation of a file on the file system.</param>
            <param name="scope">Determines where the file is stored on the file system.</param>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.FileTypes.Json.JsonFileProviderExtensions">
            <summary>
                Extension methods to aid providing JSON files to the user.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.FileTypes.Json.JsonFileProviderExtensions.GetJsonFile(Gantry.Services.FileSystem.v2.Abstractions.IFileProvider,System.String,Gantry.Services.FileSystem.v2.DataStructures.FileScope)">
            <summary>
                Gets a JSON file, previously registered with the file provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="fileName">The name of the file.</param>
            <param name="scope">The scope of the file.</param>
            <returns>A <see cref="T:Gantry.Services.FileSystem.v2.FileTypes.Json.IJsonFile"/> representation of the file, on the file system.</returns>
        </member>
        <member name="T:Gantry.Services.FileSystem.v2.Hosting.FileHost">
            <summary>
                Acts as a host for file system collections on the server, and client.
            </summary>
        </member>
        <member name="M:Gantry.Services.FileSystem.v2.Hosting.FileHost.#ctor">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Services.FileSystem.v2.Hosting.FileHost"/> class.
            </summary>
        </member>
        <member name="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute">
            <summary>
                Indicates that the decorated class or method should be applied as a patch, but only for a specified app-side.
            </summary>
            <seealso cref="T:HarmonyLib.HarmonyPatch" />
        </member>
        <member name="P:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.Side">
            <summary>
                Gets the app-side to run the patch on.
            </summary>
            <value>The app-side to run the patch on.</value>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,System.Type)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="declaringType">Type of the declaring method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,System.Type,System.Type[])">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="declaringType">Type of the declaring method to patch.</param>
            <param name="argumentTypes">The argument types, to further identify the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,System.Type,System.String)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="declaringType">Type of the declaring method to patch.</param>
            <param name="methodName">The name of the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,System.Type,System.String,System.Type[])">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="declaringType">Type of the declaring method to patch.</param>
            <param name="methodName">The name of the method to patch.</param>
            <param name="argumentTypes">The argument types, to further identify the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,System.Type,System.String,System.Type[],HarmonyLib.ArgumentType[])">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="declaringType">Type of the declaring method to patch.</param>
            <param name="methodName">The name of the method to patch.</param>
            <param name="argumentTypes">The argument types, to further identify the method to patch.</param>
            <param name="argumentVariations">The argument variations, to further identify the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,System.Type,HarmonyLib.MethodType)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="declaringType">Type of the declaring method to patch.</param>
            <param name="methodType">Type of the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,System.Type,HarmonyLib.MethodType,System.Type[])">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="declaringType">Type of the declaring method to patch.</param>
            <param name="methodType">Type of the method to patch.</param>
            <param name="argumentTypes">The argument types, to further identify the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,System.Type,HarmonyLib.MethodType,System.Type[],HarmonyLib.ArgumentType[])">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="declaringType">Type of the declaring method to patch.</param>
            <param name="methodType">Type of the method to patch.</param>
            <param name="argumentTypes">The argument types, to further identify the method to patch.</param>
            <param name="argumentVariations">The argument variations, to further identify the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,System.Type,System.String,HarmonyLib.MethodType)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="declaringType">Type of the declaring method to patch.</param>
            <param name="methodName">The name of the method to patch.</param>
            <param name="methodType">Type of the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,System.String)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="methodName">The name of the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,System.String,System.Type[])">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="methodName">The name of the method to patch.</param>
            <param name="argumentTypes">The argument types, to further identify the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,System.String,System.Type[],HarmonyLib.ArgumentType[])">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="methodName">The name of the method to patch.</param>
            <param name="argumentTypes">The argument types, to further identify the method to patch.</param>
            <param name="argumentVariations">The argument variations, to further identify the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,System.String,HarmonyLib.MethodType)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="methodName">The name of the method to patch.</param>
            <param name="methodType">Type of the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,HarmonyLib.MethodType)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="methodType">Type of the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,HarmonyLib.MethodType,System.Type[])">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="methodType">Type of the method to patch.</param>
            <param name="argumentTypes">The argument types, to further identify the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,HarmonyLib.MethodType,System.Type[],HarmonyLib.ArgumentType[])">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="methodType">Type of the method to patch.</param>
            <param name="argumentTypes">The argument types, to further identify the method to patch.</param>
            <param name="argumentVariations">The argument variations, to further identify the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,System.Type[])">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="argumentTypes">The argument types, to further identify the method to patch.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute.#ctor(Vintagestory.API.Common.EnumAppSide,System.Type[],HarmonyLib.ArgumentType[])">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute"/> class.
            </summary>
            <param name="forSide">The app-side to run the patch on.</param>
            <param name="argumentTypes">The argument types, to further identify the method to patch.</param>
            <param name="argumentVariations">The argument variations, to further identify the method to patch.</param>
        </member>
        <member name="T:Gantry.Services.HarmonyPatches.DependencyInjection.GantryDependencyInjectionExtensions">
            <summary>
                Extension methods to aid the registration of the Harmony Patching service, into a Gantry MDK IOC Container.
            </summary>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.DependencyInjection.GantryDependencyInjectionExtensions.AddHarmonyPatchingService(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,System.Action{Gantry.Services.HarmonyPatches.HarmonyPatchingServiceOptions})">
            <summary>
                Adds the embedded resources service to the service collection.
            </summary>
            <param name="services">The services collection to add the service to.</param>
            <param name="options">The options to pass to the service.</param>
            <returns>A reference to this instance, after this operation has completed.</returns>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.DependencyInjection.GantryDependencyInjectionExtensions.AddHarmonyPatchingService(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection)">
            <summary>
                Adds the embedded resources service to the service collection.
            </summary>
            <param name="services">The services collection to add the service to.</param>
            <returns>A reference to this instance, after this operation has completed.</returns>
        </member>
        <member name="T:Gantry.Services.HarmonyPatches.HarmonyPatchingService">
            <summary>
                Provides methods of applying Harmony patches to the game.
            </summary>
            <remarks>
                By default, all annotated [HarmonyPatch] classes in the executing assembly will
                be processed at launch. Manual patches can be processed later on at runtime.
            </remarks>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.HarmonyPatchingService.#ctor">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.HarmonyPatchingService"/> class.
            </summary>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.HarmonyPatchingService.#ctor(Gantry.Services.HarmonyPatches.HarmonyPatchingServiceOptions)">
            <summary>
                Initialises a new instance of the <see cref="T:Gantry.Services.HarmonyPatches.HarmonyPatchingService"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.HarmonyPatchingService.CreateOrUseInstance(System.String)">
            <summary>
                Creates a new patch host, if one with the specified ID doesn't already exist.
            </summary>
            <param name="harmonyId">The identifier to use for the patch host.</param>
            <returns>A <see cref="T:HarmonyLib.Harmony" /> patch host.</returns>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.HarmonyPatchingService.PatchModAssembly">
            <summary>
            By default, all annotated [HarmonyPatch] classes in the executing assembly will
            be processed at launch. Manual patches can be processed later on at runtime.
            </summary>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.HarmonyPatchingService.PatchAssembly(System.Reflection.Assembly)">
            <summary>
            By default, all annotated [HarmonyPatch] classes in the executing assembly will
            be processed at launch. Manual patches can be processed later on at runtime.
            </summary>
        </member>
        <member name="P:Gantry.Services.HarmonyPatches.HarmonyPatchingService.Default">
            <summary>
                Gets the default harmony instance for the mod.
            </summary>
            <value>
            The default Harmony instance for the mod, with the mod assembly's full name as the instance ID.
            </value>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.HarmonyPatchingService.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.HarmonyPatchingService.PatchAll(HarmonyLib.Harmony,System.Reflection.Assembly)">
            <summary>
                Runs all patches within classes decorated with the <see cref="T:Gantry.Services.HarmonyPatches.Annotations.HarmonySidedPatchAttribute" /> attribute, for the given side.
            </summary>
            <param name="instance">The harmony instance for which to run the patches for.</param>
            <param name="assembly">The assembly that hold the annotated patch classes to process.</param>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.HarmonyPatchingService.UnpatchAll">
            <summary>
                Un-patches all methods, within all patch host instances being handled by this service.
            </summary>
        </member>
        <member name="T:Gantry.Services.HarmonyPatches.HarmonyPatchingServiceOptions">
            <summary>
                Options for creating the Harmony Patching Service.
            </summary>
        </member>
        <member name="P:Gantry.Services.HarmonyPatches.HarmonyPatchingServiceOptions.AutoPatchModAssembly">
            <summary>
                Should patches from the mod assembly be automatically applied to the game? Default: True.
            </summary>
        </member>
        <member name="P:Gantry.Services.HarmonyPatches.HarmonyPatchingServiceOptions.DefaultInstanceName">
            <summary>
                The ID of the default <see cref="T:HarmonyLib.Harmony"/> instance used by the mod. Default: ModEx.ModAssembly.FullName.
            </summary>
        </member>
        <member name="T:Gantry.Services.HarmonyPatches.IHarmonyPatchingService">
            <summary>
                Provides methods of applying Harmony patches to the game.
            </summary>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.IHarmonyPatchingService.PatchModAssembly">
            <summary>
                Apply patches to the game, located in the mod assembly.
            </summary>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.IHarmonyPatchingService.CreateOrUseInstance(System.String)">
            <summary>
                Creates a new patch host, if one with the specified ID doesn't already exist.
            </summary>
            <param name="harmonyId">The identifier to use for the patch host.</param>
            <returns>A <see cref="T:HarmonyLib.Harmony" /> patch host.</returns>
        </member>
        <member name="P:Gantry.Services.HarmonyPatches.IHarmonyPatchingService.Default">
            <summary>
                Gets the default harmony instance for the mod.
            </summary>
            <value>The default Harmony instance for the mod, with the mod assembly's full name as the instance ID.</value>
        </member>
        <member name="M:Gantry.Services.HarmonyPatches.IHarmonyPatchingService.PatchAssembly(System.Reflection.Assembly)">
            <summary>
            By default, all annotated [HarmonyPatch] classes in the executing assembly will
            be processed at launch. Manual patches can be processed later on at runtime.
            </summary>
        </member>
        <member name="T:Gantry.Services.Network.DependencyInjection.GantryDependencyInjectionExtensions">
            <summary>
                Extension methods to aid the registration of the Network service, into a Gantry MDK IOC Container.
            </summary>
        </member>
        <member name="M:Gantry.Services.Network.DependencyInjection.GantryDependencyInjectionExtensions.AddNetworkService(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection,System.Action{Gantry.Services.Network.NetworkServiceOptions})">
            <summary>
                Adds the embedded resources service to the service collection.
            </summary>
            <param name="services">The services collection to add the service to.</param>
            <param name="options">The services collection to add the service to.</param>
            <returns>A reference to this instance, after this operation has completed.</returns>
        </member>
        <member name="M:Gantry.Services.Network.DependencyInjection.GantryDependencyInjectionExtensions.AddNetworkService(ApacheTech.Common.DependencyInjection.Abstractions.IServiceCollection)">
            <summary>
                Adds the embedded resources service to the service collection.
            </summary>
            <param name="services">The services collection to add the service to.</param>
            <returns>A reference to this instance, after this operation has completed.</returns>
        </member>
        <member name="T:Gantry.Services.Network.Extensions.NetworkChannelExtensions">
            <summary>
                Extension methods for networking between client and server.
            </summary>
        </member>
        <member name="M:Gantry.Services.Network.Extensions.NetworkChannelExtensions.UnregisterMessageHandler``1(Vintagestory.API.Client.IClientNetworkChannel)">
            <summary>
                Unregisters a specific message handler from the <see cref="T:Vintagestory.API.Client.IClientNetworkChannel"/>.
            </summary>
            <typeparam name="T">The type of message to unregister.</typeparam>
            <param name="channel">The channel.</param>
            <returns>The same <see cref="T:Vintagestory.API.Client.IClientNetworkChannel"/> that made the request.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No such message type {typeFromHandle} registered. Did you forgot to call RegisterMessageType?</exception>
            <exception cref="T:System.ArgumentException">Please do not use array messages, they seem to cause serialisation problems in rare cases. Pack that array into its own class.</exception>
        </member>
        <member name="M:Gantry.Services.Network.Extensions.NetworkChannelExtensions.UnregisterMessageHandler``1(Vintagestory.API.Server.IServerNetworkChannel)">
            <summary>
                Unregisters a specific message handler from the <see cref="T:Vintagestory.API.Server.IServerNetworkChannel"/>.
            </summary>
            <typeparam name="T">The type of message to unregister.</typeparam>
            <param name="channel">The channel.</param>
            <returns>The same <see cref="T:Vintagestory.API.Server.IServerNetworkChannel"/> that made the request.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No such message type {typeFromHandle} registered. Did you forgot to call RegisterMessageType?</exception>
            <exception cref="T:System.ArgumentException">Please do not use array messages, they seem to cause serialisation problems in rare cases. Pack that array into its own class.</exception>
        </member>
        <member name="T:Gantry.Services.Network.Extensions.PacketExtensions">
            <summary>
                Extension methods to aid working with network packets.
            </summary>
        </member>
        <member name="M:Gantry.Services.Network.Extensions.PacketExtensions.SendPacket``1(Vintagestory.API.Client.IClientNetworkChannel)">
            <summary>
                Sends a packet to the server.
            </summary>
            <typeparam name="T">The type of packet to send to the server.</typeparam>
            <param name="channel">The channel on which to send the packet.</param>
        </member>
        <member name="M:Gantry.Services.Network.Extensions.PacketExtensions.SendPacket``1(Vintagestory.API.Server.IServerNetworkChannel)">
            <summary>
                Sends a packet to a set list of players.
            </summary>
            <typeparam name="T">The type of packet to send to the server.</typeparam>
            <param name="channel">The channel on which to send the packet.</param>
        </member>
        <member name="M:Gantry.Services.Network.Extensions.PacketExtensions.SendPacket``1(Vintagestory.API.Server.IServerNetworkChannel,Vintagestory.API.Server.IServerPlayer[])">
            <summary>
                Sends a packet to a set list of players.
            </summary>
            <typeparam name="T">The type of packet to send to the server.</typeparam>
            <param name="channel">The channel on which to send the packet.</param>
            <param name="players">The players to send the packet to.</param>
        </member>
        <member name="M:Gantry.Services.Network.Extensions.PacketExtensions.BroadcastPacket``1(Vintagestory.API.Server.IServerNetworkChannel)">
            <summary>
                Broadcasts a packet to the server.
            </summary>
            <typeparam name="T">The type of packet to send to the server.</typeparam>
            <param name="channel">The channel on which to send the packet.</param>
        </member>
        <member name="M:Gantry.Services.Network.Extensions.PacketExtensions.BroadcastPacket``1(Vintagestory.API.Server.IServerNetworkChannel,Vintagestory.API.Server.IServerPlayer[])">
            <summary>
                Broadcasts a packet to the server.
            </summary>
            <typeparam name="T">The type of packet to send to the server.</typeparam>
            <param name="channel">The channel on which to send the packet.</param>
            <param name="exceptPlayers">The players to not send the packet to.</param>
        </member>
        <member name="T:Gantry.Services.Network.GantryNetworkService">
            <summary>
                A service that provides narrowed scope access to network channels within the game.
            </summary>
            <seealso cref="T:Gantry.Services.Network.IClientNetworkService" />
            <seealso cref="T:Gantry.Services.Network.IServerNetworkService" />
            <seealso cref="T:Gantry.Services.Network.IUniversalNetworkService" />
        </member>
        <member name="M:Gantry.Services.Network.GantryNetworkService.#ctor(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.Network.GantryNetworkService"/> class.
            </summary>
            <param name="api">The universal Core API.</param>
        </member>
        <member name="M:Gantry.Services.Network.GantryNetworkService.#ctor(Vintagestory.API.Common.ICoreAPI,Gantry.Services.Network.NetworkServiceOptions)">
            <summary>
            	Initialises a new instance of the <see cref="T:Gantry.Services.Network.GantryNetworkService"/> class.
            </summary>
            <param name="api">The universal Core API.</param>
            <param name="options">The options to pass to the service.</param>
        </member>
        <member name="M:Gantry.Services.Network.GantryNetworkService.ClientChannel(System.String)">
            <summary>
                Retrieves a client-side network channel.
            </summary>
            <param name="channelName">Name of the channel.</param>
            <returns>An instance of <see cref="T:Vintagestory.API.Client.IClientNetworkChannel" />, used to send and receive network messages on the client.</returns>
        </member>
        <member name="M:Gantry.Services.Network.GantryNetworkService.ServerChannel(System.String)">
            <summary>
                Retrieves a server-side network channel.
            </summary>
            <param name="channelName">The name of the channel to register.</param>
            <returns>An instance of <see cref="T:Vintagestory.API.Server.IServerNetworkChannel" />, used to send and receive network messages on the server.</returns>
        </member>
        <member name="P:Gantry.Services.Network.GantryNetworkService.DefaultServerChannel">
            <summary>
                Retrieves the mod's default server-side network channel.
            </summary>
            <value>The default server channel.</value>
        </member>
        <member name="P:Gantry.Services.Network.GantryNetworkService.DefaultClientChannel">
            <summary>
                Retrieves the mod's default client-side network channel.
            </summary>
            <value>The default client channel.</value>
        </member>
        <member name="M:Gantry.Services.Network.GantryNetworkService.RegisterServerChannel(System.String)">
            <summary>
                Registers a network channel on the server.
            </summary>
            <param name="channelName">The name of the channel to register.</param>
        </member>
        <member name="M:Gantry.Services.Network.GantryNetworkService.RegisterClientChannel(System.String)">
            <summary>
                Registers a network channel on client.
            </summary>
            <param name="channelName">The name of the channel to register.</param>
        </member>
        <member name="M:Gantry.Services.Network.GantryNetworkService.RegisterChannel(System.String)">
            <summary>
                Registers a network channel on the app side this method is called from.
            </summary>
            <param name="channelName">The name of the channel to register.</param>
        </member>
        <member name="T:Gantry.Services.Network.IClientNetworkService">
            <summary>
                Provides narrowed scope access to network channels within the game.
            </summary>
        </member>
        <member name="M:Gantry.Services.Network.IClientNetworkService.ClientChannel(System.String)">
            <summary>
                Retrieves a client-side network channel.
            </summary>
            <param name="channelName">Name of the channel.</param>
            <returns>An instance of <see cref="T:Vintagestory.API.Client.IClientNetworkChannel"/>, used to send and receive network messages on the client.</returns>
        </member>
        <member name="P:Gantry.Services.Network.IClientNetworkService.DefaultClientChannel">
            <summary>
                Retrieves the mod's default client-side network channel.
            </summary>
            <returns>An instance of <see cref="T:Vintagestory.API.Client.IClientNetworkChannel"/>, used to send and receive network messages on the client.</returns>
        </member>
        <member name="M:Gantry.Services.Network.IClientNetworkService.RegisterClientChannel(System.String)">
            <summary>
                Registers a network channel on the client.
            </summary>
            <param name="channelName">The name of the channel to register.</param>
        </member>
        <member name="T:Gantry.Services.Network.IServerNetworkService">
            <summary>
                Provides narrowed scope access to network channels within the game.
            </summary>
        </member>
        <member name="M:Gantry.Services.Network.IServerNetworkService.ServerChannel(System.String)">
            <summary>
                Retrieves a server-side network channel.
            </summary>
            <param name="channelName">Name of the channel.</param>
            <returns>An instance of <see cref="T:Vintagestory.API.Server.IServerNetworkChannel"/>, used to send and receive network messages on the server.</returns>
        </member>
        <member name="P:Gantry.Services.Network.IServerNetworkService.DefaultServerChannel">
            <summary>
                Retrieves the mod's default server-side network channel.
            </summary>
            <returns>An instance of <see cref="T:Vintagestory.API.Server.IServerNetworkChannel"/>, used to send and receive network messages on the server.</returns>
        </member>
        <member name="M:Gantry.Services.Network.IServerNetworkService.RegisterServerChannel(System.String)">
            <summary>
                Registers a network channel on the server.
            </summary>
            <param name="channelName">The name of the channel to register.</param>
        </member>
        <member name="T:Gantry.Services.Network.IUniversalNetworkService">
            <summary>
                A service that provides narrowed scope access to network channels within the game.
            </summary>
            <seealso cref="T:Gantry.Services.Network.IClientNetworkService" />
            <seealso cref="T:Gantry.Services.Network.IServerNetworkService" />
        </member>
        <member name="M:Gantry.Services.Network.IUniversalNetworkService.RegisterChannel(System.String)">
            <summary>
                Registers a network channel on the app side this method is called from.
            </summary>
            <param name="channelName">The name of the channel to register.</param>
        </member>
        <member name="T:Gantry.Services.Network.NetworkServiceOptions">
            <summary>
                Configuration options for the file system service.
            </summary>
        </member>
        <member name="P:Gantry.Services.Network.NetworkServiceOptions.Default">
            <summary>
                Gets the default settings for the file system service. Sets the root folder name to the Mod ID.
            </summary>
        </member>
        <member name="P:Gantry.Services.Network.NetworkServiceOptions.DefaultChannelName">
            <summary>
                Returns the name used to create the default network channel for the mod. Defaults as the ModID.
            </summary>
            <value>
                The name of the root folder to use to store files for this mod.
            </value>
        </member>
        <member name="T:Gantry.Services.Network.Packets.SignalPacket">
            <summary>
                Represents a generic signalling packet, used to raise an event for a change of state.
            </summary>
        </member>
        <member name="P:Gantry.Services.Network.Packets.SignalPacket.Ping">
            <summary>
                Initialises an instance of the <see cref="T:Gantry.Services.Network.Packets.SignalPacket"/> class.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseKindFlags">
            <summary>
            Specifies the details of implicitly used symbol when it is marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Default">
            <summary>
               By default: Access | Assign | InstantiatedWithFixedConstructorSignature
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
                Only entity marked with attribute considered used.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
                Indicates implicit assignment to a member.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type with fixed constructor signature.
                That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specifies what is considered to be used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Default">
            <summary>
                By default, the type marked with the attribute are considered used.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Itself">
            <summary>
                The type marked with the attribute are considered used.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
                Members of the type marked with the attribute are considered used.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithInheritors">
            <summary>
                Inherited entities are considered used.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
                Entity marked with the attribute and all its members considered used.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.All">
            <summary>
                Entity marked with the attribute and all its members considered used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Can be applied to attributes, type parameters, and parameters of a type assignable from <see cref="T:System.Type"/> .
            When applied to an attribute, the decorated attribute behaves the same as <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            When applied to a type parameter or to a parameter of type <see cref="T:System.Type"/>,
            indicates that the corresponding type is used implicitly.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will be ignored by usage-checking inspections. <br/>
            You can use <see cref="T:JetBrains.Annotations.ImplicitUseKindFlags"/> and <see cref="T:JetBrains.Annotations.ImplicitUseTargetFlags"/>
            to configure how this attribute is applied.
            </summary>
            <example><code>
            [UsedImplicitly]
            public class TypeConverter {}
            
            public class SummaryData
            {
              [UsedImplicitly(ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature)]
              public SummaryData() {}
            }
            
            [UsedImplicitly(ImplicitUseTargetFlags.WithInheritors | ImplicitUseTargetFlags.Default)]
            public interface IService {}
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor">
            <summary>
                Initialises a new instance of the <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor(JetBrains.Annotations.ImplicitUseTargetFlags)">
            <summary>
                Initialises a new instance of the <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/> class.
            </summary>
            <param name="targetFlags">The target flags.</param>
        </member>
        <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags,JetBrains.Annotations.ImplicitUseTargetFlags)">
            <summary>
                Initialises a new instance of the <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/> class.
            </summary>
            <param name="useKindFlags">The use kind flags.</param>
            <param name="targetFlags">The target flags.</param>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.UseKindFlags">
            <summary>
                Gets the use kind flags.
            </summary>
            <value>
                The use kind flags.
            </value>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
                Gets the target flags.
            </summary>
            <value>
                The target flags.
            </value>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
    </members>
</doc>
